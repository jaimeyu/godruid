// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gathergrpc/gather.proto

/*
Package gathergrpc is a generated protocol buffer package.

It is generated from these files:
	gathergrpc/gather.proto

It has these top-level messages:
	TenantDescriptor
	AdminUser
	AdminUserList
	TenantDomain
	TenantDomainDetails
	TenantIngestionProfile
	TenantUser
	TenantUserRequest
	TenantUserResponse
	TenantUserIdRequest
	TenantDomainIdRequest
	TenantUserListResponse
	TenantDomainRequest
	TenantDomainResponse
	TenantDomainListResponse
	TenantIngestionProfileRequest
	TenantIngestionProfileResponse
	TenantIngestionProfileIdRequest
*/
package gathergrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Enumeration of User state.
type UserState int32

const (
	UserState_UNKNOWN        UserState = 0
	UserState_INVITED        UserState = 1
	UserState_ACTIVE         UserState = 2
	UserState_SUSPENDED      UserState = 3
	UserState_PENDING_DELETE UserState = 4
)

var UserState_name = map[int32]string{
	0: "UNKNOWN",
	1: "INVITED",
	2: "ACTIVE",
	3: "SUSPENDED",
	4: "PENDING_DELETE",
}
var UserState_value = map[string]int32{
	"UNKNOWN":        0,
	"INVITED":        1,
	"ACTIVE":         2,
	"SUSPENDED":      3,
	"PENDING_DELETE": 4,
}

func (x UserState) String() string {
	return proto.EnumName(UserState_name, int32(x))
}
func (UserState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Provides the metadata of a Tenant. This information is used to
// idetify/describe a full Tenant entity.
type TenantDescriptor struct {
	Id                    string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Rev                   string    `protobuf:"bytes,2,opt,name=rev" json:"rev,omitempty"`
	Datatype              string    `protobuf:"bytes,3,opt,name=datatype" json:"datatype,omitempty"`
	Name                  string    `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	UrlSubdomain          string    `protobuf:"bytes,5,opt,name=urlSubdomain" json:"urlSubdomain,omitempty"`
	State                 UserState `protobuf:"varint,6,opt,name=state,enum=gathergrpc.UserState" json:"state,omitempty"`
	CreatedTimestamp      int64     `protobuf:"varint,7,opt,name=createdTimestamp" json:"createdTimestamp,omitempty"`
	LastModifiedTimestamp int64     `protobuf:"varint,8,opt,name=lastModifiedTimestamp" json:"lastModifiedTimestamp,omitempty"`
}

func (m *TenantDescriptor) Reset()                    { *m = TenantDescriptor{} }
func (m *TenantDescriptor) String() string            { return proto.CompactTextString(m) }
func (*TenantDescriptor) ProtoMessage()               {}
func (*TenantDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TenantDescriptor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TenantDescriptor) GetRev() string {
	if m != nil {
		return m.Rev
	}
	return ""
}

func (m *TenantDescriptor) GetDatatype() string {
	if m != nil {
		return m.Datatype
	}
	return ""
}

func (m *TenantDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TenantDescriptor) GetUrlSubdomain() string {
	if m != nil {
		return m.UrlSubdomain
	}
	return ""
}

func (m *TenantDescriptor) GetState() UserState {
	if m != nil {
		return m.State
	}
	return UserState_UNKNOWN
}

func (m *TenantDescriptor) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

func (m *TenantDescriptor) GetLastModifiedTimestamp() int64 {
	if m != nil {
		return m.LastModifiedTimestamp
	}
	return 0
}

// User data for an Adminstrative User.
type AdminUser struct {
	Id                    string    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Rev                   string    `protobuf:"bytes,2,opt,name=rev" json:"rev,omitempty"`
	Datatype              string    `protobuf:"bytes,3,opt,name=datatype" json:"datatype,omitempty"`
	Username              string    `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`
	Password              string    `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	SendOnboardingEmail   bool      `protobuf:"varint,6,opt,name=sendOnboardingEmail" json:"sendOnboardingEmail,omitempty"`
	OnboardingToken       string    `protobuf:"bytes,7,opt,name=onboardingToken" json:"onboardingToken,omitempty"`
	UserVerified          bool      `protobuf:"varint,8,opt,name=userVerified" json:"userVerified,omitempty"`
	State                 UserState `protobuf:"varint,9,opt,name=state,enum=gathergrpc.UserState" json:"state,omitempty"`
	CreatedTimestamp      int64     `protobuf:"varint,10,opt,name=createdTimestamp" json:"createdTimestamp,omitempty"`
	LastModifiedTimestamp int64     `protobuf:"varint,11,opt,name=lastModifiedTimestamp" json:"lastModifiedTimestamp,omitempty"`
}

func (m *AdminUser) Reset()                    { *m = AdminUser{} }
func (m *AdminUser) String() string            { return proto.CompactTextString(m) }
func (*AdminUser) ProtoMessage()               {}
func (*AdminUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AdminUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AdminUser) GetRev() string {
	if m != nil {
		return m.Rev
	}
	return ""
}

func (m *AdminUser) GetDatatype() string {
	if m != nil {
		return m.Datatype
	}
	return ""
}

func (m *AdminUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AdminUser) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AdminUser) GetSendOnboardingEmail() bool {
	if m != nil {
		return m.SendOnboardingEmail
	}
	return false
}

func (m *AdminUser) GetOnboardingToken() string {
	if m != nil {
		return m.OnboardingToken
	}
	return ""
}

func (m *AdminUser) GetUserVerified() bool {
	if m != nil {
		return m.UserVerified
	}
	return false
}

func (m *AdminUser) GetState() UserState {
	if m != nil {
		return m.State
	}
	return UserState_UNKNOWN
}

func (m *AdminUser) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

func (m *AdminUser) GetLastModifiedTimestamp() int64 {
	if m != nil {
		return m.LastModifiedTimestamp
	}
	return 0
}

// Wrapper message to provide a response in the form of
// a container of multiple AdminUser objects.
type AdminUserList struct {
	List []*AdminUser `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *AdminUserList) Reset()                    { *m = AdminUserList{} }
func (m *AdminUserList) String() string            { return proto.CompactTextString(m) }
func (*AdminUserList) ProtoMessage()               {}
func (*AdminUserList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AdminUserList) GetList() []*AdminUser {
	if m != nil {
		return m.List
	}
	return nil
}

// TenantDomain - model for a Domain for a single Tenant.
type TenantDomain struct {
	Id                    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Rev                   string `protobuf:"bytes,2,opt,name=rev" json:"rev,omitempty"`
	Datatype              string `protobuf:"bytes,3,opt,name=datatype" json:"datatype,omitempty"`
	Name                  string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Color                 string `protobuf:"bytes,5,opt,name=color" json:"color,omitempty"`
	CreatedTimestamp      int64  `protobuf:"varint,6,opt,name=createdTimestamp" json:"createdTimestamp,omitempty"`
	LastModifiedTimestamp int64  `protobuf:"varint,7,opt,name=lastModifiedTimestamp" json:"lastModifiedTimestamp,omitempty"`
}

func (m *TenantDomain) Reset()                    { *m = TenantDomain{} }
func (m *TenantDomain) String() string            { return proto.CompactTextString(m) }
func (*TenantDomain) ProtoMessage()               {}
func (*TenantDomain) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TenantDomain) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TenantDomain) GetRev() string {
	if m != nil {
		return m.Rev
	}
	return ""
}

func (m *TenantDomain) GetDatatype() string {
	if m != nil {
		return m.Datatype
	}
	return ""
}

func (m *TenantDomain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TenantDomain) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *TenantDomain) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

func (m *TenantDomain) GetLastModifiedTimestamp() int64 {
	if m != nil {
		return m.LastModifiedTimestamp
	}
	return 0
}

// Shortened version of a TenantDomain with just the important details.
// Used to save space when including Domains inside of a TenantUser object.
type TenantDomainDetails struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Color string `protobuf:"bytes,3,opt,name=color" json:"color,omitempty"`
}

func (m *TenantDomainDetails) Reset()                    { *m = TenantDomainDetails{} }
func (m *TenantDomainDetails) String() string            { return proto.CompactTextString(m) }
func (*TenantDomainDetails) ProtoMessage()               {}
func (*TenantDomainDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TenantDomainDetails) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TenantDomainDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TenantDomainDetails) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

// TenantIngestionProfile - model for the singleton object that
// governs what data is displayed for a Tenant.
type TenantIngestionProfile struct {
	Id                    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Rev                   string `protobuf:"bytes,2,opt,name=rev" json:"rev,omitempty"`
	Datatype              string `protobuf:"bytes,3,opt,name=datatype" json:"datatype,omitempty"`
	ScpUsername           string `protobuf:"bytes,4,opt,name=scpUsername" json:"scpUsername,omitempty"`
	ScpPassword           string `protobuf:"bytes,5,opt,name=scpPassword" json:"scpPassword,omitempty"`
	CreatedTimestamp      int64  `protobuf:"varint,6,opt,name=createdTimestamp" json:"createdTimestamp,omitempty"`
	LastModifiedTimestamp int64  `protobuf:"varint,7,opt,name=lastModifiedTimestamp" json:"lastModifiedTimestamp,omitempty"`
}

func (m *TenantIngestionProfile) Reset()                    { *m = TenantIngestionProfile{} }
func (m *TenantIngestionProfile) String() string            { return proto.CompactTextString(m) }
func (*TenantIngestionProfile) ProtoMessage()               {}
func (*TenantIngestionProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TenantIngestionProfile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TenantIngestionProfile) GetRev() string {
	if m != nil {
		return m.Rev
	}
	return ""
}

func (m *TenantIngestionProfile) GetDatatype() string {
	if m != nil {
		return m.Datatype
	}
	return ""
}

func (m *TenantIngestionProfile) GetScpUsername() string {
	if m != nil {
		return m.ScpUsername
	}
	return ""
}

func (m *TenantIngestionProfile) GetScpPassword() string {
	if m != nil {
		return m.ScpPassword
	}
	return ""
}

func (m *TenantIngestionProfile) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

func (m *TenantIngestionProfile) GetLastModifiedTimestamp() int64 {
	if m != nil {
		return m.LastModifiedTimestamp
	}
	return 0
}

// TenantUser - model for a User that is scoped to a single Tenant.
type TenantUser struct {
	Id                    string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Rev                   string                 `protobuf:"bytes,2,opt,name=rev" json:"rev,omitempty"`
	Datatype              string                 `protobuf:"bytes,3,opt,name=datatype" json:"datatype,omitempty"`
	Username              string                 `protobuf:"bytes,4,opt,name=username" json:"username,omitempty"`
	Password              string                 `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
	SendOnboardingEmail   bool                   `protobuf:"varint,6,opt,name=sendOnboardingEmail" json:"sendOnboardingEmail,omitempty"`
	OnboardingToken       string                 `protobuf:"bytes,7,opt,name=onboardingToken" json:"onboardingToken,omitempty"`
	UserVerified          bool                   `protobuf:"varint,8,opt,name=userVerified" json:"userVerified,omitempty"`
	State                 UserState              `protobuf:"varint,9,opt,name=state,enum=gathergrpc.UserState" json:"state,omitempty"`
	Domains               []*TenantDomainDetails `protobuf:"bytes,10,rep,name=domains" json:"domains,omitempty"`
	CreatedTimestamp      int64                  `protobuf:"varint,12,opt,name=createdTimestamp" json:"createdTimestamp,omitempty"`
	LastModifiedTimestamp int64                  `protobuf:"varint,13,opt,name=lastModifiedTimestamp" json:"lastModifiedTimestamp,omitempty"`
}

func (m *TenantUser) Reset()                    { *m = TenantUser{} }
func (m *TenantUser) String() string            { return proto.CompactTextString(m) }
func (*TenantUser) ProtoMessage()               {}
func (*TenantUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TenantUser) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TenantUser) GetRev() string {
	if m != nil {
		return m.Rev
	}
	return ""
}

func (m *TenantUser) GetDatatype() string {
	if m != nil {
		return m.Datatype
	}
	return ""
}

func (m *TenantUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *TenantUser) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *TenantUser) GetSendOnboardingEmail() bool {
	if m != nil {
		return m.SendOnboardingEmail
	}
	return false
}

func (m *TenantUser) GetOnboardingToken() string {
	if m != nil {
		return m.OnboardingToken
	}
	return ""
}

func (m *TenantUser) GetUserVerified() bool {
	if m != nil {
		return m.UserVerified
	}
	return false
}

func (m *TenantUser) GetState() UserState {
	if m != nil {
		return m.State
	}
	return UserState_UNKNOWN
}

func (m *TenantUser) GetDomains() []*TenantDomainDetails {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *TenantUser) GetCreatedTimestamp() int64 {
	if m != nil {
		return m.CreatedTimestamp
	}
	return 0
}

func (m *TenantUser) GetLastModifiedTimestamp() int64 {
	if m != nil {
		return m.LastModifiedTimestamp
	}
	return 0
}

// TenantUserRequest - wrapper for requests that involve a User that
// is scoped to a single Tenant.
type TenantUserRequest struct {
	TenantId string      `protobuf:"bytes,1,opt,name=tenantId" json:"tenantId,omitempty"`
	User     *TenantUser `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *TenantUserRequest) Reset()                    { *m = TenantUserRequest{} }
func (m *TenantUserRequest) String() string            { return proto.CompactTextString(m) }
func (*TenantUserRequest) ProtoMessage()               {}
func (*TenantUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TenantUserRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *TenantUserRequest) GetUser() *TenantUser {
	if m != nil {
		return m.User
	}
	return nil
}

// TenantUserResponse - wrapper for responses to requests that involve a User that
// is scoped to a single Tenant.
type TenantUserResponse struct {
	TenantId string      `protobuf:"bytes,1,opt,name=tenantId" json:"tenantId,omitempty"`
	User     *TenantUser `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (m *TenantUserResponse) Reset()                    { *m = TenantUserResponse{} }
func (m *TenantUserResponse) String() string            { return proto.CompactTextString(m) }
func (*TenantUserResponse) ProtoMessage()               {}
func (*TenantUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TenantUserResponse) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *TenantUserResponse) GetUser() *TenantUser {
	if m != nil {
		return m.User
	}
	return nil
}

// TenantUserIdRequest - wrapper for requests that involve a Tenant User,
// but only require the userID to complete the request.
type TenantUserIdRequest struct {
	TenantId string `protobuf:"bytes,1,opt,name=tenantId" json:"tenantId,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
}

func (m *TenantUserIdRequest) Reset()                    { *m = TenantUserIdRequest{} }
func (m *TenantUserIdRequest) String() string            { return proto.CompactTextString(m) }
func (*TenantUserIdRequest) ProtoMessage()               {}
func (*TenantUserIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TenantUserIdRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *TenantUserIdRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// TenantDomainIdRequest - wrapper for requests that involve a Tenant Domaiun,
// but only require the domain to complete the request.
type TenantDomainIdRequest struct {
	TenantId string `protobuf:"bytes,1,opt,name=tenantId" json:"tenantId,omitempty"`
	DomainId string `protobuf:"bytes,2,opt,name=domainId" json:"domainId,omitempty"`
}

func (m *TenantDomainIdRequest) Reset()                    { *m = TenantDomainIdRequest{} }
func (m *TenantDomainIdRequest) String() string            { return proto.CompactTextString(m) }
func (*TenantDomainIdRequest) ProtoMessage()               {}
func (*TenantDomainIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TenantDomainIdRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *TenantDomainIdRequest) GetDomainId() string {
	if m != nil {
		return m.DomainId
	}
	return ""
}

// TenantUserListResponse - a wrapper to handle requests that return a
// list of TenantUser objects.
type TenantUserListResponse struct {
	TenantId string        `protobuf:"bytes,1,opt,name=tenantId" json:"tenantId,omitempty"`
	List     []*TenantUser `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *TenantUserListResponse) Reset()                    { *m = TenantUserListResponse{} }
func (m *TenantUserListResponse) String() string            { return proto.CompactTextString(m) }
func (*TenantUserListResponse) ProtoMessage()               {}
func (*TenantUserListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TenantUserListResponse) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *TenantUserListResponse) GetList() []*TenantUser {
	if m != nil {
		return m.List
	}
	return nil
}

// TenantDomainRequest - wrapper for requests that involve a Tenant Domain
type TenantDomainRequest struct {
	TenantId string        `protobuf:"bytes,1,opt,name=tenantId" json:"tenantId,omitempty"`
	Domain   *TenantDomain `protobuf:"bytes,2,opt,name=domain" json:"domain,omitempty"`
}

func (m *TenantDomainRequest) Reset()                    { *m = TenantDomainRequest{} }
func (m *TenantDomainRequest) String() string            { return proto.CompactTextString(m) }
func (*TenantDomainRequest) ProtoMessage()               {}
func (*TenantDomainRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TenantDomainRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *TenantDomainRequest) GetDomain() *TenantDomain {
	if m != nil {
		return m.Domain
	}
	return nil
}

// TenantDomainResponse - wrapper for responses that involve a Tenant Domain
type TenantDomainResponse struct {
	TenantId string        `protobuf:"bytes,1,opt,name=tenantId" json:"tenantId,omitempty"`
	Domain   *TenantDomain `protobuf:"bytes,2,opt,name=domain" json:"domain,omitempty"`
}

func (m *TenantDomainResponse) Reset()                    { *m = TenantDomainResponse{} }
func (m *TenantDomainResponse) String() string            { return proto.CompactTextString(m) }
func (*TenantDomainResponse) ProtoMessage()               {}
func (*TenantDomainResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TenantDomainResponse) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *TenantDomainResponse) GetDomain() *TenantDomain {
	if m != nil {
		return m.Domain
	}
	return nil
}

// TenantDomainListResponse - a wrapper for a list of TenantDomain objects that
// are returned as a response to a request..
type TenantDomainListResponse struct {
	TenantId string          `protobuf:"bytes,1,opt,name=tenantId" json:"tenantId,omitempty"`
	List     []*TenantDomain `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *TenantDomainListResponse) Reset()                    { *m = TenantDomainListResponse{} }
func (m *TenantDomainListResponse) String() string            { return proto.CompactTextString(m) }
func (*TenantDomainListResponse) ProtoMessage()               {}
func (*TenantDomainListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TenantDomainListResponse) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *TenantDomainListResponse) GetList() []*TenantDomain {
	if m != nil {
		return m.List
	}
	return nil
}

// TenantIngestionProfileRequest - wrapper for requests that involve the
// Tenant Ingestion Profile
type TenantIngestionProfileRequest struct {
	TenantId         string                  `protobuf:"bytes,1,opt,name=tenantId" json:"tenantId,omitempty"`
	IngestionProfile *TenantIngestionProfile `protobuf:"bytes,2,opt,name=ingestionProfile" json:"ingestionProfile,omitempty"`
}

func (m *TenantIngestionProfileRequest) Reset()                    { *m = TenantIngestionProfileRequest{} }
func (m *TenantIngestionProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*TenantIngestionProfileRequest) ProtoMessage()               {}
func (*TenantIngestionProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *TenantIngestionProfileRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *TenantIngestionProfileRequest) GetIngestionProfile() *TenantIngestionProfile {
	if m != nil {
		return m.IngestionProfile
	}
	return nil
}

// TenantIngestionProfileResponse - wrapper to provide a Tenant Ingestion Profile
// in a response.
type TenantIngestionProfileResponse struct {
	TenantId         string                  `protobuf:"bytes,1,opt,name=tenantId" json:"tenantId,omitempty"`
	IngestionProfile *TenantIngestionProfile `protobuf:"bytes,2,opt,name=ingestionProfile" json:"ingestionProfile,omitempty"`
}

func (m *TenantIngestionProfileResponse) Reset()                    { *m = TenantIngestionProfileResponse{} }
func (m *TenantIngestionProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*TenantIngestionProfileResponse) ProtoMessage()               {}
func (*TenantIngestionProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *TenantIngestionProfileResponse) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *TenantIngestionProfileResponse) GetIngestionProfile() *TenantIngestionProfile {
	if m != nil {
		return m.IngestionProfile
	}
	return nil
}

// TenantIngestionProfileIdRequest - wrapper for requests that involve the
// Tenant Ingestion Profile but only need the id
type TenantIngestionProfileIdRequest struct {
	TenantId           string `protobuf:"bytes,1,opt,name=tenantId" json:"tenantId,omitempty"`
	IngestionProfileId string `protobuf:"bytes,2,opt,name=ingestionProfileId" json:"ingestionProfileId,omitempty"`
}

func (m *TenantIngestionProfileIdRequest) Reset()         { *m = TenantIngestionProfileIdRequest{} }
func (m *TenantIngestionProfileIdRequest) String() string { return proto.CompactTextString(m) }
func (*TenantIngestionProfileIdRequest) ProtoMessage()    {}
func (*TenantIngestionProfileIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17}
}

func (m *TenantIngestionProfileIdRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *TenantIngestionProfileIdRequest) GetIngestionProfileId() string {
	if m != nil {
		return m.IngestionProfileId
	}
	return ""
}

func init() {
	proto.RegisterType((*TenantDescriptor)(nil), "gathergrpc.TenantDescriptor")
	proto.RegisterType((*AdminUser)(nil), "gathergrpc.AdminUser")
	proto.RegisterType((*AdminUserList)(nil), "gathergrpc.AdminUserList")
	proto.RegisterType((*TenantDomain)(nil), "gathergrpc.TenantDomain")
	proto.RegisterType((*TenantDomainDetails)(nil), "gathergrpc.TenantDomainDetails")
	proto.RegisterType((*TenantIngestionProfile)(nil), "gathergrpc.TenantIngestionProfile")
	proto.RegisterType((*TenantUser)(nil), "gathergrpc.TenantUser")
	proto.RegisterType((*TenantUserRequest)(nil), "gathergrpc.TenantUserRequest")
	proto.RegisterType((*TenantUserResponse)(nil), "gathergrpc.TenantUserResponse")
	proto.RegisterType((*TenantUserIdRequest)(nil), "gathergrpc.TenantUserIdRequest")
	proto.RegisterType((*TenantDomainIdRequest)(nil), "gathergrpc.TenantDomainIdRequest")
	proto.RegisterType((*TenantUserListResponse)(nil), "gathergrpc.TenantUserListResponse")
	proto.RegisterType((*TenantDomainRequest)(nil), "gathergrpc.TenantDomainRequest")
	proto.RegisterType((*TenantDomainResponse)(nil), "gathergrpc.TenantDomainResponse")
	proto.RegisterType((*TenantDomainListResponse)(nil), "gathergrpc.TenantDomainListResponse")
	proto.RegisterType((*TenantIngestionProfileRequest)(nil), "gathergrpc.TenantIngestionProfileRequest")
	proto.RegisterType((*TenantIngestionProfileResponse)(nil), "gathergrpc.TenantIngestionProfileResponse")
	proto.RegisterType((*TenantIngestionProfileIdRequest)(nil), "gathergrpc.TenantIngestionProfileIdRequest")
	proto.RegisterEnum("gathergrpc.UserState", UserState_name, UserState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AdminProvisioningService service

type AdminProvisioningServiceClient interface {
	// Create a User with Administrative access.
	CreateAdminUser(ctx context.Context, in *AdminUser, opts ...grpc.CallOption) (*AdminUser, error)
	// Update a User with Administrative access.
	UpdateAdminUser(ctx context.Context, in *AdminUser, opts ...grpc.CallOption) (*AdminUser, error)
	// Delete a User with Administrative access.
	DeleteAdminUser(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*AdminUser, error)
	// Retrieve and Administrative User by id.
	GetAdminUser(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*AdminUser, error)
	// Retrieve all Administrative Users.
	GetAllAdminUsers(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*AdminUserList, error)
	// Creates a Tenant and returns a TenantDescriptor which provides
	// metadata for the newly created Tenant.
	CreateTenant(ctx context.Context, in *TenantDescriptor, opts ...grpc.CallOption) (*TenantDescriptor, error)
	// Updates a TenantDescriptor, which provides metadata
	// for the specified Tenant.
	UpdateTenantDescriptor(ctx context.Context, in *TenantDescriptor, opts ...grpc.CallOption) (*TenantDescriptor, error)
	// Deletes a Tenant and returns a TenantDescriptor which provides
	// metadata for the now deleted Tenant.
	DeleteTenant(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantDescriptor, error)
	// Retrieves the metadata of a single Tenant by id.
	GetTenantDescriptor(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantDescriptor, error)
}

type adminProvisioningServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminProvisioningServiceClient(cc *grpc.ClientConn) AdminProvisioningServiceClient {
	return &adminProvisioningServiceClient{cc}
}

func (c *adminProvisioningServiceClient) CreateAdminUser(ctx context.Context, in *AdminUser, opts ...grpc.CallOption) (*AdminUser, error) {
	out := new(AdminUser)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/CreateAdminUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) UpdateAdminUser(ctx context.Context, in *AdminUser, opts ...grpc.CallOption) (*AdminUser, error) {
	out := new(AdminUser)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/UpdateAdminUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) DeleteAdminUser(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*AdminUser, error) {
	out := new(AdminUser)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/DeleteAdminUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) GetAdminUser(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*AdminUser, error) {
	out := new(AdminUser)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/GetAdminUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) GetAllAdminUsers(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*AdminUserList, error) {
	out := new(AdminUserList)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/GetAllAdminUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) CreateTenant(ctx context.Context, in *TenantDescriptor, opts ...grpc.CallOption) (*TenantDescriptor, error) {
	out := new(TenantDescriptor)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/CreateTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) UpdateTenantDescriptor(ctx context.Context, in *TenantDescriptor, opts ...grpc.CallOption) (*TenantDescriptor, error) {
	out := new(TenantDescriptor)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/UpdateTenantDescriptor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) DeleteTenant(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantDescriptor, error) {
	out := new(TenantDescriptor)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/DeleteTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) GetTenantDescriptor(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantDescriptor, error) {
	out := new(TenantDescriptor)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/GetTenantDescriptor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminProvisioningService service

type AdminProvisioningServiceServer interface {
	// Create a User with Administrative access.
	CreateAdminUser(context.Context, *AdminUser) (*AdminUser, error)
	// Update a User with Administrative access.
	UpdateAdminUser(context.Context, *AdminUser) (*AdminUser, error)
	// Delete a User with Administrative access.
	DeleteAdminUser(context.Context, *google_protobuf1.StringValue) (*AdminUser, error)
	// Retrieve and Administrative User by id.
	GetAdminUser(context.Context, *google_protobuf1.StringValue) (*AdminUser, error)
	// Retrieve all Administrative Users.
	GetAllAdminUsers(context.Context, *google_protobuf2.Empty) (*AdminUserList, error)
	// Creates a Tenant and returns a TenantDescriptor which provides
	// metadata for the newly created Tenant.
	CreateTenant(context.Context, *TenantDescriptor) (*TenantDescriptor, error)
	// Updates a TenantDescriptor, which provides metadata
	// for the specified Tenant.
	UpdateTenantDescriptor(context.Context, *TenantDescriptor) (*TenantDescriptor, error)
	// Deletes a Tenant and returns a TenantDescriptor which provides
	// metadata for the now deleted Tenant.
	DeleteTenant(context.Context, *google_protobuf1.StringValue) (*TenantDescriptor, error)
	// Retrieves the metadata of a single Tenant by id.
	GetTenantDescriptor(context.Context, *google_protobuf1.StringValue) (*TenantDescriptor, error)
}

func RegisterAdminProvisioningServiceServer(s *grpc.Server, srv AdminProvisioningServiceServer) {
	s.RegisterService(&_AdminProvisioningService_serviceDesc, srv)
}

func _AdminProvisioningService_CreateAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).CreateAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/CreateAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).CreateAdminUser(ctx, req.(*AdminUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_UpdateAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).UpdateAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/UpdateAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).UpdateAdminUser(ctx, req.(*AdminUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_DeleteAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).DeleteAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/DeleteAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).DeleteAdminUser(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_GetAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).GetAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/GetAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).GetAdminUser(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_GetAllAdminUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).GetAllAdminUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/GetAllAdminUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).GetAllAdminUsers(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/CreateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).CreateTenant(ctx, req.(*TenantDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_UpdateTenantDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).UpdateTenantDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/UpdateTenantDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).UpdateTenantDescriptor(ctx, req.(*TenantDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/DeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).DeleteTenant(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_GetTenantDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).GetTenantDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/GetTenantDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).GetTenantDescriptor(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminProvisioningService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gathergrpc.AdminProvisioningService",
	HandlerType: (*AdminProvisioningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAdminUser",
			Handler:    _AdminProvisioningService_CreateAdminUser_Handler,
		},
		{
			MethodName: "UpdateAdminUser",
			Handler:    _AdminProvisioningService_UpdateAdminUser_Handler,
		},
		{
			MethodName: "DeleteAdminUser",
			Handler:    _AdminProvisioningService_DeleteAdminUser_Handler,
		},
		{
			MethodName: "GetAdminUser",
			Handler:    _AdminProvisioningService_GetAdminUser_Handler,
		},
		{
			MethodName: "GetAllAdminUsers",
			Handler:    _AdminProvisioningService_GetAllAdminUsers_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _AdminProvisioningService_CreateTenant_Handler,
		},
		{
			MethodName: "UpdateTenantDescriptor",
			Handler:    _AdminProvisioningService_UpdateTenantDescriptor_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _AdminProvisioningService_DeleteTenant_Handler,
		},
		{
			MethodName: "GetTenantDescriptor",
			Handler:    _AdminProvisioningService_GetTenantDescriptor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gathergrpc/gather.proto",
}

// Client API for TenantProvisioningService service

type TenantProvisioningServiceClient interface {
	// Create a User scoped to a Single Tenant.
	CreateTenantUser(ctx context.Context, in *TenantUserRequest, opts ...grpc.CallOption) (*TenantUserResponse, error)
	// Update a User scoped to a single Tenant.
	UpdateTenantUser(ctx context.Context, in *TenantUserRequest, opts ...grpc.CallOption) (*TenantUserResponse, error)
	// Delete a User scoped to a single Tenant.
	DeleteTenantUser(ctx context.Context, in *TenantUserIdRequest, opts ...grpc.CallOption) (*TenantUserResponse, error)
	// Retrieve a User scoped to a single Tenant.
	GetTenantUser(ctx context.Context, in *TenantUserIdRequest, opts ...grpc.CallOption) (*TenantUserResponse, error)
	// Retrieve all Users scoped to a single Tenant.
	GetAllTenantUsers(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantUserListResponse, error)
	// Create a Domain scoped to a Single Tenant.
	CreateTenantDomain(ctx context.Context, in *TenantDomainRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error)
	// Update a Domain scoped to a single Tenant.
	UpdateTenantDomain(ctx context.Context, in *TenantDomainRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error)
	// Delete a Domain scoped to a single Tenant.
	DeleteTenantDomain(ctx context.Context, in *TenantDomainIdRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error)
	// Retrieve a Domain scoped to a single Tenant.
	GetTenantDomain(ctx context.Context, in *TenantDomainIdRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error)
	// Retrieve all Domains scoped to a single Tenant.
	GetAllTenantDomains(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantDomainListResponse, error)
	// Create a Ingestion Profile scoped to a Single Tenant.
	CreateTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error)
	// Updates an Ingestion Profile, which provides details on the data
	// collected for the Tenant.
	UpdateTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error)
	// Retrieves an Ingestion Profile, which provides details on the data
	// collected for the Tenant.
	GetTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileIdRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error)
	// Delete an Ingestion Profile scoped to a single Tenant.
	DeleteTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileIdRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error)
}

type tenantProvisioningServiceClient struct {
	cc *grpc.ClientConn
}

func NewTenantProvisioningServiceClient(cc *grpc.ClientConn) TenantProvisioningServiceClient {
	return &tenantProvisioningServiceClient{cc}
}

func (c *tenantProvisioningServiceClient) CreateTenantUser(ctx context.Context, in *TenantUserRequest, opts ...grpc.CallOption) (*TenantUserResponse, error) {
	out := new(TenantUserResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/CreateTenantUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) UpdateTenantUser(ctx context.Context, in *TenantUserRequest, opts ...grpc.CallOption) (*TenantUserResponse, error) {
	out := new(TenantUserResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/UpdateTenantUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) DeleteTenantUser(ctx context.Context, in *TenantUserIdRequest, opts ...grpc.CallOption) (*TenantUserResponse, error) {
	out := new(TenantUserResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/DeleteTenantUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) GetTenantUser(ctx context.Context, in *TenantUserIdRequest, opts ...grpc.CallOption) (*TenantUserResponse, error) {
	out := new(TenantUserResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/GetTenantUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) GetAllTenantUsers(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantUserListResponse, error) {
	out := new(TenantUserListResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/GetAllTenantUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) CreateTenantDomain(ctx context.Context, in *TenantDomainRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error) {
	out := new(TenantDomainResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/CreateTenantDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) UpdateTenantDomain(ctx context.Context, in *TenantDomainRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error) {
	out := new(TenantDomainResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/UpdateTenantDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) DeleteTenantDomain(ctx context.Context, in *TenantDomainIdRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error) {
	out := new(TenantDomainResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/DeleteTenantDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) GetTenantDomain(ctx context.Context, in *TenantDomainIdRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error) {
	out := new(TenantDomainResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/GetTenantDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) GetAllTenantDomains(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantDomainListResponse, error) {
	out := new(TenantDomainListResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/GetAllTenantDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) CreateTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error) {
	out := new(TenantIngestionProfileResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/CreateTenantIngestionProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) UpdateTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error) {
	out := new(TenantIngestionProfileResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/UpdateTenantIngestionProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) GetTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileIdRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error) {
	out := new(TenantIngestionProfileResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/GetTenantIngestionProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) DeleteTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileIdRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error) {
	out := new(TenantIngestionProfileResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/DeleteTenantIngestionProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TenantProvisioningService service

type TenantProvisioningServiceServer interface {
	// Create a User scoped to a Single Tenant.
	CreateTenantUser(context.Context, *TenantUserRequest) (*TenantUserResponse, error)
	// Update a User scoped to a single Tenant.
	UpdateTenantUser(context.Context, *TenantUserRequest) (*TenantUserResponse, error)
	// Delete a User scoped to a single Tenant.
	DeleteTenantUser(context.Context, *TenantUserIdRequest) (*TenantUserResponse, error)
	// Retrieve a User scoped to a single Tenant.
	GetTenantUser(context.Context, *TenantUserIdRequest) (*TenantUserResponse, error)
	// Retrieve all Users scoped to a single Tenant.
	GetAllTenantUsers(context.Context, *google_protobuf1.StringValue) (*TenantUserListResponse, error)
	// Create a Domain scoped to a Single Tenant.
	CreateTenantDomain(context.Context, *TenantDomainRequest) (*TenantDomainResponse, error)
	// Update a Domain scoped to a single Tenant.
	UpdateTenantDomain(context.Context, *TenantDomainRequest) (*TenantDomainResponse, error)
	// Delete a Domain scoped to a single Tenant.
	DeleteTenantDomain(context.Context, *TenantDomainIdRequest) (*TenantDomainResponse, error)
	// Retrieve a Domain scoped to a single Tenant.
	GetTenantDomain(context.Context, *TenantDomainIdRequest) (*TenantDomainResponse, error)
	// Retrieve all Domains scoped to a single Tenant.
	GetAllTenantDomains(context.Context, *google_protobuf1.StringValue) (*TenantDomainListResponse, error)
	// Create a Ingestion Profile scoped to a Single Tenant.
	CreateTenantIngestionProfile(context.Context, *TenantIngestionProfileRequest) (*TenantIngestionProfileResponse, error)
	// Updates an Ingestion Profile, which provides details on the data
	// collected for the Tenant.
	UpdateTenantIngestionProfile(context.Context, *TenantIngestionProfileRequest) (*TenantIngestionProfileResponse, error)
	// Retrieves an Ingestion Profile, which provides details on the data
	// collected for the Tenant.
	GetTenantIngestionProfile(context.Context, *TenantIngestionProfileIdRequest) (*TenantIngestionProfileResponse, error)
	// Delete an Ingestion Profile scoped to a single Tenant.
	DeleteTenantIngestionProfile(context.Context, *TenantIngestionProfileIdRequest) (*TenantIngestionProfileResponse, error)
}

func RegisterTenantProvisioningServiceServer(s *grpc.Server, srv TenantProvisioningServiceServer) {
	s.RegisterService(&_TenantProvisioningService_serviceDesc, srv)
}

func _TenantProvisioningService_CreateTenantUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).CreateTenantUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/CreateTenantUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).CreateTenantUser(ctx, req.(*TenantUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_UpdateTenantUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).UpdateTenantUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/UpdateTenantUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).UpdateTenantUser(ctx, req.(*TenantUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_DeleteTenantUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).DeleteTenantUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/DeleteTenantUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).DeleteTenantUser(ctx, req.(*TenantUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_GetTenantUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).GetTenantUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/GetTenantUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).GetTenantUser(ctx, req.(*TenantUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_GetAllTenantUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).GetAllTenantUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/GetAllTenantUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).GetAllTenantUsers(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_CreateTenantDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).CreateTenantDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/CreateTenantDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).CreateTenantDomain(ctx, req.(*TenantDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_UpdateTenantDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).UpdateTenantDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/UpdateTenantDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).UpdateTenantDomain(ctx, req.(*TenantDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_DeleteTenantDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDomainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).DeleteTenantDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/DeleteTenantDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).DeleteTenantDomain(ctx, req.(*TenantDomainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_GetTenantDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDomainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).GetTenantDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/GetTenantDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).GetTenantDomain(ctx, req.(*TenantDomainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_GetAllTenantDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).GetAllTenantDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/GetAllTenantDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).GetAllTenantDomains(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_CreateTenantIngestionProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantIngestionProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).CreateTenantIngestionProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/CreateTenantIngestionProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).CreateTenantIngestionProfile(ctx, req.(*TenantIngestionProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_UpdateTenantIngestionProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantIngestionProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).UpdateTenantIngestionProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/UpdateTenantIngestionProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).UpdateTenantIngestionProfile(ctx, req.(*TenantIngestionProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_GetTenantIngestionProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantIngestionProfileIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).GetTenantIngestionProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/GetTenantIngestionProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).GetTenantIngestionProfile(ctx, req.(*TenantIngestionProfileIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_DeleteTenantIngestionProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantIngestionProfileIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).DeleteTenantIngestionProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/DeleteTenantIngestionProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).DeleteTenantIngestionProfile(ctx, req.(*TenantIngestionProfileIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TenantProvisioningService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gathergrpc.TenantProvisioningService",
	HandlerType: (*TenantProvisioningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTenantUser",
			Handler:    _TenantProvisioningService_CreateTenantUser_Handler,
		},
		{
			MethodName: "UpdateTenantUser",
			Handler:    _TenantProvisioningService_UpdateTenantUser_Handler,
		},
		{
			MethodName: "DeleteTenantUser",
			Handler:    _TenantProvisioningService_DeleteTenantUser_Handler,
		},
		{
			MethodName: "GetTenantUser",
			Handler:    _TenantProvisioningService_GetTenantUser_Handler,
		},
		{
			MethodName: "GetAllTenantUsers",
			Handler:    _TenantProvisioningService_GetAllTenantUsers_Handler,
		},
		{
			MethodName: "CreateTenantDomain",
			Handler:    _TenantProvisioningService_CreateTenantDomain_Handler,
		},
		{
			MethodName: "UpdateTenantDomain",
			Handler:    _TenantProvisioningService_UpdateTenantDomain_Handler,
		},
		{
			MethodName: "DeleteTenantDomain",
			Handler:    _TenantProvisioningService_DeleteTenantDomain_Handler,
		},
		{
			MethodName: "GetTenantDomain",
			Handler:    _TenantProvisioningService_GetTenantDomain_Handler,
		},
		{
			MethodName: "GetAllTenantDomains",
			Handler:    _TenantProvisioningService_GetAllTenantDomains_Handler,
		},
		{
			MethodName: "CreateTenantIngestionProfile",
			Handler:    _TenantProvisioningService_CreateTenantIngestionProfile_Handler,
		},
		{
			MethodName: "UpdateTenantIngestionProfile",
			Handler:    _TenantProvisioningService_UpdateTenantIngestionProfile_Handler,
		},
		{
			MethodName: "GetTenantIngestionProfile",
			Handler:    _TenantProvisioningService_GetTenantIngestionProfile_Handler,
		},
		{
			MethodName: "DeleteTenantIngestionProfile",
			Handler:    _TenantProvisioningService_DeleteTenantIngestionProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gathergrpc/gather.proto",
}

func init() { proto.RegisterFile("gathergrpc/gather.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x5f, 0x6f, 0xdb, 0x54,
	0x14, 0xc7, 0x49, 0xd7, 0x36, 0xa7, 0xe9, 0xea, 0xdd, 0xad, 0xad, 0x6b, 0xba, 0x35, 0xf3, 0x40,
	0x4a, 0xd3, 0x35, 0xde, 0x0a, 0x3c, 0xd0, 0xb7, 0xb1, 0x44, 0x55, 0x60, 0xa4, 0x55, 0x92, 0x16,
	0x21, 0x90, 0xc0, 0x8d, 0x6f, 0x83, 0x35, 0xc7, 0x36, 0xbe, 0x4e, 0xa7, 0xa9, 0xaa, 0xc4, 0x1f,
	0x69, 0x42, 0x1a, 0x48, 0x93, 0x78, 0xe0, 0xdb, 0x4c, 0x48, 0xbc, 0xf2, 0xc6, 0x0b, 0x1f, 0x80,
	0x8f, 0xc1, 0x03, 0xf2, 0xbd, 0xb6, 0x63, 0xd7, 0x76, 0xe2, 0xac, 0x51, 0x9f, 0x78, 0xf3, 0x3d,
	0xe7, 0xdc, 0x7b, 0x7e, 0xe7, 0x9c, 0xdf, 0x3d, 0x39, 0x37, 0xb0, 0xda, 0x53, 0x9c, 0x6f, 0xb0,
	0xdd, 0xb3, 0xad, 0xae, 0xcc, 0x3e, 0xab, 0x96, 0x6d, 0x3a, 0x26, 0x82, 0xa1, 0x42, 0x5c, 0xef,
	0x99, 0x66, 0x4f, 0xc7, 0xb2, 0x62, 0x69, 0xb2, 0x62, 0x18, 0xa6, 0xa3, 0x38, 0x9a, 0x69, 0x10,
	0x66, 0x29, 0xde, 0xf1, 0xb4, 0x74, 0x75, 0x3c, 0x38, 0x91, 0x9f, 0xd9, 0x8a, 0x65, 0x61, 0xdb,
	0xd7, 0xbf, 0x7d, 0x51, 0x8f, 0xfb, 0x96, 0xf3, 0x9c, 0x29, 0xa5, 0xdf, 0x72, 0xc0, 0x77, 0xb0,
	0xa1, 0x18, 0x4e, 0x0d, 0x93, 0xae, 0xad, 0x59, 0x8e, 0x69, 0xa3, 0xeb, 0x90, 0xd3, 0x54, 0x81,
	0x2b, 0x71, 0xe5, 0x42, 0x2b, 0xa7, 0xa9, 0x88, 0x87, 0xbc, 0x8d, 0x4f, 0x85, 0x1c, 0x15, 0xb8,
	0x9f, 0x48, 0x84, 0x79, 0x55, 0x71, 0x14, 0xe7, 0xb9, 0x85, 0x85, 0x3c, 0x15, 0x07, 0x6b, 0x84,
	0x60, 0xc6, 0x50, 0xfa, 0x58, 0x98, 0xa1, 0x72, 0xfa, 0x8d, 0x24, 0x28, 0x0e, 0x6c, 0xbd, 0x3d,
	0x38, 0x56, 0xcd, 0xbe, 0xa2, 0x19, 0xc2, 0x35, 0xaa, 0x8b, 0xc8, 0xd0, 0x16, 0x5c, 0x23, 0x8e,
	0xe2, 0x60, 0x61, 0xb6, 0xc4, 0x95, 0xaf, 0xef, 0x2c, 0x57, 0x87, 0x19, 0xa8, 0x1e, 0x12, 0x6c,
	0xb7, 0x5d, 0x65, 0x8b, 0xd9, 0xa0, 0x0a, 0xf0, 0x5d, 0x1b, 0x2b, 0x0e, 0x56, 0x3b, 0x5a, 0x1f,
	0x13, 0x47, 0xe9, 0x5b, 0xc2, 0x5c, 0x89, 0x2b, 0xe7, 0x5b, 0x31, 0x39, 0x7a, 0x1f, 0x96, 0x75,
	0x85, 0x38, 0x9f, 0x9a, 0xaa, 0x76, 0xa2, 0x85, 0x37, 0xcc, 0xd3, 0x0d, 0xc9, 0x4a, 0xe9, 0x55,
	0x1e, 0x0a, 0x8f, 0xd4, 0xbe, 0x66, 0xb8, 0xbe, 0x2f, 0x99, 0x12, 0x11, 0xe6, 0x07, 0x04, 0xdb,
	0xa1, 0xb4, 0x04, 0x6b, 0x57, 0x67, 0x29, 0x84, 0x3c, 0x33, 0x6d, 0xd5, 0x4b, 0x4b, 0xb0, 0x46,
	0x0f, 0xe0, 0x26, 0xc1, 0x86, 0xba, 0x6f, 0x1c, 0x9b, 0x8a, 0xad, 0x6a, 0x46, 0xaf, 0xde, 0x57,
	0x34, 0x9d, 0x26, 0x68, 0xbe, 0x95, 0xa4, 0x42, 0x65, 0x58, 0x32, 0x03, 0x51, 0xc7, 0x7c, 0x8a,
	0x0d, 0x9a, 0x96, 0x42, 0xeb, 0xa2, 0x98, 0x96, 0x84, 0x60, 0xfb, 0x08, 0xdb, 0x34, 0x70, 0x9a,
	0x8c, 0xf9, 0x56, 0x44, 0x36, 0x2c, 0x49, 0xe1, 0x0d, 0x4b, 0x02, 0x93, 0x96, 0x64, 0x61, 0x54,
	0x49, 0x76, 0x61, 0x31, 0xa8, 0xc8, 0x13, 0x8d, 0x38, 0x68, 0x13, 0x66, 0x74, 0x8d, 0x38, 0x02,
	0x57, 0xca, 0x97, 0x17, 0xa2, 0xf0, 0x02, 0xc3, 0x16, 0x35, 0x91, 0xfe, 0xe6, 0xa0, 0xe8, 0x11,
	0x9d, 0xd1, 0x6d, 0xfa, 0x24, 0xbf, 0x05, 0xd7, 0xba, 0xa6, 0x6e, 0xda, 0x5e, 0x19, 0xd9, 0x22,
	0x31, 0x2d, 0xb3, 0x93, 0xa6, 0x65, 0x6e, 0x54, 0x5a, 0xf6, 0xe1, 0x66, 0x38, 0xb2, 0x1a, 0x76,
	0x14, 0x4d, 0x27, 0xb1, 0x00, 0x7d, 0xc8, 0xb9, 0x24, 0xc8, 0xf9, 0x10, 0x64, 0xe9, 0x5f, 0x0e,
	0x56, 0xd8, 0x89, 0x0d, 0xa3, 0x87, 0x89, 0xdb, 0x6c, 0x0e, 0x6c, 0xf3, 0x44, 0xd3, 0xf1, 0x25,
	0xb3, 0x56, 0x82, 0x05, 0xd2, 0xb5, 0x0e, 0xa3, 0x57, 0x21, 0x2c, 0xf2, 0x2c, 0x0e, 0xa2, 0x17,
	0x22, 0x2c, 0xba, 0x82, 0x7c, 0xfe, 0x99, 0x07, 0x60, 0xe1, 0xff, 0x7f, 0xf5, 0xb3, 0x5d, 0xfd,
	0x0f, 0x61, 0x8e, 0x35, 0x71, 0x22, 0x00, 0xbd, 0x8a, 0x1b, 0x61, 0xf3, 0x04, 0x72, 0xb6, 0x7c,
	0xfb, 0xc4, 0x72, 0x16, 0x27, 0x2d, 0xe7, 0xe2, 0xa8, 0x72, 0x7e, 0x01, 0x37, 0x86, 0xd5, 0x6c,
	0xe1, 0x6f, 0x07, 0x98, 0x38, 0x6e, 0xea, 0x1d, 0xc6, 0x70, 0xbf, 0xb4, 0xc1, 0x1a, 0x55, 0x60,
	0xc6, 0x4d, 0x05, 0xad, 0xf0, 0xc2, 0xce, 0x4a, 0x3c, 0x14, 0xd6, 0x56, 0x5c, 0x1b, 0xe9, 0x4b,
	0x40, 0xe1, 0xc3, 0x89, 0x65, 0x1a, 0x04, 0x4f, 0xed, 0xf4, 0x86, 0x7f, 0xb3, 0x5d, 0x59, 0x43,
	0xcd, 0x02, 0x7e, 0x05, 0x66, 0x07, 0xd4, 0xd8, 0x23, 0xa8, 0xb7, 0x92, 0xf6, 0x61, 0x39, 0x5c,
	0x87, 0x6c, 0x87, 0xb9, 0xc4, 0xf6, 0xcc, 0xbd, 0xe3, 0x82, 0xb5, 0xf4, 0xb5, 0xdf, 0x23, 0xfc,
	0x6e, 0x9c, 0x35, 0x7a, 0xda, 0xb1, 0x73, 0x94, 0x26, 0xa9, 0xd1, 0xd3, 0x96, 0xdd, 0x8d, 0xf6,
	0xb5, 0x2c, 0x80, 0x1f, 0xc0, 0xac, 0x37, 0x61, 0xb0, 0xf4, 0x0a, 0x69, 0x3c, 0x6c, 0x79, 0x76,
	0x92, 0x0a, 0xb7, 0xa2, 0x4e, 0x32, 0x04, 0xf1, 0x26, 0x5e, 0x84, 0xb0, 0x3c, 0x73, 0xba, 0xee,
	0x47, 0xd2, 0x95, 0xee, 0x87, 0x25, 0xec, 0x25, 0x07, 0xb7, 0x93, 0xfb, 0x76, 0x96, 0xdc, 0x35,
	0x81, 0xd7, 0x2e, 0x6c, 0xf3, 0xe2, 0x93, 0xe2, 0x7e, 0x63, 0x0e, 0x62, 0x7b, 0xa5, 0x9f, 0x39,
	0xb8, 0x93, 0x86, 0x26, 0x43, 0xe8, 0xd3, 0x86, 0xd3, 0x87, 0x8d, 0x64, 0xdb, 0x6c, 0x57, 0xa1,
	0x0a, 0x48, 0x8b, 0x6d, 0xf4, 0x2e, 0x45, 0x82, 0xa6, 0xd2, 0x81, 0x42, 0xd0, 0x26, 0xd1, 0x02,
	0xcc, 0x1d, 0x36, 0x3f, 0x69, 0xee, 0x7f, 0xd6, 0xe4, 0xdf, 0x72, 0x17, 0x8d, 0xe6, 0x51, 0xa3,
	0x53, 0xaf, 0xf1, 0x1c, 0x02, 0x98, 0x7d, 0xf4, 0xb8, 0xd3, 0x38, 0xaa, 0xf3, 0x39, 0xb4, 0x08,
	0x85, 0xf6, 0x61, 0xfb, 0xa0, 0xde, 0xac, 0xd5, 0x6b, 0x7c, 0x1e, 0x21, 0xb8, 0xee, 0x7e, 0x37,
	0x9a, 0x7b, 0x5f, 0xd5, 0xea, 0x4f, 0xea, 0x9d, 0x3a, 0x3f, 0xb3, 0xf3, 0x7a, 0x0e, 0x04, 0x3a,
	0xd9, 0x1c, 0xd8, 0xe6, 0xa9, 0x46, 0x34, 0xd3, 0xd0, 0x8c, 0x5e, 0x1b, 0xdb, 0xa7, 0x5a, 0x17,
	0xa3, 0xcf, 0x61, 0xe9, 0x31, 0x6d, 0x99, 0xc3, 0xb1, 0x35, 0x79, 0x24, 0x12, 0x93, 0xc5, 0x92,
	0xf0, 0xc3, 0x5f, 0xff, 0xfc, 0x9a, 0x43, 0xd2, 0x22, 0x7d, 0x69, 0x9c, 0x3e, 0x94, 0x15, 0x57,
	0xb5, 0xcb, 0x55, 0xdc, 0xa3, 0x0f, 0x2d, 0xf5, 0xf2, 0x47, 0x8b, 0xf1, 0xa3, 0x31, 0x2c, 0xd5,
	0xb0, 0x8e, 0xc3, 0x47, 0xaf, 0x57, 0xd9, 0x93, 0xa5, 0xea, 0x3f, 0x59, 0xaa, 0x6d, 0xc7, 0xd6,
	0x8c, 0xde, 0x91, 0xa2, 0x0f, 0x70, 0x9a, 0x87, 0xdb, 0xd4, 0xc3, 0x6a, 0x65, 0x39, 0xe2, 0x41,
	0x3e, 0x3b, 0x75, 0x37, 0x9d, 0xa3, 0x63, 0x28, 0xee, 0x61, 0x67, 0x3a, 0x3e, 0x50, 0x8a, 0x8f,
	0x13, 0xe0, 0x5d, 0x1f, 0xba, 0x1e, 0xec, 0x20, 0x68, 0x25, 0xe6, 0xa7, 0xee, 0x3e, 0xbf, 0xc4,
	0xb5, 0x44, 0x0f, 0x6e, 0x63, 0x90, 0x36, 0xa8, 0x97, 0x35, 0xb4, 0x1a, 0xf1, 0xb2, 0xed, 0x36,
	0xf2, 0x6d, 0xf7, 0x9e, 0xa3, 0x13, 0x28, 0xb2, 0x42, 0x33, 0x42, 0xbb, 0xb1, 0xc4, 0xfa, 0x42,
	0xf0, 0x9a, 0x13, 0x47, 0x6a, 0x25, 0x91, 0x3a, 0xbb, 0x25, 0x2d, 0xf9, 0xce, 0x18, 0xe3, 0x89,
	0x5b, 0x1a, 0x0b, 0x56, 0x58, 0xd5, 0x63, 0x2f, 0xc4, 0x29, 0x78, 0x14, 0x93, 0x3c, 0x3e, 0x85,
	0x22, 0x23, 0xc3, 0x30, 0xb2, 0x11, 0x55, 0x1a, 0xed, 0xc7, 0x4b, 0x63, 0x65, 0xf5, 0x82, 0x9f,
	0xa0, 0x5c, 0x36, 0xdc, 0xdc, 0xc3, 0x4e, 0x52, 0x6c, 0x97, 0xf5, 0x89, 0xd2, 0x7c, 0xee, 0xfc,
	0x74, 0x03, 0xd6, 0xd8, 0xae, 0xa4, 0x1b, 0xfc, 0x3d, 0x07, 0x7c, 0xb8, 0xb2, 0x94, 0xa9, 0xb7,
	0x53, 0x7e, 0x24, 0x59, 0xd3, 0x12, 0xef, 0xa4, 0xa9, 0x59, 0x8f, 0x95, 0xaa, 0x14, 0x52, 0x59,
	0x2a, 0xc5, 0x20, 0xf9, 0xbd, 0xed, 0x5c, 0x76, 0xa9, 0x45, 0x76, 0xe9, 0xcc, 0x41, 0x31, 0x84,
	0xab, 0x3e, 0x45, 0x0c, 0x62, 0x56, 0x0c, 0x2f, 0x38, 0xe0, 0xc3, 0x3c, 0xa0, 0x18, 0x36, 0x92,
	0x9d, 0x04, 0xed, 0x7b, 0x2c, 0x8a, 0x87, 0x14, 0xc5, 0x56, 0x65, 0x73, 0x1c, 0x0a, 0xf9, 0x8c,
	0x0d, 0x4d, 0xe7, 0xe8, 0x47, 0x0e, 0x16, 0x03, 0x8e, 0x4c, 0x15, 0x05, 0x9a, 0x00, 0xc5, 0x77,
	0x1c, 0xdc, 0x60, 0x8d, 0x65, 0x78, 0x1e, 0x19, 0xc3, 0x53, 0x29, 0x19, 0x46, 0x78, 0xf2, 0x90,
	0x36, 0x29, 0x94, 0x7b, 0xe8, 0x6e, 0x0a, 0x5b, 0xe5, 0x61, 0xcb, 0x79, 0xc9, 0x01, 0x0a, 0x33,
	0xd3, 0x7b, 0x44, 0xa7, 0xce, 0xf9, 0x7e, 0x36, 0x4a, 0xe9, 0x06, 0x1e, 0x88, 0x1d, 0x0a, 0xe2,
	0xbe, 0x24, 0x8d, 0xc8, 0x87, 0xf7, 0x58, 0xd8, 0xf5, 0xc6, 0x29, 0x8a, 0x26, 0xd2, 0x99, 0xa6,
	0x8d, 0x46, 0x9c, 0x04, 0xcd, 0x2b, 0x0e, 0x50, 0x98, 0xad, 0x1e, 0x9a, 0xbb, 0x69, 0xce, 0x86,
	0x5c, 0x19, 0x8f, 0xe7, 0x03, 0x8a, 0x47, 0xae, 0x6c, 0x8f, 0xc7, 0x23, 0x9f, 0xf9, 0xb3, 0xf9,
	0x39, 0xfa, 0x85, 0x83, 0xa5, 0x61, 0x6f, 0x9b, 0x3e, 0x1e, 0x34, 0x21, 0x9e, 0x17, 0x1c, 0xed,
	0xb5, 0x01, 0x83, 0x6b, 0xde, 0xeb, 0x6f, 0x34, 0x87, 0xdf, 0x49, 0x83, 0x13, 0x61, 0xf1, 0x16,
	0x85, 0xf4, 0x2e, 0xba, 0x97, 0xc6, 0x62, 0x06, 0x83, 0xf1, 0xf8, 0x35, 0x07, 0xeb, 0x61, 0x1e,
	0xc7, 0xfe, 0xe0, 0xd8, 0xcc, 0x30, 0x5c, 0x7a, 0xd9, 0xaa, 0x64, 0x31, 0xf5, 0x40, 0xee, 0x51,
	0x90, 0x8f, 0xa4, 0x51, 0x79, 0x0b, 0xa6, 0xc8, 0x6d, 0x8b, 0xed, 0x26, 0xbb, 0xb1, 0x31, 0x96,
	0x06, 0x10, 0xa6, 0xfe, 0x15, 0x07, 0x20, 0x5e, 0x3a, 0x80, 0xdf, 0x39, 0x58, 0x0b, 0xa8, 0x19,
	0x43, 0xbf, 0x35, 0x1e, 0xd2, 0x90, 0xae, 0x93, 0xe0, 0xff, 0x98, 0xe2, 0xaf, 0xa1, 0x8f, 0x26,
	0xc2, 0x2f, 0x9f, 0xc5, 0x47, 0xfb, 0x73, 0xf4, 0x07, 0x07, 0xeb, 0xe1, 0x0b, 0x7f, 0xe5, 0x51,
	0x54, 0xa6, 0x10, 0xc5, 0xf1, 0x2c, 0xbd, 0x73, 0xef, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0x83,
	0xa4, 0x23, 0xa5, 0x83, 0x18, 0x00, 0x00,
}
