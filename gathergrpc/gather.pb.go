// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gathergrpc/gather.proto

package gathergrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AdminProvisioningService service

type AdminProvisioningServiceClient interface {
	// Create a User with Administrative access.
	CreateAdminUser(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error)
	// Update a User with Administrative access.
	UpdateAdminUser(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error)
	// Delete a User with Administrative access.
	DeleteAdminUser(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*AdminUserResponse, error)
	// Retrieve and Administrative User by id.
	GetAdminUser(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*AdminUserResponse, error)
	// Retrieve all Administrative Users.
	GetAllAdminUsers(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*AdminUserListResponse, error)
	// Creates a Tenant and returns a TenantDescriptor which provides
	// metadata for the newly created Tenant.
	CreateTenant(ctx context.Context, in *TenantDescriptorRequest, opts ...grpc.CallOption) (*TenantDescriptorResponse, error)
	// Updates a TenantDescriptor, which provides metadata
	// for the specified Tenant.
	UpdateTenantDescriptor(ctx context.Context, in *TenantDescriptorRequest, opts ...grpc.CallOption) (*TenantDescriptorResponse, error)
	// Deletes a Tenant and returns a TenantDescriptor which provides
	// metadata for the now deleted Tenant.
	DeleteTenant(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantDescriptorResponse, error)
	// Retrieves the metadata of a single Tenant by id.
	GetTenantDescriptor(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantDescriptorResponse, error)
	// Retrieve all Users scoped to a single Tenant.
	GetAllTenantDescriptors(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*TenantDescriptorListResponse, error)
}

type adminProvisioningServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminProvisioningServiceClient(cc *grpc.ClientConn) AdminProvisioningServiceClient {
	return &adminProvisioningServiceClient{cc}
}

func (c *adminProvisioningServiceClient) CreateAdminUser(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error) {
	out := new(AdminUserResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/CreateAdminUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) UpdateAdminUser(ctx context.Context, in *AdminUserRequest, opts ...grpc.CallOption) (*AdminUserResponse, error) {
	out := new(AdminUserResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/UpdateAdminUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) DeleteAdminUser(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*AdminUserResponse, error) {
	out := new(AdminUserResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/DeleteAdminUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) GetAdminUser(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*AdminUserResponse, error) {
	out := new(AdminUserResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/GetAdminUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) GetAllAdminUsers(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*AdminUserListResponse, error) {
	out := new(AdminUserListResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/GetAllAdminUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) CreateTenant(ctx context.Context, in *TenantDescriptorRequest, opts ...grpc.CallOption) (*TenantDescriptorResponse, error) {
	out := new(TenantDescriptorResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/CreateTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) UpdateTenantDescriptor(ctx context.Context, in *TenantDescriptorRequest, opts ...grpc.CallOption) (*TenantDescriptorResponse, error) {
	out := new(TenantDescriptorResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/UpdateTenantDescriptor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) DeleteTenant(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantDescriptorResponse, error) {
	out := new(TenantDescriptorResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/DeleteTenant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) GetTenantDescriptor(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantDescriptorResponse, error) {
	out := new(TenantDescriptorResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/GetTenantDescriptor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProvisioningServiceClient) GetAllTenantDescriptors(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*TenantDescriptorListResponse, error) {
	out := new(TenantDescriptorListResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.AdminProvisioningService/GetAllTenantDescriptors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminProvisioningService service

type AdminProvisioningServiceServer interface {
	// Create a User with Administrative access.
	CreateAdminUser(context.Context, *AdminUserRequest) (*AdminUserResponse, error)
	// Update a User with Administrative access.
	UpdateAdminUser(context.Context, *AdminUserRequest) (*AdminUserResponse, error)
	// Delete a User with Administrative access.
	DeleteAdminUser(context.Context, *google_protobuf1.StringValue) (*AdminUserResponse, error)
	// Retrieve and Administrative User by id.
	GetAdminUser(context.Context, *google_protobuf1.StringValue) (*AdminUserResponse, error)
	// Retrieve all Administrative Users.
	GetAllAdminUsers(context.Context, *google_protobuf2.Empty) (*AdminUserListResponse, error)
	// Creates a Tenant and returns a TenantDescriptor which provides
	// metadata for the newly created Tenant.
	CreateTenant(context.Context, *TenantDescriptorRequest) (*TenantDescriptorResponse, error)
	// Updates a TenantDescriptor, which provides metadata
	// for the specified Tenant.
	UpdateTenantDescriptor(context.Context, *TenantDescriptorRequest) (*TenantDescriptorResponse, error)
	// Deletes a Tenant and returns a TenantDescriptor which provides
	// metadata for the now deleted Tenant.
	DeleteTenant(context.Context, *google_protobuf1.StringValue) (*TenantDescriptorResponse, error)
	// Retrieves the metadata of a single Tenant by id.
	GetTenantDescriptor(context.Context, *google_protobuf1.StringValue) (*TenantDescriptorResponse, error)
	// Retrieve all Users scoped to a single Tenant.
	GetAllTenantDescriptors(context.Context, *google_protobuf2.Empty) (*TenantDescriptorListResponse, error)
}

func RegisterAdminProvisioningServiceServer(s *grpc.Server, srv AdminProvisioningServiceServer) {
	s.RegisterService(&_AdminProvisioningService_serviceDesc, srv)
}

func _AdminProvisioningService_CreateAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).CreateAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/CreateAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).CreateAdminUser(ctx, req.(*AdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_UpdateAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).UpdateAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/UpdateAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).UpdateAdminUser(ctx, req.(*AdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_DeleteAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).DeleteAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/DeleteAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).DeleteAdminUser(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_GetAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).GetAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/GetAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).GetAdminUser(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_GetAllAdminUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).GetAllAdminUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/GetAllAdminUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).GetAllAdminUsers(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/CreateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).CreateTenant(ctx, req.(*TenantDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_UpdateTenantDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).UpdateTenantDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/UpdateTenantDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).UpdateTenantDescriptor(ctx, req.(*TenantDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/DeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).DeleteTenant(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_GetTenantDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).GetTenantDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/GetTenantDescriptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).GetTenantDescriptor(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProvisioningService_GetAllTenantDescriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProvisioningServiceServer).GetAllTenantDescriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.AdminProvisioningService/GetAllTenantDescriptors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProvisioningServiceServer).GetAllTenantDescriptors(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminProvisioningService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gathergrpc.AdminProvisioningService",
	HandlerType: (*AdminProvisioningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAdminUser",
			Handler:    _AdminProvisioningService_CreateAdminUser_Handler,
		},
		{
			MethodName: "UpdateAdminUser",
			Handler:    _AdminProvisioningService_UpdateAdminUser_Handler,
		},
		{
			MethodName: "DeleteAdminUser",
			Handler:    _AdminProvisioningService_DeleteAdminUser_Handler,
		},
		{
			MethodName: "GetAdminUser",
			Handler:    _AdminProvisioningService_GetAdminUser_Handler,
		},
		{
			MethodName: "GetAllAdminUsers",
			Handler:    _AdminProvisioningService_GetAllAdminUsers_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _AdminProvisioningService_CreateTenant_Handler,
		},
		{
			MethodName: "UpdateTenantDescriptor",
			Handler:    _AdminProvisioningService_UpdateTenantDescriptor_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _AdminProvisioningService_DeleteTenant_Handler,
		},
		{
			MethodName: "GetTenantDescriptor",
			Handler:    _AdminProvisioningService_GetTenantDescriptor_Handler,
		},
		{
			MethodName: "GetAllTenantDescriptors",
			Handler:    _AdminProvisioningService_GetAllTenantDescriptors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gathergrpc/gather.proto",
}

// Client API for TenantProvisioningService service

type TenantProvisioningServiceClient interface {
	// Create a User scoped to a Single Tenant.
	CreateTenantUser(ctx context.Context, in *TenantUserRequest, opts ...grpc.CallOption) (*TenantUserResponse, error)
	// Update a User scoped to a single Tenant.
	UpdateTenantUser(ctx context.Context, in *TenantUserRequest, opts ...grpc.CallOption) (*TenantUserResponse, error)
	// Delete a User scoped to a single Tenant.
	DeleteTenantUser(ctx context.Context, in *TenantUserIdRequest, opts ...grpc.CallOption) (*TenantUserResponse, error)
	// Retrieve a User scoped to a single Tenant.
	GetTenantUser(ctx context.Context, in *TenantUserIdRequest, opts ...grpc.CallOption) (*TenantUserResponse, error)
	// Retrieve all Users scoped to a single Tenant.
	GetAllTenantUsers(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantUserListResponse, error)
	// Create a Domain scoped to a Single Tenant.
	CreateTenantDomain(ctx context.Context, in *TenantDomainRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error)
	// Update a Domain scoped to a single Tenant.
	UpdateTenantDomain(ctx context.Context, in *TenantDomainRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error)
	// Delete a Domain scoped to a single Tenant.
	DeleteTenantDomain(ctx context.Context, in *TenantDomainIdRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error)
	// Retrieve a Domain scoped to a single Tenant.
	GetTenantDomain(ctx context.Context, in *TenantDomainIdRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error)
	// Retrieve all Domains scoped to a single Tenant.
	GetAllTenantDomains(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantDomainListResponse, error)
	// Create a Ingestion Profile scoped to a Single Tenant.
	CreateTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error)
	// Updates an Ingestion Profile, which provides details on the data
	// collected for the Tenant.
	UpdateTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error)
	// Retrieves an Ingestion Profile, which provides details on the data
	// collected for the Tenant.
	GetTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileIdRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error)
	// Delete an Ingestion Profile scoped to a single Tenant.
	DeleteTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileIdRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error)
	// Create a MonitoredObject scoped to a Single Tenant.
	CreateMonitoredObject(ctx context.Context, in *MonitoredObjectRequest, opts ...grpc.CallOption) (*MonitoredObjectResponse, error)
	// Update a MonitoredObject scoped to a single Tenant.
	UpdateMonitoredObject(ctx context.Context, in *MonitoredObjectRequest, opts ...grpc.CallOption) (*MonitoredObjectResponse, error)
	// Delete a MonitoredObject scoped to a single Tenant.
	DeleteMonitoredObject(ctx context.Context, in *MonitoredObjectIdRequest, opts ...grpc.CallOption) (*MonitoredObjectResponse, error)
	// Retrieve a MonitoredObject scoped to a single Tenant.
	GetMonitoredObject(ctx context.Context, in *MonitoredObjectIdRequest, opts ...grpc.CallOption) (*MonitoredObjectResponse, error)
	// Retrieve all MonitoredObject scoped to a single Tenant.
	GetAllMonitoredObjects(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*MonitoredObjectListResponse, error)
}

type tenantProvisioningServiceClient struct {
	cc *grpc.ClientConn
}

func NewTenantProvisioningServiceClient(cc *grpc.ClientConn) TenantProvisioningServiceClient {
	return &tenantProvisioningServiceClient{cc}
}

func (c *tenantProvisioningServiceClient) CreateTenantUser(ctx context.Context, in *TenantUserRequest, opts ...grpc.CallOption) (*TenantUserResponse, error) {
	out := new(TenantUserResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/CreateTenantUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) UpdateTenantUser(ctx context.Context, in *TenantUserRequest, opts ...grpc.CallOption) (*TenantUserResponse, error) {
	out := new(TenantUserResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/UpdateTenantUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) DeleteTenantUser(ctx context.Context, in *TenantUserIdRequest, opts ...grpc.CallOption) (*TenantUserResponse, error) {
	out := new(TenantUserResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/DeleteTenantUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) GetTenantUser(ctx context.Context, in *TenantUserIdRequest, opts ...grpc.CallOption) (*TenantUserResponse, error) {
	out := new(TenantUserResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/GetTenantUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) GetAllTenantUsers(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantUserListResponse, error) {
	out := new(TenantUserListResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/GetAllTenantUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) CreateTenantDomain(ctx context.Context, in *TenantDomainRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error) {
	out := new(TenantDomainResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/CreateTenantDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) UpdateTenantDomain(ctx context.Context, in *TenantDomainRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error) {
	out := new(TenantDomainResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/UpdateTenantDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) DeleteTenantDomain(ctx context.Context, in *TenantDomainIdRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error) {
	out := new(TenantDomainResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/DeleteTenantDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) GetTenantDomain(ctx context.Context, in *TenantDomainIdRequest, opts ...grpc.CallOption) (*TenantDomainResponse, error) {
	out := new(TenantDomainResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/GetTenantDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) GetAllTenantDomains(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*TenantDomainListResponse, error) {
	out := new(TenantDomainListResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/GetAllTenantDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) CreateTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error) {
	out := new(TenantIngestionProfileResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/CreateTenantIngestionProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) UpdateTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error) {
	out := new(TenantIngestionProfileResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/UpdateTenantIngestionProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) GetTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileIdRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error) {
	out := new(TenantIngestionProfileResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/GetTenantIngestionProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) DeleteTenantIngestionProfile(ctx context.Context, in *TenantIngestionProfileIdRequest, opts ...grpc.CallOption) (*TenantIngestionProfileResponse, error) {
	out := new(TenantIngestionProfileResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/DeleteTenantIngestionProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) CreateMonitoredObject(ctx context.Context, in *MonitoredObjectRequest, opts ...grpc.CallOption) (*MonitoredObjectResponse, error) {
	out := new(MonitoredObjectResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/CreateMonitoredObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) UpdateMonitoredObject(ctx context.Context, in *MonitoredObjectRequest, opts ...grpc.CallOption) (*MonitoredObjectResponse, error) {
	out := new(MonitoredObjectResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/UpdateMonitoredObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) DeleteMonitoredObject(ctx context.Context, in *MonitoredObjectIdRequest, opts ...grpc.CallOption) (*MonitoredObjectResponse, error) {
	out := new(MonitoredObjectResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/DeleteMonitoredObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) GetMonitoredObject(ctx context.Context, in *MonitoredObjectIdRequest, opts ...grpc.CallOption) (*MonitoredObjectResponse, error) {
	out := new(MonitoredObjectResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/GetMonitoredObject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantProvisioningServiceClient) GetAllMonitoredObjects(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*MonitoredObjectListResponse, error) {
	out := new(MonitoredObjectListResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.TenantProvisioningService/GetAllMonitoredObjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TenantProvisioningService service

type TenantProvisioningServiceServer interface {
	// Create a User scoped to a Single Tenant.
	CreateTenantUser(context.Context, *TenantUserRequest) (*TenantUserResponse, error)
	// Update a User scoped to a single Tenant.
	UpdateTenantUser(context.Context, *TenantUserRequest) (*TenantUserResponse, error)
	// Delete a User scoped to a single Tenant.
	DeleteTenantUser(context.Context, *TenantUserIdRequest) (*TenantUserResponse, error)
	// Retrieve a User scoped to a single Tenant.
	GetTenantUser(context.Context, *TenantUserIdRequest) (*TenantUserResponse, error)
	// Retrieve all Users scoped to a single Tenant.
	GetAllTenantUsers(context.Context, *google_protobuf1.StringValue) (*TenantUserListResponse, error)
	// Create a Domain scoped to a Single Tenant.
	CreateTenantDomain(context.Context, *TenantDomainRequest) (*TenantDomainResponse, error)
	// Update a Domain scoped to a single Tenant.
	UpdateTenantDomain(context.Context, *TenantDomainRequest) (*TenantDomainResponse, error)
	// Delete a Domain scoped to a single Tenant.
	DeleteTenantDomain(context.Context, *TenantDomainIdRequest) (*TenantDomainResponse, error)
	// Retrieve a Domain scoped to a single Tenant.
	GetTenantDomain(context.Context, *TenantDomainIdRequest) (*TenantDomainResponse, error)
	// Retrieve all Domains scoped to a single Tenant.
	GetAllTenantDomains(context.Context, *google_protobuf1.StringValue) (*TenantDomainListResponse, error)
	// Create a Ingestion Profile scoped to a Single Tenant.
	CreateTenantIngestionProfile(context.Context, *TenantIngestionProfileRequest) (*TenantIngestionProfileResponse, error)
	// Updates an Ingestion Profile, which provides details on the data
	// collected for the Tenant.
	UpdateTenantIngestionProfile(context.Context, *TenantIngestionProfileRequest) (*TenantIngestionProfileResponse, error)
	// Retrieves an Ingestion Profile, which provides details on the data
	// collected for the Tenant.
	GetTenantIngestionProfile(context.Context, *TenantIngestionProfileIdRequest) (*TenantIngestionProfileResponse, error)
	// Delete an Ingestion Profile scoped to a single Tenant.
	DeleteTenantIngestionProfile(context.Context, *TenantIngestionProfileIdRequest) (*TenantIngestionProfileResponse, error)
	// Create a MonitoredObject scoped to a Single Tenant.
	CreateMonitoredObject(context.Context, *MonitoredObjectRequest) (*MonitoredObjectResponse, error)
	// Update a MonitoredObject scoped to a single Tenant.
	UpdateMonitoredObject(context.Context, *MonitoredObjectRequest) (*MonitoredObjectResponse, error)
	// Delete a MonitoredObject scoped to a single Tenant.
	DeleteMonitoredObject(context.Context, *MonitoredObjectIdRequest) (*MonitoredObjectResponse, error)
	// Retrieve a MonitoredObject scoped to a single Tenant.
	GetMonitoredObject(context.Context, *MonitoredObjectIdRequest) (*MonitoredObjectResponse, error)
	// Retrieve all MonitoredObject scoped to a single Tenant.
	GetAllMonitoredObjects(context.Context, *google_protobuf1.StringValue) (*MonitoredObjectListResponse, error)
}

func RegisterTenantProvisioningServiceServer(s *grpc.Server, srv TenantProvisioningServiceServer) {
	s.RegisterService(&_TenantProvisioningService_serviceDesc, srv)
}

func _TenantProvisioningService_CreateTenantUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).CreateTenantUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/CreateTenantUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).CreateTenantUser(ctx, req.(*TenantUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_UpdateTenantUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).UpdateTenantUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/UpdateTenantUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).UpdateTenantUser(ctx, req.(*TenantUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_DeleteTenantUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).DeleteTenantUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/DeleteTenantUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).DeleteTenantUser(ctx, req.(*TenantUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_GetTenantUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).GetTenantUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/GetTenantUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).GetTenantUser(ctx, req.(*TenantUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_GetAllTenantUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).GetAllTenantUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/GetAllTenantUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).GetAllTenantUsers(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_CreateTenantDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).CreateTenantDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/CreateTenantDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).CreateTenantDomain(ctx, req.(*TenantDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_UpdateTenantDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).UpdateTenantDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/UpdateTenantDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).UpdateTenantDomain(ctx, req.(*TenantDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_DeleteTenantDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDomainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).DeleteTenantDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/DeleteTenantDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).DeleteTenantDomain(ctx, req.(*TenantDomainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_GetTenantDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDomainIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).GetTenantDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/GetTenantDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).GetTenantDomain(ctx, req.(*TenantDomainIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_GetAllTenantDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).GetAllTenantDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/GetAllTenantDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).GetAllTenantDomains(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_CreateTenantIngestionProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantIngestionProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).CreateTenantIngestionProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/CreateTenantIngestionProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).CreateTenantIngestionProfile(ctx, req.(*TenantIngestionProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_UpdateTenantIngestionProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantIngestionProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).UpdateTenantIngestionProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/UpdateTenantIngestionProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).UpdateTenantIngestionProfile(ctx, req.(*TenantIngestionProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_GetTenantIngestionProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantIngestionProfileIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).GetTenantIngestionProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/GetTenantIngestionProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).GetTenantIngestionProfile(ctx, req.(*TenantIngestionProfileIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_DeleteTenantIngestionProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantIngestionProfileIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).DeleteTenantIngestionProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/DeleteTenantIngestionProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).DeleteTenantIngestionProfile(ctx, req.(*TenantIngestionProfileIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_CreateMonitoredObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoredObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).CreateMonitoredObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/CreateMonitoredObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).CreateMonitoredObject(ctx, req.(*MonitoredObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_UpdateMonitoredObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoredObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).UpdateMonitoredObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/UpdateMonitoredObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).UpdateMonitoredObject(ctx, req.(*MonitoredObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_DeleteMonitoredObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoredObjectIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).DeleteMonitoredObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/DeleteMonitoredObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).DeleteMonitoredObject(ctx, req.(*MonitoredObjectIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_GetMonitoredObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitoredObjectIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).GetMonitoredObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/GetMonitoredObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).GetMonitoredObject(ctx, req.(*MonitoredObjectIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantProvisioningService_GetAllMonitoredObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantProvisioningServiceServer).GetAllMonitoredObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.TenantProvisioningService/GetAllMonitoredObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantProvisioningServiceServer).GetAllMonitoredObjects(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _TenantProvisioningService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gathergrpc.TenantProvisioningService",
	HandlerType: (*TenantProvisioningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTenantUser",
			Handler:    _TenantProvisioningService_CreateTenantUser_Handler,
		},
		{
			MethodName: "UpdateTenantUser",
			Handler:    _TenantProvisioningService_UpdateTenantUser_Handler,
		},
		{
			MethodName: "DeleteTenantUser",
			Handler:    _TenantProvisioningService_DeleteTenantUser_Handler,
		},
		{
			MethodName: "GetTenantUser",
			Handler:    _TenantProvisioningService_GetTenantUser_Handler,
		},
		{
			MethodName: "GetAllTenantUsers",
			Handler:    _TenantProvisioningService_GetAllTenantUsers_Handler,
		},
		{
			MethodName: "CreateTenantDomain",
			Handler:    _TenantProvisioningService_CreateTenantDomain_Handler,
		},
		{
			MethodName: "UpdateTenantDomain",
			Handler:    _TenantProvisioningService_UpdateTenantDomain_Handler,
		},
		{
			MethodName: "DeleteTenantDomain",
			Handler:    _TenantProvisioningService_DeleteTenantDomain_Handler,
		},
		{
			MethodName: "GetTenantDomain",
			Handler:    _TenantProvisioningService_GetTenantDomain_Handler,
		},
		{
			MethodName: "GetAllTenantDomains",
			Handler:    _TenantProvisioningService_GetAllTenantDomains_Handler,
		},
		{
			MethodName: "CreateTenantIngestionProfile",
			Handler:    _TenantProvisioningService_CreateTenantIngestionProfile_Handler,
		},
		{
			MethodName: "UpdateTenantIngestionProfile",
			Handler:    _TenantProvisioningService_UpdateTenantIngestionProfile_Handler,
		},
		{
			MethodName: "GetTenantIngestionProfile",
			Handler:    _TenantProvisioningService_GetTenantIngestionProfile_Handler,
		},
		{
			MethodName: "DeleteTenantIngestionProfile",
			Handler:    _TenantProvisioningService_DeleteTenantIngestionProfile_Handler,
		},
		{
			MethodName: "CreateMonitoredObject",
			Handler:    _TenantProvisioningService_CreateMonitoredObject_Handler,
		},
		{
			MethodName: "UpdateMonitoredObject",
			Handler:    _TenantProvisioningService_UpdateMonitoredObject_Handler,
		},
		{
			MethodName: "DeleteMonitoredObject",
			Handler:    _TenantProvisioningService_DeleteMonitoredObject_Handler,
		},
		{
			MethodName: "GetMonitoredObject",
			Handler:    _TenantProvisioningService_GetMonitoredObject_Handler,
		},
		{
			MethodName: "GetAllMonitoredObjects",
			Handler:    _TenantProvisioningService_GetAllMonitoredObjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gathergrpc/gather.proto",
}

// Client API for MetricsService service

type MetricsServiceClient interface {
	// Retrieve and Administrative User by id.
	GetThresholdCrossing(ctx context.Context, in *ThresholdCrossingRequest, opts ...grpc.CallOption) (*ThresholdCrossingResponse, error)
}

type metricsServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetricsServiceClient(cc *grpc.ClientConn) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) GetThresholdCrossing(ctx context.Context, in *ThresholdCrossingRequest, opts ...grpc.CallOption) (*ThresholdCrossingResponse, error) {
	out := new(ThresholdCrossingResponse)
	err := grpc.Invoke(ctx, "/gathergrpc.MetricsService/GetThresholdCrossing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetricsService service

type MetricsServiceServer interface {
	// Retrieve and Administrative User by id.
	GetThresholdCrossing(context.Context, *ThresholdCrossingRequest) (*ThresholdCrossingResponse, error)
}

func RegisterMetricsServiceServer(s *grpc.Server, srv MetricsServiceServer) {
	s.RegisterService(&_MetricsService_serviceDesc, srv)
}

func _MetricsService_GetThresholdCrossing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThresholdCrossingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetThresholdCrossing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gathergrpc.MetricsService/GetThresholdCrossing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetThresholdCrossing(ctx, req.(*ThresholdCrossingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gathergrpc.MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetThresholdCrossing",
			Handler:    _MetricsService_GetThresholdCrossing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gathergrpc/gather.proto",
}

func init() { proto.RegisterFile("gathergrpc/gather.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 990 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x98, 0xdd, 0x6a, 0x24, 0x45,
	0x14, 0xc7, 0x29, 0x2f, 0x04, 0x8b, 0xac, 0x89, 0xb5, 0x9b, 0xcc, 0xa6, 0x77, 0xb2, 0x6b, 0x3a,
	0x1b, 0xd6, 0x74, 0x9c, 0x69, 0x13, 0x51, 0x41, 0x14, 0x74, 0x37, 0x12, 0x23, 0x06, 0x17, 0xd7,
	0xf5, 0xbe, 0x33, 0x5d, 0x3b, 0xa9, 0xa5, 0xa7, 0xab, 0xad, 0xaa, 0x89, 0x1f, 0xc3, 0xa0, 0x28,
	0xac, 0x17, 0x22, 0x08, 0x82, 0x17, 0x22, 0xde, 0x0b, 0xe2, 0x95, 0x0f, 0x20, 0xf8, 0x08, 0xbe,
	0x82, 0x0f, 0x22, 0x7d, 0xaa, 0xbf, 0x7b, 0xba, 0x7b, 0x26, 0x76, 0x72, 0x97, 0x99, 0x73, 0xea,
	0xfc, 0x7f, 0x75, 0xea, 0x5f, 0xa7, 0x86, 0xe0, 0xce, 0xd0, 0x51, 0xa7, 0x54, 0x0c, 0x45, 0x30,
	0xb0, 0xf5, 0x9f, 0xfd, 0x40, 0x70, 0xc5, 0x09, 0x4e, 0x03, 0x46, 0x77, 0xc8, 0xf9, 0xd0, 0xa3,
	0xb6, 0x13, 0x30, 0xdb, 0xf1, 0x7d, 0xae, 0x1c, 0xc5, 0xb8, 0x2f, 0x75, 0xa6, 0x71, 0x33, 0x8a,
	0xc2, 0xa7, 0x93, 0xf1, 0x23, 0xfb, 0x53, 0xe1, 0x04, 0x01, 0x15, 0x71, 0xfc, 0x46, 0x31, 0x4e,
	0x47, 0x81, 0xfa, 0x3c, 0x0a, 0x76, 0x33, 0xfa, 0x8e, 0x3b, 0x62, 0xfe, 0x31, 0x77, 0xa9, 0x17,
	0x2f, 0xdd, 0xc8, 0x44, 0x15, 0xf5, 0x1d, 0x5f, 0x55, 0x86, 0x47, 0x54, 0x09, 0x36, 0xc8, 0x86,
	0xf7, 0x7f, 0x79, 0x06, 0x5f, 0x7f, 0x3b, 0xac, 0x79, 0x5f, 0xf0, 0x33, 0x26, 0x19, 0xf7, 0x99,
	0x3f, 0x7c, 0x40, 0xc5, 0x19, 0x1b, 0x50, 0x72, 0x8a, 0x97, 0xef, 0x09, 0xea, 0x28, 0x0a, 0x19,
	0x0f, 0x25, 0x15, 0xa4, 0xdb, 0x4f, 0xeb, 0xf5, 0x93, 0xaf, 0x3f, 0xa4, 0x9f, 0x8c, 0xa9, 0x54,
	0xc6, 0x46, 0x45, 0x54, 0x06, 0xdc, 0x97, 0xd4, 0xbc, 0xfe, 0xf5, 0x3f, 0xff, 0xfe, 0xf8, 0x14,
	0x31, 0xaf, 0x40, 0x97, 0xce, 0xf6, 0xf4, 0x6e, 0x5e, 0x47, 0x56, 0xa8, 0xf4, 0x30, 0x70, 0x5b,
	0x57, 0x32, 0xca, 0x4a, 0x23, 0xbc, 0x7c, 0x40, 0x3d, 0x5a, 0x50, 0x82, 0xee, 0xf7, 0xe3, 0xee,
	0xf7, 0x1f, 0x28, 0xc1, 0xfc, 0xe1, 0xc7, 0x8e, 0x37, 0xa6, 0x4d, 0x4a, 0x1b, 0xa0, 0xd4, 0xb1,
	0x56, 0x73, 0x4a, 0xf6, 0xe4, 0x2c, 0x5c, 0x3c, 0x25, 0x8f, 0xf1, 0xd2, 0x21, 0x55, 0xed, 0x6a,
	0x91, 0x0a, 0x2d, 0x1f, 0xaf, 0x84, 0x5a, 0x9e, 0x97, 0xac, 0x94, 0x64, 0xad, 0xa4, 0xf7, 0x4e,
	0xe8, 0x2c, 0x63, 0x73, 0xa6, 0xd2, 0xfb, 0x4c, 0xaa, 0x44, 0xed, 0x16, 0xa8, 0xad, 0x93, 0x4e,
	0x4e, 0xad, 0x37, 0x96, 0x54, 0xf4, 0x3c, 0x26, 0x15, 0x19, 0xe3, 0x25, 0x6d, 0x8f, 0x8f, 0xc0,
	0x76, 0x64, 0x2b, 0x5b, 0x53, 0x7f, 0x77, 0x40, 0xe5, 0x40, 0xb0, 0x40, 0xf1, 0xe4, 0xe0, 0x6e,
	0xd7, 0x27, 0x45, 0xda, 0x06, 0x68, 0x5f, 0x33, 0x97, 0x63, 0x6d, 0xed, 0x6c, 0x19, 0x9e, 0xe0,
	0x97, 0x78, 0x4d, 0x7b, 0xa5, 0xb8, 0xfa, 0x02, 0x00, 0x8c, 0x59, 0x00, 0x12, 0x2f, 0x69, 0x0b,
	0x45, 0xfb, 0xae, 0x3f, 0xd3, 0xf9, 0xf4, 0xa2, 0x66, 0x5b, 0x9d, 0x82, 0x5e, 0x72, 0xb8, 0x5f,
	0xe0, 0xab, 0x87, 0x54, 0x95, 0xb6, 0xdc, 0xa2, 0x36, 0xa9, 0xd4, 0xfe, 0x0c, 0x77, 0xb4, 0xb1,
	0x8a, 0x25, 0xaa, 0xfd, 0xf5, 0x42, 0x9d, 0x72, 0xce, 0x66, 0x37, 0x40, 0x7d, 0x95, 0x5c, 0xcd,
	0xab, 0x83, 0xc5, 0xf6, 0xff, 0xe8, 0xe0, 0x75, 0xbd, 0x7a, 0xd6, 0x7c, 0xfa, 0x06, 0xe1, 0x95,
	0xac, 0x03, 0xe1, 0x86, 0x6d, 0x94, 0x95, 0xb3, 0x83, 0xe3, 0x66, 0x55, 0x38, 0xc2, 0x79, 0x09,
	0x70, 0x2c, 0x73, 0xbb, 0xd4, 0x0c, 0xd7, 0x51, 0x4e, 0x5f, 0x7f, 0x3a, 0x72, 0xa7, 0x76, 0x78,
	0x0f, 0xc0, 0x0e, 0x21, 0x45, 0xd6, 0x90, 0x2d, 0x52, 0x18, 0xf3, 0x53, 0x3c, 0x41, 0x78, 0x25,
	0xeb, 0x4a, 0xa0, 0xb8, 0x35, 0x5b, 0xe6, 0xc8, 0x9d, 0x97, 0x63, 0x0f, 0x38, 0x76, 0xad, 0x9d,
	0x12, 0x47, 0x01, 0xc1, 0x9e, 0x8c, 0xa1, 0xf0, 0x34, 0x6c, 0xc7, 0x95, 0xc4, 0xa9, 0xad, 0x52,
	0x90, 0x05, 0x28, 0xbe, 0x42, 0xf8, 0xb9, 0xac, 0x67, 0xf5, 0x34, 0xac, 0xbf, 0x2d, 0xe6, 0x6c,
	0x8c, 0x9c, 0x5b, 0x77, 0x00, 0x65, 0x8b, 0x6c, 0x56, 0xdc, 0x15, 0x3b, 0x1d, 0x8f, 0xdf, 0x21,
	0x4c, 0xb2, 0xee, 0x3c, 0xe0, 0x23, 0x87, 0xf9, 0xb3, 0xba, 0xa1, 0x23, 0x71, 0x37, 0x9e, 0xaf,
	0x4e, 0x88, 0x20, 0xf6, 0x01, 0xe2, 0x45, 0xf3, 0x4e, 0x93, 0x3b, 0x5c, 0x58, 0x07, 0xfe, 0x08,
	0x69, 0x72, 0x63, 0xb3, 0x6d, 0x1a, 0x63, 0x11, 0x9a, 0x1f, 0x10, 0x26, 0x59, 0xb7, 0x46, 0x34,
	0x9b, 0x55, 0x62, 0xa9, 0x57, 0x9a, 0x79, 0x5e, 0x01, 0x1e, 0xdb, 0xea, 0xd5, 0xb8, 0x25, 0x42,
	0xb1, 0x27, 0x6e, 0x54, 0x7e, 0x4a, 0xbe, 0x47, 0x78, 0x39, 0x9d, 0xb0, 0xed, 0xf3, 0x90, 0x05,
	0x79, 0x9e, 0x20, 0x98, 0xf8, 0xe9, 0xd4, 0xd5, 0x29, 0xe7, 0x98, 0xf8, 0xb0, 0x30, 0xe7, 0xe2,
	0x5d, 0x40, 0xda, 0x26, 0x5b, 0x55, 0x2e, 0xd6, 0x18, 0xda, 0xc7, 0x7f, 0x22, 0xdc, 0xcd, 0xfa,
	0xf8, 0xc8, 0x1f, 0x52, 0x19, 0xfe, 0xb8, 0xbd, 0x2f, 0xf8, 0x23, 0xe6, 0x51, 0xb2, 0x53, 0xd6,
	0x2c, 0xe6, 0xc4, 0xdd, 0xb2, 0xe6, 0x49, 0x8d, 0x20, 0xdf, 0x04, 0xc8, 0xd7, 0xcc, 0xfd, 0x26,
	0x5f, 0xb1, 0xb8, 0x42, 0x2f, 0xd0, 0x25, 0xc0, 0x62, 0x21, 0x76, 0xd6, 0xf0, 0x97, 0x8c, 0x6d,
	0x9c, 0x13, 0xfb, 0x2f, 0x84, 0xd7, 0x13, 0x1b, 0x96, 0x98, 0x77, 0x9b, 0x41, 0x52, 0x6b, 0x2e,
	0x42, 0xfd, 0x1e, 0x50, 0x1f, 0x90, 0xbb, 0x35, 0x26, 0x2d, 0x03, 0xdb, 0x13, 0x56, 0x52, 0x9f,
	0x92, 0xbf, 0x11, 0xee, 0x66, 0x2f, 0xf7, 0xa5, 0xef, 0xc2, 0x6a, 0x63, 0x17, 0xbf, 0x22, 0xbc,
	0xaa, 0x6d, 0x7f, 0xcc, 0x7d, 0xa6, 0xb8, 0xa0, 0xee, 0x07, 0x27, 0x8f, 0xe9, 0x40, 0x91, 0xdc,
	0x3b, 0x51, 0x08, 0xc6, 0xd4, 0x5b, 0xb5, 0x39, 0x11, 0xee, 0x1b, 0x80, 0xfb, 0xaa, 0xb9, 0xd7,
	0x64, 0x95, 0x51, 0x5c, 0xa0, 0xc7, 0xa1, 0x02, 0x38, 0x25, 0x04, 0xd4, 0x06, 0xbf, 0x68, 0x40,
	0xe3, 0x7c, 0x80, 0xbf, 0x23, 0xbc, 0xaa, 0x7d, 0x50, 0x04, 0xbc, 0x5d, 0x23, 0x9e, 0x9e, 0xfc,
	0x5c, 0x88, 0xef, 0x02, 0xe2, 0x5d, 0xeb, 0xad, 0x9a, 0x23, 0x2f, 0xd1, 0xd9, 0x93, 0x51, 0x51,
	0x74, 0x4a, 0x7e, 0x43, 0x98, 0x1c, 0x52, 0x75, 0xf1, 0xac, 0xe4, 0xff, 0xb3, 0xfe, 0x84, 0xf0,
	0x9a, 0x7e, 0x1c, 0x0a, 0x5a, 0x4d, 0xef, 0xc3, 0x9d, 0x1a, 0xce, 0xdc, 0x13, 0x51, 0xfd, 0x6a,
	0x45, 0x4f, 0x44, 0x11, 0x54, 0xff, 0x60, 0xff, 0x19, 0xe1, 0x67, 0x8f, 0xe1, 0xdf, 0x0c, 0x32,
	0xfe, 0x95, 0xfe, 0x2d, 0xc2, 0xd7, 0xc2, 0x89, 0x76, 0x2a, 0xa8, 0x3c, 0xe5, 0x9e, 0x7b, 0x4f,
	0x70, 0x29, 0x99, 0x3f, 0xcc, 0x77, 0xb6, 0x14, 0x8e, 0x3b, 0xbb, 0xdd, 0x90, 0x15, 0xf1, 0x9a,
	0xc0, 0xdb, 0x25, 0x46, 0xc2, 0x1b, 0xa7, 0xf6, 0x06, 0x51, 0xee, 0xc9, 0xd3, 0xd0, 0x92, 0x97,
	0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x8a, 0xc3, 0xe1, 0xd1, 0x11, 0x00, 0x00,
}
