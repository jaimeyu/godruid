syntax = "proto3";

package gathergrpc;

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";


// Service responsible for provisioning Administration
// Users and their functionality, including creation of new 
// Tenants
service AdminProvisioningService {
    
    // Create a User with Administrative access. 
    rpc CreateAdminUser(AdminUserRequest) returns (AdminUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/admin"
            body: "*"
        };
    }
    
    // Update a User with Administrative access. 
    rpc UpdateAdminUser(AdminUserRequest) returns (AdminUserResponse) {
        option (google.api.http) = {
            put: "/api/v1/admin"
            body: "*"
        };
    } 
    
    // Delete a User with Administrative access. 
    rpc DeleteAdminUser(google.protobuf.StringValue) returns (AdminUserResponse) {
        option (google.api.http) = {
            delete: "/api/v1/admin/{value}"
        };
    }
    
    // Retrieve and Administrative User by id. 
    rpc GetAdminUser(google.protobuf.StringValue) returns (AdminUserResponse) {
        option (google.api.http) = {
            get: "/api/v1/admin/{value}"
        };
    }
    
    // Retrieve all Administrative Users. 
    rpc GetAllAdminUsers(google.protobuf.Empty) returns (AdminUserListResponse) {
        option (google.api.http) = {
            get: "/api/v1/admin-user-list"
        };
    }
    
    // Creates a Tenant and returns a TenantDescriptor which provides 
    // metadata for the newly created Tenant.   
    rpc CreateTenant(TenantDescriptorRequest) returns (TenantDescriptorResponse) {
        option (google.api.http) = {
            post: "/api/v1/tenants"
            body: "*"
        };
    }
    
    // Updates a TenantDescriptor, which provides metadata 
    // for the specified Tenant. 
    rpc UpdateTenantDescriptor(TenantDescriptorRequest) returns (TenantDescriptorResponse) {
        option (google.api.http) = {
            put: "/api/v1/tenants"
            body: "*"
        };
    } 
    
    // Deletes a Tenant and returns a TenantDescriptor which provides
    // metadata for the now deleted Tenant. 
    rpc DeleteTenant(google.protobuf.StringValue) returns (TenantDescriptorResponse) {
        option (google.api.http) = {
            delete: "/api/v1/tenants/{value}"
        };
    }

    // Retrieves the metadata of a single Tenant by id.
    rpc GetTenantDescriptor(google.protobuf.StringValue) returns (TenantDescriptorResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{value}"
        };
    }

    // Retrieve all Users scoped to a single Tenant. 
    rpc GetAllTenantDescriptors(google.protobuf.Empty) returns (TenantDescriptorListResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenant-list"
        };
    }
}

// Enumeration of User state. 
enum UserState {
    UNKNOWN = 0;
    INVITED = 1;
    ACTIVE = 2;
    SUSPENDED = 3;
    PENDING_DELETE = 4;
}

// Provides the metadata of a Tenant. This information is used to 
// idetify/describe a full Tenant entity.
message TenantDescriptor {
    string datatype = 3;

    string name = 4;
    string urlSubdomain = 5;
    UserState state = 6;

    int64 createdTimestamp = 7;
    int64 lastModifiedTimestamp = 8; 
}

// TenantDescriptorRequest - wrapper for passing TenantDescriptor
// data as a request to the service.
message TenantDescriptorRequest {
    string _id = 1;
    string _rev = 2;
    TenantDescriptor data = 3;
}

// TenantDescriptorResponse - wrapper for passing TenantDescriptor
// data as a response from the service.
message TenantDescriptorResponse {
    string _id = 1;
    string _rev = 2;
    TenantDescriptor data = 3;
}

// Wrapper message to provide a response in the form of
// a container of multiple TenantDescriptor objects.
message TenantDescriptorListResponse {
    repeated TenantDescriptorResponse data = 1;
}

// User data for an Adminstrative User.
message AdminUser {
    string datatype = 3;

    string username = 4;
    string password = 5;
    bool sendOnboardingEmail = 6;
    string onboardingToken = 7;
    bool userVerified = 8;
    UserState state = 9;

    int64 createdTimestamp = 10;
    int64 lastModifiedTimestamp = 11;
}

// AdminUserRequest - wrapper for passing AdminUser
// data as a request to the service.
message AdminUserRequest {
    string _id = 1;
    string _rev = 2;
    AdminUser data = 3;
}

// AdminUserResponse - wrapper for passing AdminUser
// data as a response from the service.
message AdminUserResponse {
    string _id = 1;
    string _rev = 2;
    AdminUser data = 3;
}

// Wrapper message to provide a response in the form of
// a container of multiple AdminUser objects.
message AdminUserListResponse {
    repeated AdminUserResponse data = 1;
}

// Service responsible for provisioning Tenant scope data including
// Tenant Users, Tenant Domains, Tenant Injection Profiles.
service TenantProvisioningService {
    
    // Create a User scoped to a Single Tenant. 
    rpc CreateTenantUser(TenantUserRequest) returns (TenantUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/tenants/{data.tenantId}/users"
            body: "*"
        };
    }
    
    // Update a User scoped to a single Tenant. 
    rpc UpdateTenantUser(TenantUserRequest) returns (TenantUserResponse) {
        option (google.api.http) = {
            put: "/api/v1/tenants/{data.tenantId}/users"
            body: "*"
        };
    } 
    
    // Delete a User scoped to a single Tenant. 
    rpc DeleteTenantUser(TenantUserIdRequest) returns (TenantUserResponse) {
        option (google.api.http) = {
            delete: "/api/v1/tenants/{tenantId}/users/{userId}"
        };
    }
    
    // Retrieve a User scoped to a single Tenant. 
    rpc GetTenantUser(TenantUserIdRequest) returns (TenantUserResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{tenantId}/users/{userId}"
        };
    }
    
    // Retrieve all Users scoped to a single Tenant. 
    rpc GetAllTenantUsers(google.protobuf.StringValue) returns (TenantUserListResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{value}/user-list"
        };
    }

    // Create a Domain scoped to a Single Tenant. 
    rpc CreateTenantDomain(TenantDomainRequest) returns (TenantDomainResponse) {
        option (google.api.http) = {
            post: "/api/v1/tenants/{data.tenantId}/domains"
            body: "*"
        };
    }
    
    // Update a Domain scoped to a single Tenant. 
    rpc UpdateTenantDomain(TenantDomainRequest) returns (TenantDomainResponse) {
        option (google.api.http) = {
            put: "/api/v1/tenants/{data.tenantId}/domains"
            body: "*"
        };
    } 
    
    // Delete a Domain scoped to a single Tenant. 
    rpc DeleteTenantDomain(TenantDomainIdRequest) returns (TenantDomainResponse) {
        option (google.api.http) = {
            delete: "/api/v1/tenants/{tenantId}/domains/{domainId}"
        };
    }
    
    // Retrieve a Domain scoped to a single Tenant. 
    rpc GetTenantDomain(TenantDomainIdRequest) returns (TenantDomainResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{tenantId}/domains/{domainId}"
        };
    }
    
    // Retrieve all Domains scoped to a single Tenant. 
    rpc GetAllTenantDomains(google.protobuf.StringValue) returns (TenantDomainListResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{value}/domain-list"
        };
    }

    // Create a Ingestion Profile scoped to a Single Tenant. 
    rpc CreateTenantIngestionProfile(TenantIngestionProfileRequest) returns (TenantIngestionProfileResponse) {
        option (google.api.http) = {
            post: "/api/v1/tenants/{data.tenantId}/ingestion-profiles"
            body: "*"
        };
    }
    
    // Updates an Ingestion Profile, which provides details on the data 
    // collected for the Tenant. 
    rpc UpdateTenantIngestionProfile(TenantIngestionProfileRequest) returns (TenantIngestionProfileResponse) {
        option (google.api.http) = {
            put: "/api/v1/tenants/{data.tenantId}/ingestion-profiles"
            body: "*"
        };
    } 

    // Retrieves an Ingestion Profile, which provides details on the data 
    // collected for the Tenant. 
    rpc GetTenantIngestionProfile(TenantIngestionProfileIdRequest) returns (TenantIngestionProfileResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{tenantId}/ingestion-profiles/{ingestionProfileId}"
        };
    }

    // Delete an Ingestion Profile scoped to a single Tenant. 
    rpc DeleteTenantIngestionProfile(TenantIngestionProfileIdRequest) returns (TenantIngestionProfileResponse) {
        option (google.api.http) = {
            delete: "/api/v1/tenants/{tenantId}/ingestion-profiles/{ingestionProfileId}"
        };
    }
}

// TenantDomain - model for a Domain for a single Tenant.
message TenantDomain {
    string tenantId = 1;
    string datatype = 2;

    string name = 3;
    string color = 4;

    int64 createdTimestamp = 5;
    int64 lastModifiedTimestamp = 6;
}

// TenantDomainRequest - wrapper for requests that involve a Tenant Domain
message TenantDomainRequest {
    string _id = 1;
    string _rev = 2;
    TenantDomain data = 3;
}

// TenantDomainResponse - wrapper for responses that involve a Tenant Domain
message TenantDomainResponse {
    string _id = 1;
    string _rev = 2;
    TenantDomain data = 3;
}

// TenantDomainListResponse - a wrapper for a list of TenantDomain objects that 
// are returned as a response to a request..
message TenantDomainListResponse {
    repeated TenantDomainResponse data = 1;
}

// TenantDomainIdRequest - wrapper for requests that involve a Tenant Domain, 
// but only require the domainID to complete the request.
message TenantDomainIdRequest {
    string tenantId = 1;
    string domainId = 2;
}


// Not dealing with the site tour right now as the concept is not fully 
// thought out. Leaving this snippet in though as we will need to address
// the workflow eventually.
// message TenantSiteTour {
//     string id = 1;
//     string rev = 2;
//     string datatype = 3;

//     bool onboarding = 4;

//     int64 createdTimestamp = 5;
//     int64 lastModifiedTimestamp = 6;
// }

// TenantIngestionProfile - model for the singleton object that 
// governs what data is displayed for a Tenant.
message TenantIngestionProfile {
    string tenantId = 1;
    string datatype = 2;

    string scpUsername = 3;
    string scpPassword = 4;

    int64 createdTimestamp = 5;
    int64 lastModifiedTimestamp = 6;
}

// TenantIngestionProfileRequest - wrapper for requests that involve the
// Tenant Ingestion Profile
message TenantIngestionProfileRequest {
    string _id = 1;
    string _rev = 2;
    TenantIngestionProfile data = 3;
}

// TenantIngestionProfileResponse - wrapper to provide a Tenant Ingestion Profile
// in a response.
message TenantIngestionProfileResponse {
    string _id = 1;
    string _rev = 2;
    TenantIngestionProfile data = 3;
}

message TenantIngestionProfileIdRequest {
    string tenantId = 1;
    string ingestionProfileId = 2;
}

// TenantUser - model for a User that is scoped to a single Tenant.
message TenantUser {
    string tenantId = 1;
    string datatype = 2;

    string username = 3;
    string password = 4;
    bool sendOnboardingEmail = 5;
    string onboardingToken = 6;
    bool userVerified = 7;
    UserState state = 8;
    repeated string domains = 9;
    // TenantSiteTour siteTour = 11;  --- Come back to this concept when it is fleshed out. ---

    int64 createdTimestamp = 10;
    int64 lastModifiedTimestamp = 11;
}

// TenantUserRequest - wrapper for requests that involve a User that
// is scoped to a single Tenant.
message TenantUserRequest {
    string _id = 1;
    string _rev = 2;
    TenantUser data = 3;
}

// TenantUserResponse - wrapper for responses to requests that involve a User that
// is scoped to a single Tenant.
message TenantUserResponse {
    string _id = 1;
    string _rev = 2;
    TenantUser data = 3;
}

// TenantUserListResponse - a wrapper to handle requests that return a
// list of TenantUser objects.
message TenantUserListResponse {
    repeated TenantUserResponse data = 1;
}

// TenantUserIdRequest - wrapper for requests that involve a Tenant User, 
// but only require the userID to complete the request.
message TenantUserIdRequest {
    string tenantId = 1;
    string userId = 2;
}

