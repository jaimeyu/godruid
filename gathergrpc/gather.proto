syntax = "proto3";

package gathergrpc;

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "gathergrpc/adminModels.proto";
import "gathergrpc/tenantModels.proto";
import "gathergrpc/metricModels.proto";
import "gathergrpc/commonModels.proto";


// Service responsible for provisioning Administration
// Users and their functionality, including creation of new 
// Tenants
service AdminProvisioningService {
    
    // Create a User with Administrative access. 
    rpc CreateAdminUser(AdminUserRequest) returns (AdminUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/admin"
            body: "*"
        };
    }
    
    // Update a User with Administrative access. 
    rpc UpdateAdminUser(AdminUserRequest) returns (AdminUserResponse) {
        option (google.api.http) = {
            put: "/api/v1/admin"
            body: "*"
        };
    } 
    
    // Delete a User with Administrative access. 
    rpc DeleteAdminUser(google.protobuf.StringValue) returns (AdminUserResponse) {
        option (google.api.http) = {
            delete: "/api/v1/admin/{value}"
        };
    }
    
    // Retrieve and Administrative User by id. 
    rpc GetAdminUser(google.protobuf.StringValue) returns (AdminUserResponse) {
        option (google.api.http) = {
            get: "/api/v1/admin/{value}"
        };
    }
    
    // Retrieve all Administrative Users. 
    rpc GetAllAdminUsers(google.protobuf.Empty) returns (AdminUserListResponse) {
        option (google.api.http) = {
            get: "/api/v1/admin-user-list"
        };
    }
    
    // Creates a Tenant and returns a TenantDescriptor which provides 
    // metadata for the newly created Tenant.   
    rpc CreateTenant(TenantDescriptorRequest) returns (TenantDescriptorResponse) {
        option (google.api.http) = {
            post: "/api/v1/tenants"
            body: "*"
        };
    }
    
    // Updates a TenantDescriptor, which provides metadata 
    // for the specified Tenant. 
    rpc UpdateTenantDescriptor(TenantDescriptorRequest) returns (TenantDescriptorResponse) {
        option (google.api.http) = {
            put: "/api/v1/tenants"
            body: "*"
        };
    } 
    
    // Deletes a Tenant and returns a TenantDescriptor which provides
    // metadata for the now deleted Tenant. 
    rpc DeleteTenant(google.protobuf.StringValue) returns (TenantDescriptorResponse) {
        option (google.api.http) = {
            delete: "/api/v1/tenants/{value}"
        };
    }

    // Retrieves the metadata of a single Tenant by id.
    rpc GetTenantDescriptor(google.protobuf.StringValue) returns (TenantDescriptorResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{value}"
        };
    }

    // Retrieve all Users scoped to a single Tenant. 
    rpc GetAllTenantDescriptors(google.protobuf.Empty) returns (TenantDescriptorListResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenant-list"
        };
    }

    // Create an IngestionDictionary used for the entire deployment.
    rpc CreateIngestionDictionary(IngestionDictionary) returns (IngestionDictionary) {
        option (google.api.http) = {
            post: "/api/v1/ingestion-dictionaries"
            body: "*"
        };
    }
    
    // Update an IngestionDictionary used for the entire deployment.
    rpc UpdateIngestionDictionary(IngestionDictionary) returns (IngestionDictionary) {
        option (google.api.http) = {
            put: "/api/v1/ingestion-dictionaries"
            body: "*"
        };
    } 
    
    // Delete an IngestionDictionary used for the entire deployment.
    rpc DeleteIngestionDictionary(google.protobuf.Empty) returns (IngestionDictionary) {
        option (google.api.http) = {
            delete: "/api/v1/ingestion-dictionaries"
        };
    }
    
    // Retrieve an IngestionDictionary used for the entire deployment.
    rpc GetIngestionDictionary(google.protobuf.Empty) returns (IngestionDictionary) {
        option (google.api.http) = {
            get: "/api/v1/ingestion-dictionaries"
        };
    }
}


// Service responsible for provisioning Tenant scope data including
// Tenant Users, Tenant Domains, Tenant Injection Profiles.
service TenantProvisioningService {
    
    // Create a User scoped to a Single Tenant. 
    rpc CreateTenantUser(TenantUserRequest) returns (TenantUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/tenants/{data.tenantId}/users"
            body: "*"
        };
    }
    
    // Update a User scoped to a single Tenant. 
    rpc UpdateTenantUser(TenantUserRequest) returns (TenantUserResponse) {
        option (google.api.http) = {
            put: "/api/v1/tenants/{data.tenantId}/users"
            body: "*"
        };
    } 
    
    // Delete a User scoped to a single Tenant. 
    rpc DeleteTenantUser(TenantUserIdRequest) returns (TenantUserResponse) {
        option (google.api.http) = {
            delete: "/api/v1/tenants/{tenantId}/users/{userId}"
        };
    }
    
    // Retrieve a User scoped to a single Tenant. 
    rpc GetTenantUser(TenantUserIdRequest) returns (TenantUserResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{tenantId}/users/{userId}"
        };
    }
    
    // Retrieve all Users scoped to a single Tenant. 
    rpc GetAllTenantUsers(google.protobuf.StringValue) returns (TenantUserListResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{value}/user-list"
        };
    }

    // Create a Domain scoped to a Single Tenant. 
    rpc CreateTenantDomain(TenantDomainRequest) returns (TenantDomainResponse) {
        option (google.api.http) = {
            post: "/api/v1/tenants/{data.tenantId}/domains"
            body: "*"
        };
    }
    
    // Update a Domain scoped to a single Tenant. 
    rpc UpdateTenantDomain(TenantDomainRequest) returns (TenantDomainResponse) {
        option (google.api.http) = {
            put: "/api/v1/tenants/{data.tenantId}/domains"
            body: "*"
        };
    } 
    
    // Delete a Domain scoped to a single Tenant. 
    rpc DeleteTenantDomain(TenantDomainIdRequest) returns (TenantDomainResponse) {
        option (google.api.http) = {
            delete: "/api/v1/tenants/{tenantId}/domains/{domainId}"
        };
    }
    
    // Retrieve a Domain scoped to a single Tenant. 
    rpc GetTenantDomain(TenantDomainIdRequest) returns (TenantDomainResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{tenantId}/domains/{domainId}"
        };
    }
    
    // Retrieve all Domains scoped to a single Tenant. 
    rpc GetAllTenantDomains(google.protobuf.StringValue) returns (TenantDomainListResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{value}/domain-list"
        };
    }

    // Create a Ingestion Profile scoped to a Single Tenant. 
    rpc CreateTenantIngestionProfile(TenantIngestionProfileRequest) returns (TenantIngestionProfileResponse) {
        option (google.api.http) = {
            post: "/api/v1/tenants/{data.tenantId}/ingestion-profiles"
            body: "*"
        };
    }
    
    // Updates an Ingestion Profile, which provides details on the data 
    // collected for the Tenant. 
    rpc UpdateTenantIngestionProfile(TenantIngestionProfileRequest) returns (TenantIngestionProfileResponse) {
        option (google.api.http) = {
            put: "/api/v1/tenants/{data.tenantId}/ingestion-profiles"
            body: "*"
        };
    } 

    // Retrieves an Ingestion Profile, which provides details on the data 
    // collected for the Tenant. 
    rpc GetTenantIngestionProfile(TenantIngestionProfileIdRequest) returns (TenantIngestionProfileResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{tenantId}/ingestion-profiles/{ingestionProfileId}"
        };
    }

    // Delete an Ingestion Profile scoped to a single Tenant. 
    rpc DeleteTenantIngestionProfile(TenantIngestionProfileIdRequest) returns (TenantIngestionProfileResponse) {
        option (google.api.http) = {
            delete: "/api/v1/tenants/{tenantId}/ingestion-profiles/{ingestionProfileId}"
        };
    }


  // Create a Threshold Profile scoped to a Single Tenant. 
    rpc CreateTenantThresholdProfile(TenantThresholdProfileRequest) returns (TenantThresholdProfileResponse) {
        option (google.api.http) = {
            post: "/api/v1/tenants/{data.tenantId}/threshold-profiles"
            body: "*"
        };
    }
    
    // Updates an Threshold Profile, which provides details on the data 
    // collected for the Tenant. 
    rpc UpdateTenantThresholdProfile(TenantThresholdProfileRequest) returns (TenantThresholdProfileResponse) {
        option (google.api.http) = {
            put: "/api/v1/tenants/{data.tenantId}/threshold-profiles"
            body: "*"
        };
    } 

    // Retrieves an Threshold Profile, which provides details on the data 
    // collected for the Tenant. 
    rpc GetTenantThresholdProfile(TenantThresholdProfileIdRequest) returns (TenantThresholdProfileResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{tenantId}/threshold-profiles/{thresholdProfileId}"
        };
    }

    // Delete an Threshold Profile scoped to a single Tenant. 
    rpc DeleteTenantThresholdProfile(TenantThresholdProfileIdRequest) returns (TenantThresholdProfileResponse) {
        option (google.api.http) = {
            delete: "/api/v1/tenants/{tenantId}/threshold-profiles/{thresholdProfileId}"
        };
    }

  
    // Create a MonitoredObject scoped to a Single Tenant. 
    rpc CreateMonitoredObject(MonitoredObjectRequest) returns (MonitoredObjectResponse) {
        option (google.api.http) = {
            post: "/api/v1/tenants/{data.tenantId}/monitored-objects"
            body: "*"
        };
    }
    
    // Update a MonitoredObject scoped to a single Tenant. 
    rpc UpdateMonitoredObject(MonitoredObjectRequest) returns (MonitoredObjectResponse) {
        option (google.api.http) = {
            put: "/api/v1/tenants/{data.tenantId}/monitored-objects"
            body: "*"
        };
    } 
    
    // Delete a MonitoredObject scoped to a single Tenant. 
    rpc DeleteMonitoredObject(MonitoredObjectIdRequest) returns (MonitoredObjectResponse) {
        option (google.api.http) = {
            delete: "/api/v1/tenants/{tenantId}/monitored-objects/{monitoredObjectId}"
        };
    }
    
    // Retrieve a MonitoredObject scoped to a single Tenant. 
    rpc GetMonitoredObject(MonitoredObjectIdRequest) returns (MonitoredObjectResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{tenantId}/monitored-objects/{monitoredObjectId}"
        };
    }
    
    // Retrieve all MonitoredObject scoped to a single Tenant. 
    rpc GetAllMonitoredObjects(google.protobuf.StringValue) returns (MonitoredObjectListResponse) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{value}/monitored-object-list"
        };
    }

    // Retrieve a mapping of Domain to Montiored Objects as either a count or a set of the 
    // ids of the monitored objects. 
    rpc GetMonitoredObjectToDomainMap(MonitoredObjectCountByDomainRequest) returns (MonitoredObjectCountByDomainResponse) {
        option (google.api.http) = {
            post: "/api/v1/tenants/{tenantId}/monitored-object-domain-map"
            body: "*"
        };
    }

    // Create TenantMeta scoped to a Single Tenant. 
    rpc CreateTenantMeta(TenantMeta) returns (TenantMeta) {
        option (google.api.http) = {
            post: "/api/v1/tenants/{data.tenantId}/meta"
            body: "*"
        };
    }
    
    // Update TenantMeta scoped to a single Tenant. 
    rpc UpdateTenantMeta(TenantMeta) returns (TenantMeta) {
        option (google.api.http) = {
            put: "/api/v1/tenants/{data.tenantId}/meta"
            body: "*"
        };
    } 
    
    // Delete TenantMeta scoped to a single Tenant. 
    rpc DeleteTenantMeta(google.protobuf.StringValue) returns (TenantMeta) {
        option (google.api.http) = {
            delete: "/api/v1/tenants/{value}/meta"
        };
    }
    
    // Retrieve a User scoped to a single Tenant
    rpc GetTenantMeta(google.protobuf.StringValue) returns (TenantMeta) {
        option (google.api.http) = {
            get: "/api/v1/tenants/{value}/meta"
        };
    }
}

// Service responsible for retrieving aggregate metrics from druid 
service MetricsService {
    
    // Retrieve threshold crossing for given metric.
    rpc GetThresholdCrossing(ThresholdCrossingRequest) returns (JSONAPIObject) {
        option (google.api.http) = {
            get: "/api/v1/threshold-crossing"
        };
    }

  rpc GetThresholdCrossingByMonitoredObject(ThresholdCrossingRequest) returns (JSONAPIObject) {
        option (google.api.http) = {
            get: "/api/v1/threshold-crossing-by-monitored-object"
        };
    }

    // Retrieve a histogram of measurements for given time range and metric
    rpc GetHistogram(HistogramRequest) returns (JSONAPIObject) {
        option (google.api.http) = {
            get: "/api/v1/histogram"
        };
    }
  
}

