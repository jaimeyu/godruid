syntax = "proto3";

package gathergrpc;

import "gathergrpc/commonModels.proto";

// TenantDomain - model for a Domain for a single Tenant.
message TenantDomain {
    string tenantId = 1;
    string datatype = 2;

    string name = 3;
    string color = 4;

    int64 createdTimestamp = 5;
    int64 lastModifiedTimestamp = 6;
}

// TenantDomainRequest - wrapper for requests that involve a Tenant Domain
message TenantDomainRequest {
    string _id = 1;
    string _rev = 2;
    TenantDomain data = 3;
}

// TenantDomainResponse - wrapper for responses that involve a Tenant Domain
message TenantDomainResponse {
    string _id = 1;
    string _rev = 2;
    TenantDomain data = 3;
}

// TenantDomainListResponse - a wrapper for a list of TenantDomain objects that 
// are returned as a response to a request..
message TenantDomainListResponse {
    repeated TenantDomainResponse data = 1;
}

// TenantDomainIdRequest - wrapper for requests that involve a Tenant Domain, 
// but only require the domainID to complete the request.
message TenantDomainIdRequest {
    string tenantId = 1;
    string domainId = 2;
}


// Not dealing with the site tour right now as the concept is not fully 
// thought out. Leaving this snippet in though as we will need to address
// the workflow eventually.
// message TenantSiteTour {
//     string id = 1;
//     string rev = 2;
//     string datatype = 3;

//     bool onboarding = 4;

//     int64 createdTimestamp = 5;
//     int64 lastModifiedTimestamp = 6;
// }

// TenantIngestionProfile - model for the singleton object that 
// governs what data is displayed for a Tenant.
message TenantIngestionProfile {
    string tenantId = 1;
    string datatype = 2;

    string scpUsername = 3;
    string scpPassword = 4;

    int64 createdTimestamp = 5;
    int64 lastModifiedTimestamp = 6;
}

// TenantIngestionProfileRequest - wrapper for requests that involve the
// Tenant Ingestion Profile
message TenantIngestionProfileRequest {
    string _id = 1;
    string _rev = 2;
    TenantIngestionProfile data = 3;
}

// TenantIngestionProfileResponse - wrapper to provide a Tenant Ingestion Profile
// in a response.
message TenantIngestionProfileResponse {
    string _id = 1;
    string _rev = 2;
    TenantIngestionProfile data = 3;
}

message TenantIngestionProfileIdRequest {
    string tenantId = 1;
    string ingestionProfileId = 2;
}

// TenantUser - model for a User that is scoped to a single Tenant.
message TenantUser {
    string tenantId = 1;
    string datatype = 2;

    string username = 3;
    string password = 4;
    bool sendOnboardingEmail = 5;
    string onboardingToken = 6;
    bool userVerified = 7;
    UserState state = 8;
    repeated string domains = 9;
    // TenantSiteTour siteTour = 11;  --- Come back to this concept when it is fleshed out. ---

    int64 createdTimestamp = 10;
    int64 lastModifiedTimestamp = 11;
}

// TenantUserRequest - wrapper for requests that involve a User that
// is scoped to a single Tenant.
message TenantUserRequest {
    string _id = 1;
    string _rev = 2;
    TenantUser data = 3;
}

// TenantUserResponse - wrapper for responses to requests that involve a User that
// is scoped to a single Tenant.
message TenantUserResponse {
    string _id = 1;
    string _rev = 2;
    TenantUser data = 3;
}

// TenantUserListResponse - a wrapper to handle requests that return a
// list of TenantUser objects.
message TenantUserListResponse {
    repeated TenantUserResponse data = 1;
}

// TenantUserIdRequest - wrapper for requests that involve a Tenant User, 
// but only require the userID to complete the request.
message TenantUserIdRequest {
    string tenantId = 1;
    string userId = 2;
}