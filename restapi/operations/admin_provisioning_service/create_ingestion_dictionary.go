// Code generated by go-swagger; DO NOT EDIT.

package admin_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateIngestionDictionaryHandlerFunc turns a function with the right signature into a create ingestion dictionary handler
type CreateIngestionDictionaryHandlerFunc func(CreateIngestionDictionaryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateIngestionDictionaryHandlerFunc) Handle(params CreateIngestionDictionaryParams) middleware.Responder {
	return fn(params)
}

// CreateIngestionDictionaryHandler interface for that can handle valid create ingestion dictionary params
type CreateIngestionDictionaryHandler interface {
	Handle(CreateIngestionDictionaryParams) middleware.Responder
}

// NewCreateIngestionDictionary creates a new http.Handler for the create ingestion dictionary operation
func NewCreateIngestionDictionary(ctx *middleware.Context, handler CreateIngestionDictionaryHandler) *CreateIngestionDictionary {
	return &CreateIngestionDictionary{Context: ctx, Handler: handler}
}

/*CreateIngestionDictionary swagger:route POST /v1/ingestion-dictionaries AdminProvisioningService createIngestionDictionary

Create an Ingestion Dictionary.

*/
type CreateIngestionDictionary struct {
	Context *middleware.Context
	Handler CreateIngestionDictionaryHandler
}

func (o *CreateIngestionDictionary) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateIngestionDictionaryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
