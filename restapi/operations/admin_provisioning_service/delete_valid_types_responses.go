// Code generated by go-swagger; DO NOT EDIT.

package admin_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// DeleteValidTypesOKCode is the HTTP code returned for type DeleteValidTypesOK
const DeleteValidTypesOKCode int = 200

/*DeleteValidTypesOK delete valid types o k

swagger:response deleteValidTypesOK
*/
type DeleteValidTypesOK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.JSONAPIValidTypes `json:"body,omitempty"`
}

// NewDeleteValidTypesOK creates DeleteValidTypesOK with default headers values
func NewDeleteValidTypesOK() *DeleteValidTypesOK {

	return &DeleteValidTypesOK{}
}

// WithPayload adds the payload to the delete valid types o k response
func (o *DeleteValidTypesOK) WithPayload(payload *swagmodels.JSONAPIValidTypes) *DeleteValidTypesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete valid types o k response
func (o *DeleteValidTypesOK) SetPayload(payload *swagmodels.JSONAPIValidTypes) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteValidTypesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteValidTypesForbiddenCode is the HTTP code returned for type DeleteValidTypesForbidden
const DeleteValidTypesForbiddenCode int = 403

/*DeleteValidTypesForbidden Requestor does not have authorization to perform this action

swagger:response deleteValidTypesForbidden
*/
type DeleteValidTypesForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteValidTypesForbidden creates DeleteValidTypesForbidden with default headers values
func NewDeleteValidTypesForbidden() *DeleteValidTypesForbidden {

	return &DeleteValidTypesForbidden{}
}

// WithPayload adds the payload to the delete valid types forbidden response
func (o *DeleteValidTypesForbidden) WithPayload(payload string) *DeleteValidTypesForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete valid types forbidden response
func (o *DeleteValidTypesForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteValidTypesForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DeleteValidTypesInternalServerErrorCode is the HTTP code returned for type DeleteValidTypesInternalServerError
const DeleteValidTypesInternalServerErrorCode int = 500

/*DeleteValidTypesInternalServerError Unexpected error processing request

swagger:response deleteValidTypesInternalServerError
*/
type DeleteValidTypesInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteValidTypesInternalServerError creates DeleteValidTypesInternalServerError with default headers values
func NewDeleteValidTypesInternalServerError() *DeleteValidTypesInternalServerError {

	return &DeleteValidTypesInternalServerError{}
}

// WithPayload adds the payload to the delete valid types internal server error response
func (o *DeleteValidTypesInternalServerError) WithPayload(payload string) *DeleteValidTypesInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete valid types internal server error response
func (o *DeleteValidTypesInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteValidTypesInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
