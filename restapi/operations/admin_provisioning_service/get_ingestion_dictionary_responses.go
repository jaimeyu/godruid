// Code generated by go-swagger; DO NOT EDIT.

package admin_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// GetIngestionDictionaryOKCode is the HTTP code returned for type GetIngestionDictionaryOK
const GetIngestionDictionaryOKCode int = 200

/*GetIngestionDictionaryOK get ingestion dictionary o k

swagger:response getIngestionDictionaryOK
*/
type GetIngestionDictionaryOK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.JSONAPIIngestionDictionary `json:"body,omitempty"`
}

// NewGetIngestionDictionaryOK creates GetIngestionDictionaryOK with default headers values
func NewGetIngestionDictionaryOK() *GetIngestionDictionaryOK {

	return &GetIngestionDictionaryOK{}
}

// WithPayload adds the payload to the get ingestion dictionary o k response
func (o *GetIngestionDictionaryOK) WithPayload(payload *swagmodels.JSONAPIIngestionDictionary) *GetIngestionDictionaryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get ingestion dictionary o k response
func (o *GetIngestionDictionaryOK) SetPayload(payload *swagmodels.JSONAPIIngestionDictionary) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetIngestionDictionaryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetIngestionDictionaryForbiddenCode is the HTTP code returned for type GetIngestionDictionaryForbidden
const GetIngestionDictionaryForbiddenCode int = 403

/*GetIngestionDictionaryForbidden Requestor does not have authorization to perform this action

swagger:response getIngestionDictionaryForbidden
*/
type GetIngestionDictionaryForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetIngestionDictionaryForbidden creates GetIngestionDictionaryForbidden with default headers values
func NewGetIngestionDictionaryForbidden() *GetIngestionDictionaryForbidden {

	return &GetIngestionDictionaryForbidden{}
}

// WithPayload adds the payload to the get ingestion dictionary forbidden response
func (o *GetIngestionDictionaryForbidden) WithPayload(payload string) *GetIngestionDictionaryForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get ingestion dictionary forbidden response
func (o *GetIngestionDictionaryForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetIngestionDictionaryForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetIngestionDictionaryInternalServerErrorCode is the HTTP code returned for type GetIngestionDictionaryInternalServerError
const GetIngestionDictionaryInternalServerErrorCode int = 500

/*GetIngestionDictionaryInternalServerError Unexpected error processing request

swagger:response getIngestionDictionaryInternalServerError
*/
type GetIngestionDictionaryInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetIngestionDictionaryInternalServerError creates GetIngestionDictionaryInternalServerError with default headers values
func NewGetIngestionDictionaryInternalServerError() *GetIngestionDictionaryInternalServerError {

	return &GetIngestionDictionaryInternalServerError{}
}

// WithPayload adds the payload to the get ingestion dictionary internal server error response
func (o *GetIngestionDictionaryInternalServerError) WithPayload(payload string) *GetIngestionDictionaryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get ingestion dictionary internal server error response
func (o *GetIngestionDictionaryInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetIngestionDictionaryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
