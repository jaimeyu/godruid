// Code generated by go-swagger; DO NOT EDIT.

package admin_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTenantHandlerFunc turns a function with the right signature into a get tenant handler
type GetTenantHandlerFunc func(GetTenantParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTenantHandlerFunc) Handle(params GetTenantParams) middleware.Responder {
	return fn(params)
}

// GetTenantHandler interface for that can handle valid get tenant params
type GetTenantHandler interface {
	Handle(GetTenantParams) middleware.Responder
}

// NewGetTenant creates a new http.Handler for the get tenant operation
func NewGetTenant(ctx *middleware.Context, handler GetTenantHandler) *GetTenant {
	return &GetTenant{Context: ctx, Handler: handler}
}

/*GetTenant swagger:route GET /v1/tenants/{tenantId} AdminProvisioningService getTenant

Retrieve a Tenant by id.

*/
type GetTenant struct {
	Context *middleware.Context
	Handler GetTenantHandler
}

func (o *GetTenant) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTenantParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
