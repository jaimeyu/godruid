// Code generated by go-swagger; DO NOT EDIT.

package admin_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTenantSummaryByAliasHandlerFunc turns a function with the right signature into a get tenant summary by alias handler
type GetTenantSummaryByAliasHandlerFunc func(GetTenantSummaryByAliasParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTenantSummaryByAliasHandlerFunc) Handle(params GetTenantSummaryByAliasParams) middleware.Responder {
	return fn(params)
}

// GetTenantSummaryByAliasHandler interface for that can handle valid get tenant summary by alias params
type GetTenantSummaryByAliasHandler interface {
	Handle(GetTenantSummaryByAliasParams) middleware.Responder
}

// NewGetTenantSummaryByAlias creates a new http.Handler for the get tenant summary by alias operation
func NewGetTenantSummaryByAlias(ctx *middleware.Context, handler GetTenantSummaryByAliasHandler) *GetTenantSummaryByAlias {
	return &GetTenantSummaryByAlias{Context: ctx, Handler: handler}
}

/*GetTenantSummaryByAlias swagger:route GET /v1/tenant-summary-by-alias/{value} AdminProvisioningService getTenantSummaryByAlias

Returns a summary of the Tenant that matches the provided alias.

*/
type GetTenantSummaryByAlias struct {
	Context *middleware.Context
	Handler GetTenantSummaryByAliasHandler
}

func (o *GetTenantSummaryByAlias) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTenantSummaryByAliasParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
