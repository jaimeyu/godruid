// Code generated by go-swagger; DO NOT EDIT.

package admin_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateValidTypesHandlerFunc turns a function with the right signature into a update valid types handler
type UpdateValidTypesHandlerFunc func(UpdateValidTypesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateValidTypesHandlerFunc) Handle(params UpdateValidTypesParams) middleware.Responder {
	return fn(params)
}

// UpdateValidTypesHandler interface for that can handle valid update valid types params
type UpdateValidTypesHandler interface {
	Handle(UpdateValidTypesParams) middleware.Responder
}

// NewUpdateValidTypes creates a new http.Handler for the update valid types operation
func NewUpdateValidTypes(ctx *middleware.Context, handler UpdateValidTypesHandler) *UpdateValidTypes {
	return &UpdateValidTypes{Context: ctx, Handler: handler}
}

/*UpdateValidTypes swagger:route PUT /v1/valid-types AdminProvisioningService updateValidTypes

Update a Valid Types object.

*/
type UpdateValidTypes struct {
	Context *middleware.Context
	Handler UpdateValidTypesHandler
}

func (o *UpdateValidTypes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateValidTypesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
