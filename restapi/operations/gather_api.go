// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/accedian/adh-gather/restapi/operations/admin_provisioning_service"
	"github.com/accedian/adh-gather/restapi/operations/admin_provisioning_service_v2"
	"github.com/accedian/adh-gather/restapi/operations/metrics_service"
	"github.com/accedian/adh-gather/restapi/operations/tenant_provisioning_service"
	"github.com/accedian/adh-gather/restapi/operations/tenant_provisioning_service_v2"
)

// NewGatherAPI creates a new Gather instance
func NewGatherAPI(spec *loads.Document) *GatherAPI {
	return &GatherAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		TxtProducer:         runtime.TextProducer(),
		TenantProvisioningServiceBulkInsertMonitoredObjectHandler: tenant_provisioning_service.BulkInsertMonitoredObjectHandlerFunc(func(params tenant_provisioning_service.BulkInsertMonitoredObjectParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceBulkInsertMonitoredObject has not yet been implemented")
		}),
		TenantProvisioningServiceV2BulkInsertMonitoredObjectsV2Handler: tenant_provisioning_service_v2.BulkInsertMonitoredObjectsV2HandlerFunc(func(params tenant_provisioning_service_v2.BulkInsertMonitoredObjectsV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2BulkInsertMonitoredObjectsV2 has not yet been implemented")
		}),
		TenantProvisioningServiceBulkUpdateMonitoredObjectHandler: tenant_provisioning_service.BulkUpdateMonitoredObjectHandlerFunc(func(params tenant_provisioning_service.BulkUpdateMonitoredObjectParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceBulkUpdateMonitoredObject has not yet been implemented")
		}),
		TenantProvisioningServiceV2BulkUpdateMonitoredObjectsV2Handler: tenant_provisioning_service_v2.BulkUpdateMonitoredObjectsV2HandlerFunc(func(params tenant_provisioning_service_v2.BulkUpdateMonitoredObjectsV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2BulkUpdateMonitoredObjectsV2 has not yet been implemented")
		}),
		TenantProvisioningServiceBulkUpsertMonitoredObjectMetaHandler: tenant_provisioning_service.BulkUpsertMonitoredObjectMetaHandlerFunc(func(params tenant_provisioning_service.BulkUpsertMonitoredObjectMetaParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceBulkUpsertMonitoredObjectMeta has not yet been implemented")
		}),
		TenantProvisioningServiceV2CreateCardV2Handler: tenant_provisioning_service_v2.CreateCardV2HandlerFunc(func(params tenant_provisioning_service_v2.CreateCardV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2CreateCardV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2CreateConnectorConfigV2Handler: tenant_provisioning_service_v2.CreateConnectorConfigV2HandlerFunc(func(params tenant_provisioning_service_v2.CreateConnectorConfigV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2CreateConnectorConfigV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2CreateConnectorInstanceV2Handler: tenant_provisioning_service_v2.CreateConnectorInstanceV2HandlerFunc(func(params tenant_provisioning_service_v2.CreateConnectorInstanceV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2CreateConnectorInstanceV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2CreateDashboardV2Handler: tenant_provisioning_service_v2.CreateDashboardV2HandlerFunc(func(params tenant_provisioning_service_v2.CreateDashboardV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2CreateDashboardV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2CreateDataCleaningProfileHandler: tenant_provisioning_service_v2.CreateDataCleaningProfileHandlerFunc(func(params tenant_provisioning_service_v2.CreateDataCleaningProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2CreateDataCleaningProfile has not yet been implemented")
		}),
		TenantProvisioningServiceV2CreateIngestionProfileV2Handler: tenant_provisioning_service_v2.CreateIngestionProfileV2HandlerFunc(func(params tenant_provisioning_service_v2.CreateIngestionProfileV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2CreateIngestionProfileV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2CreateMonitoredObjectV2Handler: tenant_provisioning_service_v2.CreateMonitoredObjectV2HandlerFunc(func(params tenant_provisioning_service_v2.CreateMonitoredObjectV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2CreateMonitoredObjectV2 has not yet been implemented")
		}),
		TenantProvisioningServiceCreateReportScheduleConfigHandler: tenant_provisioning_service.CreateReportScheduleConfigHandlerFunc(func(params tenant_provisioning_service.CreateReportScheduleConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceCreateReportScheduleConfig has not yet been implemented")
		}),
		TenantProvisioningServiceV2CreateReportScheduleConfigV2Handler: tenant_provisioning_service_v2.CreateReportScheduleConfigV2HandlerFunc(func(params tenant_provisioning_service_v2.CreateReportScheduleConfigV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2CreateReportScheduleConfigV2 has not yet been implemented")
		}),
		AdminProvisioningServiceCreateTenantHandler: admin_provisioning_service.CreateTenantHandlerFunc(func(params admin_provisioning_service.CreateTenantParams) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceCreateTenant has not yet been implemented")
		}),
		TenantProvisioningServiceCreateTenantConnectorConfigHandler: tenant_provisioning_service.CreateTenantConnectorConfigHandlerFunc(func(params tenant_provisioning_service.CreateTenantConnectorConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceCreateTenantConnectorConfig has not yet been implemented")
		}),
		TenantProvisioningServiceCreateTenantConnectorInstanceHandler: tenant_provisioning_service.CreateTenantConnectorInstanceHandlerFunc(func(params tenant_provisioning_service.CreateTenantConnectorInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceCreateTenantConnectorInstance has not yet been implemented")
		}),
		TenantProvisioningServiceCreateTenantDomainHandler: tenant_provisioning_service.CreateTenantDomainHandlerFunc(func(params tenant_provisioning_service.CreateTenantDomainParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceCreateTenantDomain has not yet been implemented")
		}),
		TenantProvisioningServiceCreateTenantIngestionProfileHandler: tenant_provisioning_service.CreateTenantIngestionProfileHandlerFunc(func(params tenant_provisioning_service.CreateTenantIngestionProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceCreateTenantIngestionProfile has not yet been implemented")
		}),
		TenantProvisioningServiceCreateTenantMetadataHandler: tenant_provisioning_service.CreateTenantMetadataHandlerFunc(func(params tenant_provisioning_service.CreateTenantMetadataParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceCreateTenantMetadata has not yet been implemented")
		}),
		TenantProvisioningServiceCreateTenantMonitoredObjectHandler: tenant_provisioning_service.CreateTenantMonitoredObjectHandlerFunc(func(params tenant_provisioning_service.CreateTenantMonitoredObjectParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceCreateTenantMonitoredObject has not yet been implemented")
		}),
		TenantProvisioningServiceCreateTenantThresholdProfileHandler: tenant_provisioning_service.CreateTenantThresholdProfileHandlerFunc(func(params tenant_provisioning_service.CreateTenantThresholdProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceCreateTenantThresholdProfile has not yet been implemented")
		}),
		AdminProvisioningServiceV2CreateTenantV2Handler: admin_provisioning_service_v2.CreateTenantV2HandlerFunc(func(params admin_provisioning_service_v2.CreateTenantV2Params) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceV2CreateTenantV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2CreateThresholdProfileV2Handler: tenant_provisioning_service_v2.CreateThresholdProfileV2HandlerFunc(func(params tenant_provisioning_service_v2.CreateThresholdProfileV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2CreateThresholdProfileV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2DeleteCardV2Handler: tenant_provisioning_service_v2.DeleteCardV2HandlerFunc(func(params tenant_provisioning_service_v2.DeleteCardV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2DeleteCardV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2DeleteConnectorConfigV2Handler: tenant_provisioning_service_v2.DeleteConnectorConfigV2HandlerFunc(func(params tenant_provisioning_service_v2.DeleteConnectorConfigV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2DeleteConnectorConfigV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2DeleteConnectorInstanceV2Handler: tenant_provisioning_service_v2.DeleteConnectorInstanceV2HandlerFunc(func(params tenant_provisioning_service_v2.DeleteConnectorInstanceV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2DeleteConnectorInstanceV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2DeleteDashboardV2Handler: tenant_provisioning_service_v2.DeleteDashboardV2HandlerFunc(func(params tenant_provisioning_service_v2.DeleteDashboardV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2DeleteDashboardV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2DeleteDataCleaningProfileHandler: tenant_provisioning_service_v2.DeleteDataCleaningProfileHandlerFunc(func(params tenant_provisioning_service_v2.DeleteDataCleaningProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2DeleteDataCleaningProfile has not yet been implemented")
		}),
		TenantProvisioningServiceV2DeleteIngestionProfileV2Handler: tenant_provisioning_service_v2.DeleteIngestionProfileV2HandlerFunc(func(params tenant_provisioning_service_v2.DeleteIngestionProfileV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2DeleteIngestionProfileV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2DeleteMonitoredObjectV2Handler: tenant_provisioning_service_v2.DeleteMonitoredObjectV2HandlerFunc(func(params tenant_provisioning_service_v2.DeleteMonitoredObjectV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2DeleteMonitoredObjectV2 has not yet been implemented")
		}),
		TenantProvisioningServiceDeleteReportScheduleConfigHandler: tenant_provisioning_service.DeleteReportScheduleConfigHandlerFunc(func(params tenant_provisioning_service.DeleteReportScheduleConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceDeleteReportScheduleConfig has not yet been implemented")
		}),
		TenantProvisioningServiceV2DeleteReportScheduleConfigV2Handler: tenant_provisioning_service_v2.DeleteReportScheduleConfigV2HandlerFunc(func(params tenant_provisioning_service_v2.DeleteReportScheduleConfigV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2DeleteReportScheduleConfigV2 has not yet been implemented")
		}),
		AdminProvisioningServiceDeleteTenantHandler: admin_provisioning_service.DeleteTenantHandlerFunc(func(params admin_provisioning_service.DeleteTenantParams) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceDeleteTenant has not yet been implemented")
		}),
		TenantProvisioningServiceDeleteTenantConnectorConfigHandler: tenant_provisioning_service.DeleteTenantConnectorConfigHandlerFunc(func(params tenant_provisioning_service.DeleteTenantConnectorConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceDeleteTenantConnectorConfig has not yet been implemented")
		}),
		TenantProvisioningServiceDeleteTenantConnectorInstanceHandler: tenant_provisioning_service.DeleteTenantConnectorInstanceHandlerFunc(func(params tenant_provisioning_service.DeleteTenantConnectorInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceDeleteTenantConnectorInstance has not yet been implemented")
		}),
		TenantProvisioningServiceDeleteTenantDomainHandler: tenant_provisioning_service.DeleteTenantDomainHandlerFunc(func(params tenant_provisioning_service.DeleteTenantDomainParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceDeleteTenantDomain has not yet been implemented")
		}),
		TenantProvisioningServiceDeleteTenantIngestionProfileHandler: tenant_provisioning_service.DeleteTenantIngestionProfileHandlerFunc(func(params tenant_provisioning_service.DeleteTenantIngestionProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceDeleteTenantIngestionProfile has not yet been implemented")
		}),
		TenantProvisioningServiceDeleteTenantMetadataHandler: tenant_provisioning_service.DeleteTenantMetadataHandlerFunc(func(params tenant_provisioning_service.DeleteTenantMetadataParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceDeleteTenantMetadata has not yet been implemented")
		}),
		TenantProvisioningServiceDeleteTenantMonitoredObjectHandler: tenant_provisioning_service.DeleteTenantMonitoredObjectHandlerFunc(func(params tenant_provisioning_service.DeleteTenantMonitoredObjectParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceDeleteTenantMonitoredObject has not yet been implemented")
		}),
		TenantProvisioningServiceDeleteTenantThresholdProfileHandler: tenant_provisioning_service.DeleteTenantThresholdProfileHandlerFunc(func(params tenant_provisioning_service.DeleteTenantThresholdProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceDeleteTenantThresholdProfile has not yet been implemented")
		}),
		AdminProvisioningServiceV2DeleteTenantV2Handler: admin_provisioning_service_v2.DeleteTenantV2HandlerFunc(func(params admin_provisioning_service_v2.DeleteTenantV2Params) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceV2DeleteTenantV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2DeleteThresholdProfileV2Handler: tenant_provisioning_service_v2.DeleteThresholdProfileV2HandlerFunc(func(params tenant_provisioning_service_v2.DeleteThresholdProfileV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2DeleteThresholdProfileV2 has not yet been implemented")
		}),
		MetricsServiceGenSLAReportHandler: metrics_service.GenSLAReportHandlerFunc(func(params metrics_service.GenSLAReportParams) middleware.Responder {
			return middleware.NotImplemented("operation MetricsServiceGenSLAReport has not yet been implemented")
		}),
		TenantProvisioningServiceGetActiveTenantIngestionProfileHandler: tenant_provisioning_service.GetActiveTenantIngestionProfileHandlerFunc(func(params tenant_provisioning_service.GetActiveTenantIngestionProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetActiveTenantIngestionProfile has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetAllCardsV2Handler: tenant_provisioning_service_v2.GetAllCardsV2HandlerFunc(func(params tenant_provisioning_service_v2.GetAllCardsV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetAllCardsV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetAllConnectorConfigsV2Handler: tenant_provisioning_service_v2.GetAllConnectorConfigsV2HandlerFunc(func(params tenant_provisioning_service_v2.GetAllConnectorConfigsV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetAllConnectorConfigsV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetAllConnectorInstancesV2Handler: tenant_provisioning_service_v2.GetAllConnectorInstancesV2HandlerFunc(func(params tenant_provisioning_service_v2.GetAllConnectorInstancesV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetAllConnectorInstancesV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetAllDashboardsV2Handler: tenant_provisioning_service_v2.GetAllDashboardsV2HandlerFunc(func(params tenant_provisioning_service_v2.GetAllDashboardsV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetAllDashboardsV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetAllIngestionProfilesV2Handler: tenant_provisioning_service_v2.GetAllIngestionProfilesV2HandlerFunc(func(params tenant_provisioning_service_v2.GetAllIngestionProfilesV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetAllIngestionProfilesV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetAllMonitoredObjectsV2Handler: tenant_provisioning_service_v2.GetAllMonitoredObjectsV2HandlerFunc(func(params tenant_provisioning_service_v2.GetAllMonitoredObjectsV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetAllMonitoredObjectsV2 has not yet been implemented")
		}),
		TenantProvisioningServiceGetAllReportScheduleConfigHandler: tenant_provisioning_service.GetAllReportScheduleConfigHandlerFunc(func(params tenant_provisioning_service.GetAllReportScheduleConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetAllReportScheduleConfig has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetAllReportScheduleConfigsV2Handler: tenant_provisioning_service_v2.GetAllReportScheduleConfigsV2HandlerFunc(func(params tenant_provisioning_service_v2.GetAllReportScheduleConfigsV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetAllReportScheduleConfigsV2 has not yet been implemented")
		}),
		TenantProvisioningServiceGetAllSLAReportsHandler: tenant_provisioning_service.GetAllSLAReportsHandlerFunc(func(params tenant_provisioning_service.GetAllSLAReportsParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetAllSLAReports has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetAllSLAReportsV2Handler: tenant_provisioning_service_v2.GetAllSLAReportsV2HandlerFunc(func(params tenant_provisioning_service_v2.GetAllSLAReportsV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetAllSLAReportsV2 has not yet been implemented")
		}),
		TenantProvisioningServiceGetAllTenantConnectorConfigsHandler: tenant_provisioning_service.GetAllTenantConnectorConfigsHandlerFunc(func(params tenant_provisioning_service.GetAllTenantConnectorConfigsParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetAllTenantConnectorConfigs has not yet been implemented")
		}),
		TenantProvisioningServiceGetAllTenantConnectorInstancesHandler: tenant_provisioning_service.GetAllTenantConnectorInstancesHandlerFunc(func(params tenant_provisioning_service.GetAllTenantConnectorInstancesParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetAllTenantConnectorInstances has not yet been implemented")
		}),
		TenantProvisioningServiceGetAllTenantDomainsHandler: tenant_provisioning_service.GetAllTenantDomainsHandlerFunc(func(params tenant_provisioning_service.GetAllTenantDomainsParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetAllTenantDomains has not yet been implemented")
		}),
		TenantProvisioningServiceGetAllTenantMonitoredObjectsHandler: tenant_provisioning_service.GetAllTenantMonitoredObjectsHandlerFunc(func(params tenant_provisioning_service.GetAllTenantMonitoredObjectsParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetAllTenantMonitoredObjects has not yet been implemented")
		}),
		TenantProvisioningServiceGetAllTenantThresholdProfilesHandler: tenant_provisioning_service.GetAllTenantThresholdProfilesHandlerFunc(func(params tenant_provisioning_service.GetAllTenantThresholdProfilesParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetAllTenantThresholdProfiles has not yet been implemented")
		}),
		AdminProvisioningServiceGetAllTenantsHandler: admin_provisioning_service.GetAllTenantsHandlerFunc(func(params admin_provisioning_service.GetAllTenantsParams) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceGetAllTenants has not yet been implemented")
		}),
		AdminProvisioningServiceV2GetAllTenantsV2Handler: admin_provisioning_service_v2.GetAllTenantsV2HandlerFunc(func(params admin_provisioning_service_v2.GetAllTenantsV2Params) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceV2GetAllTenantsV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetAllThresholdProfilesV2Handler: tenant_provisioning_service_v2.GetAllThresholdProfilesV2HandlerFunc(func(params tenant_provisioning_service_v2.GetAllThresholdProfilesV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetAllThresholdProfilesV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetCardV2Handler: tenant_provisioning_service_v2.GetCardV2HandlerFunc(func(params tenant_provisioning_service_v2.GetCardV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetCardV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetConnectorConfigV2Handler: tenant_provisioning_service_v2.GetConnectorConfigV2HandlerFunc(func(params tenant_provisioning_service_v2.GetConnectorConfigV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetConnectorConfigV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetConnectorInstanceV2Handler: tenant_provisioning_service_v2.GetConnectorInstanceV2HandlerFunc(func(params tenant_provisioning_service_v2.GetConnectorInstanceV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetConnectorInstanceV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetDashboardV2Handler: tenant_provisioning_service_v2.GetDashboardV2HandlerFunc(func(params tenant_provisioning_service_v2.GetDashboardV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetDashboardV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetDataCleaningProfileHandler: tenant_provisioning_service_v2.GetDataCleaningProfileHandlerFunc(func(params tenant_provisioning_service_v2.GetDataCleaningProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetDataCleaningProfile has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetDataCleaningProfilesHandler: tenant_provisioning_service_v2.GetDataCleaningProfilesHandlerFunc(func(params tenant_provisioning_service_v2.GetDataCleaningProfilesParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetDataCleaningProfiles has not yet been implemented")
		}),
		TenantProvisioningServiceGetDomainToMonitoredObjectMapHandler: tenant_provisioning_service.GetDomainToMonitoredObjectMapHandlerFunc(func(params tenant_provisioning_service.GetDomainToMonitoredObjectMapParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetDomainToMonitoredObjectMap has not yet been implemented")
		}),
		MetricsServiceGetFilteredRawMetricsHandler: metrics_service.GetFilteredRawMetricsHandlerFunc(func(params metrics_service.GetFilteredRawMetricsParams) middleware.Responder {
			return middleware.NotImplemented("operation MetricsServiceGetFilteredRawMetrics has not yet been implemented")
		}),
		MetricsServiceGetHistogramHandler: metrics_service.GetHistogramHandlerFunc(func(params metrics_service.GetHistogramParams) middleware.Responder {
			return middleware.NotImplemented("operation MetricsServiceGetHistogram has not yet been implemented")
		}),
		AdminProvisioningServiceGetIngestionDictionaryHandler: admin_provisioning_service.GetIngestionDictionaryHandlerFunc(func(params admin_provisioning_service.GetIngestionDictionaryParams) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceGetIngestionDictionary has not yet been implemented")
		}),
		AdminProvisioningServiceV2GetIngestionDictionaryV2Handler: admin_provisioning_service_v2.GetIngestionDictionaryV2HandlerFunc(func(params admin_provisioning_service_v2.GetIngestionDictionaryV2Params) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceV2GetIngestionDictionaryV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetIngestionProfileV2Handler: tenant_provisioning_service_v2.GetIngestionProfileV2HandlerFunc(func(params tenant_provisioning_service_v2.GetIngestionProfileV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetIngestionProfileV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetMonitoredObjectV2Handler: tenant_provisioning_service_v2.GetMonitoredObjectV2HandlerFunc(func(params tenant_provisioning_service_v2.GetMonitoredObjectV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetMonitoredObjectV2 has not yet been implemented")
		}),
		MetricsServiceGetRawMetricsHandler: metrics_service.GetRawMetricsHandlerFunc(func(params metrics_service.GetRawMetricsParams) middleware.Responder {
			return middleware.NotImplemented("operation MetricsServiceGetRawMetrics has not yet been implemented")
		}),
		TenantProvisioningServiceGetReportScheduleConfigHandler: tenant_provisioning_service.GetReportScheduleConfigHandlerFunc(func(params tenant_provisioning_service.GetReportScheduleConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetReportScheduleConfig has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetReportScheduleConfigV2Handler: tenant_provisioning_service_v2.GetReportScheduleConfigV2HandlerFunc(func(params tenant_provisioning_service_v2.GetReportScheduleConfigV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetReportScheduleConfigV2 has not yet been implemented")
		}),
		TenantProvisioningServiceGetSLAReportHandler: tenant_provisioning_service.GetSLAReportHandlerFunc(func(params tenant_provisioning_service.GetSLAReportParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetSLAReport has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetSLAReportV2Handler: tenant_provisioning_service_v2.GetSLAReportV2HandlerFunc(func(params tenant_provisioning_service_v2.GetSLAReportV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetSLAReportV2 has not yet been implemented")
		}),
		AdminProvisioningServiceGetTenantHandler: admin_provisioning_service.GetTenantHandlerFunc(func(params admin_provisioning_service.GetTenantParams) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceGetTenant has not yet been implemented")
		}),
		TenantProvisioningServiceGetTenantConnectorConfigHandler: tenant_provisioning_service.GetTenantConnectorConfigHandlerFunc(func(params tenant_provisioning_service.GetTenantConnectorConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetTenantConnectorConfig has not yet been implemented")
		}),
		TenantProvisioningServiceGetTenantConnectorInstanceHandler: tenant_provisioning_service.GetTenantConnectorInstanceHandlerFunc(func(params tenant_provisioning_service.GetTenantConnectorInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetTenantConnectorInstance has not yet been implemented")
		}),
		TenantProvisioningServiceGetTenantDomainHandler: tenant_provisioning_service.GetTenantDomainHandlerFunc(func(params tenant_provisioning_service.GetTenantDomainParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetTenantDomain has not yet been implemented")
		}),
		AdminProvisioningServiceGetTenantIDByAliasHandler: admin_provisioning_service.GetTenantIDByAliasHandlerFunc(func(params admin_provisioning_service.GetTenantIDByAliasParams) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceGetTenantIDByAlias has not yet been implemented")
		}),
		AdminProvisioningServiceV2GetTenantIDByAliasV2Handler: admin_provisioning_service_v2.GetTenantIDByAliasV2HandlerFunc(func(params admin_provisioning_service_v2.GetTenantIDByAliasV2Params) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceV2GetTenantIDByAliasV2 has not yet been implemented")
		}),
		TenantProvisioningServiceGetTenantIngestionProfileHandler: tenant_provisioning_service.GetTenantIngestionProfileHandlerFunc(func(params tenant_provisioning_service.GetTenantIngestionProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetTenantIngestionProfile has not yet been implemented")
		}),
		TenantProvisioningServiceGetTenantMetadataHandler: tenant_provisioning_service.GetTenantMetadataHandlerFunc(func(params tenant_provisioning_service.GetTenantMetadataParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetTenantMetadata has not yet been implemented")
		}),
		TenantProvisioningServiceGetTenantMonitoredObjectHandler: tenant_provisioning_service.GetTenantMonitoredObjectHandlerFunc(func(params tenant_provisioning_service.GetTenantMonitoredObjectParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetTenantMonitoredObject has not yet been implemented")
		}),
		AdminProvisioningServiceGetTenantSummaryByAliasHandler: admin_provisioning_service.GetTenantSummaryByAliasHandlerFunc(func(params admin_provisioning_service.GetTenantSummaryByAliasParams) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceGetTenantSummaryByAlias has not yet been implemented")
		}),
		AdminProvisioningServiceV2GetTenantSummaryByAliasV2Handler: admin_provisioning_service_v2.GetTenantSummaryByAliasV2HandlerFunc(func(params admin_provisioning_service_v2.GetTenantSummaryByAliasV2Params) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceV2GetTenantSummaryByAliasV2 has not yet been implemented")
		}),
		TenantProvisioningServiceGetTenantThresholdProfileHandler: tenant_provisioning_service.GetTenantThresholdProfileHandlerFunc(func(params tenant_provisioning_service.GetTenantThresholdProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceGetTenantThresholdProfile has not yet been implemented")
		}),
		AdminProvisioningServiceV2GetTenantV2Handler: admin_provisioning_service_v2.GetTenantV2HandlerFunc(func(params admin_provisioning_service_v2.GetTenantV2Params) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceV2GetTenantV2 has not yet been implemented")
		}),
		MetricsServiceGetThresholdCrossingByMonitoredObjectTopNHandler: metrics_service.GetThresholdCrossingByMonitoredObjectTopNHandlerFunc(func(params metrics_service.GetThresholdCrossingByMonitoredObjectTopNParams) middleware.Responder {
			return middleware.NotImplemented("operation MetricsServiceGetThresholdCrossingByMonitoredObjectTopN has not yet been implemented")
		}),
		TenantProvisioningServiceV2GetThresholdProfileV2Handler: tenant_provisioning_service_v2.GetThresholdProfileV2HandlerFunc(func(params tenant_provisioning_service_v2.GetThresholdProfileV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2GetThresholdProfileV2 has not yet been implemented")
		}),
		MetricsServiceGetTopNForMetricHandler: metrics_service.GetTopNForMetricHandlerFunc(func(params metrics_service.GetTopNForMetricParams) middleware.Responder {
			return middleware.NotImplemented("operation MetricsServiceGetTopNForMetric has not yet been implemented")
		}),
		AdminProvisioningServiceGetValidTypesHandler: admin_provisioning_service.GetValidTypesHandlerFunc(func(params admin_provisioning_service.GetValidTypesParams) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceGetValidTypes has not yet been implemented")
		}),
		AdminProvisioningServiceV2GetValidTypesV2Handler: admin_provisioning_service_v2.GetValidTypesV2HandlerFunc(func(params admin_provisioning_service_v2.GetValidTypesV2Params) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceV2GetValidTypesV2 has not yet been implemented")
		}),
		AdminProvisioningServicePatchTenantHandler: admin_provisioning_service.PatchTenantHandlerFunc(func(params admin_provisioning_service.PatchTenantParams) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServicePatchTenant has not yet been implemented")
		}),
		TenantProvisioningServicePatchTenantDomainHandler: tenant_provisioning_service.PatchTenantDomainHandlerFunc(func(params tenant_provisioning_service.PatchTenantDomainParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServicePatchTenantDomain has not yet been implemented")
		}),
		TenantProvisioningServicePatchTenantIngestionProfileHandler: tenant_provisioning_service.PatchTenantIngestionProfileHandlerFunc(func(params tenant_provisioning_service.PatchTenantIngestionProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServicePatchTenantIngestionProfile has not yet been implemented")
		}),
		TenantProvisioningServicePatchTenantMetadataHandler: tenant_provisioning_service.PatchTenantMetadataHandlerFunc(func(params tenant_provisioning_service.PatchTenantMetadataParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServicePatchTenantMetadata has not yet been implemented")
		}),
		TenantProvisioningServicePatchTenantMonitoredObjectHandler: tenant_provisioning_service.PatchTenantMonitoredObjectHandlerFunc(func(params tenant_provisioning_service.PatchTenantMonitoredObjectParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServicePatchTenantMonitoredObject has not yet been implemented")
		}),
		TenantProvisioningServicePatchTenantThresholdProfileHandler: tenant_provisioning_service.PatchTenantThresholdProfileHandlerFunc(func(params tenant_provisioning_service.PatchTenantThresholdProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServicePatchTenantThresholdProfile has not yet been implemented")
		}),
		AdminProvisioningServiceV2PatchTenantV2Handler: admin_provisioning_service_v2.PatchTenantV2HandlerFunc(func(params admin_provisioning_service_v2.PatchTenantV2Params) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceV2PatchTenantV2 has not yet been implemented")
		}),
		MetricsServiceQueryAggregatedMetricsHandler: metrics_service.QueryAggregatedMetricsHandlerFunc(func(params metrics_service.QueryAggregatedMetricsParams) middleware.Responder {
			return middleware.NotImplemented("operation MetricsServiceQueryAggregatedMetrics has not yet been implemented")
		}),
		MetricsServiceQueryThresholdCrossingHandler: metrics_service.QueryThresholdCrossingHandlerFunc(func(params metrics_service.QueryThresholdCrossingParams) middleware.Responder {
			return middleware.NotImplemented("operation MetricsServiceQueryThresholdCrossing has not yet been implemented")
		}),
		TenantProvisioningServiceV2UpdateCardV2Handler: tenant_provisioning_service_v2.UpdateCardV2HandlerFunc(func(params tenant_provisioning_service_v2.UpdateCardV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2UpdateCardV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2UpdateConnectorConfigV2Handler: tenant_provisioning_service_v2.UpdateConnectorConfigV2HandlerFunc(func(params tenant_provisioning_service_v2.UpdateConnectorConfigV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2UpdateConnectorConfigV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2UpdateConnectorInstanceV2Handler: tenant_provisioning_service_v2.UpdateConnectorInstanceV2HandlerFunc(func(params tenant_provisioning_service_v2.UpdateConnectorInstanceV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2UpdateConnectorInstanceV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2UpdateDashboardV2Handler: tenant_provisioning_service_v2.UpdateDashboardV2HandlerFunc(func(params tenant_provisioning_service_v2.UpdateDashboardV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2UpdateDashboardV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2UpdateDataCleaningProfileHandler: tenant_provisioning_service_v2.UpdateDataCleaningProfileHandlerFunc(func(params tenant_provisioning_service_v2.UpdateDataCleaningProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2UpdateDataCleaningProfile has not yet been implemented")
		}),
		TenantProvisioningServiceV2UpdateIngestionProfileV2Handler: tenant_provisioning_service_v2.UpdateIngestionProfileV2HandlerFunc(func(params tenant_provisioning_service_v2.UpdateIngestionProfileV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2UpdateIngestionProfileV2 has not yet been implemented")
		}),
		TenantProvisioningServiceV2UpdateMonitoredObjectV2Handler: tenant_provisioning_service_v2.UpdateMonitoredObjectV2HandlerFunc(func(params tenant_provisioning_service_v2.UpdateMonitoredObjectV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2UpdateMonitoredObjectV2 has not yet been implemented")
		}),
		TenantProvisioningServiceUpdateReportScheduleConfigHandler: tenant_provisioning_service.UpdateReportScheduleConfigHandlerFunc(func(params tenant_provisioning_service.UpdateReportScheduleConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceUpdateReportScheduleConfig has not yet been implemented")
		}),
		TenantProvisioningServiceV2UpdateReportScheduleConfigV2Handler: tenant_provisioning_service_v2.UpdateReportScheduleConfigV2HandlerFunc(func(params tenant_provisioning_service_v2.UpdateReportScheduleConfigV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2UpdateReportScheduleConfigV2 has not yet been implemented")
		}),
		AdminProvisioningServiceUpdateTenantHandler: admin_provisioning_service.UpdateTenantHandlerFunc(func(params admin_provisioning_service.UpdateTenantParams) middleware.Responder {
			return middleware.NotImplemented("operation AdminProvisioningServiceUpdateTenant has not yet been implemented")
		}),
		TenantProvisioningServiceUpdateTenantConnectorConfigHandler: tenant_provisioning_service.UpdateTenantConnectorConfigHandlerFunc(func(params tenant_provisioning_service.UpdateTenantConnectorConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceUpdateTenantConnectorConfig has not yet been implemented")
		}),
		TenantProvisioningServiceUpdateTenantConnectorInstanceHandler: tenant_provisioning_service.UpdateTenantConnectorInstanceHandlerFunc(func(params tenant_provisioning_service.UpdateTenantConnectorInstanceParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceUpdateTenantConnectorInstance has not yet been implemented")
		}),
		TenantProvisioningServiceUpdateTenantDomainHandler: tenant_provisioning_service.UpdateTenantDomainHandlerFunc(func(params tenant_provisioning_service.UpdateTenantDomainParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceUpdateTenantDomain has not yet been implemented")
		}),
		TenantProvisioningServiceUpdateTenantIngestionProfileHandler: tenant_provisioning_service.UpdateTenantIngestionProfileHandlerFunc(func(params tenant_provisioning_service.UpdateTenantIngestionProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceUpdateTenantIngestionProfile has not yet been implemented")
		}),
		TenantProvisioningServiceUpdateTenantMetadataHandler: tenant_provisioning_service.UpdateTenantMetadataHandlerFunc(func(params tenant_provisioning_service.UpdateTenantMetadataParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceUpdateTenantMetadata has not yet been implemented")
		}),
		TenantProvisioningServiceUpdateTenantMonitoredObjectHandler: tenant_provisioning_service.UpdateTenantMonitoredObjectHandlerFunc(func(params tenant_provisioning_service.UpdateTenantMonitoredObjectParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceUpdateTenantMonitoredObject has not yet been implemented")
		}),
		TenantProvisioningServiceUpdateTenantThresholdProfileHandler: tenant_provisioning_service.UpdateTenantThresholdProfileHandlerFunc(func(params tenant_provisioning_service.UpdateTenantThresholdProfileParams) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceUpdateTenantThresholdProfile has not yet been implemented")
		}),
		TenantProvisioningServiceV2UpdateThresholdProfileV2Handler: tenant_provisioning_service_v2.UpdateThresholdProfileV2HandlerFunc(func(params tenant_provisioning_service_v2.UpdateThresholdProfileV2Params) middleware.Responder {
			return middleware.NotImplemented("operation TenantProvisioningServiceV2UpdateThresholdProfileV2 has not yet been implemented")
		}),
	}
}

/*GatherAPI Gather API Documentation */
type GatherAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/vnd.api+json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer
	// TxtProducer registers a producer for a "text/plain" mime type
	TxtProducer runtime.Producer

	// TenantProvisioningServiceBulkInsertMonitoredObjectHandler sets the operation handler for the bulk insert monitored object operation
	TenantProvisioningServiceBulkInsertMonitoredObjectHandler tenant_provisioning_service.BulkInsertMonitoredObjectHandler
	// TenantProvisioningServiceV2BulkInsertMonitoredObjectsV2Handler sets the operation handler for the bulk insert monitored objects v2 operation
	TenantProvisioningServiceV2BulkInsertMonitoredObjectsV2Handler tenant_provisioning_service_v2.BulkInsertMonitoredObjectsV2Handler
	// TenantProvisioningServiceBulkUpdateMonitoredObjectHandler sets the operation handler for the bulk update monitored object operation
	TenantProvisioningServiceBulkUpdateMonitoredObjectHandler tenant_provisioning_service.BulkUpdateMonitoredObjectHandler
	// TenantProvisioningServiceV2BulkUpdateMonitoredObjectsV2Handler sets the operation handler for the bulk update monitored objects v2 operation
	TenantProvisioningServiceV2BulkUpdateMonitoredObjectsV2Handler tenant_provisioning_service_v2.BulkUpdateMonitoredObjectsV2Handler
	// TenantProvisioningServiceBulkUpsertMonitoredObjectMetaHandler sets the operation handler for the bulk upsert monitored object meta operation
	TenantProvisioningServiceBulkUpsertMonitoredObjectMetaHandler tenant_provisioning_service.BulkUpsertMonitoredObjectMetaHandler
	// TenantProvisioningServiceV2CreateCardV2Handler sets the operation handler for the create card v2 operation
	TenantProvisioningServiceV2CreateCardV2Handler tenant_provisioning_service_v2.CreateCardV2Handler
	// TenantProvisioningServiceV2CreateConnectorConfigV2Handler sets the operation handler for the create connector config v2 operation
	TenantProvisioningServiceV2CreateConnectorConfigV2Handler tenant_provisioning_service_v2.CreateConnectorConfigV2Handler
	// TenantProvisioningServiceV2CreateConnectorInstanceV2Handler sets the operation handler for the create connector instance v2 operation
	TenantProvisioningServiceV2CreateConnectorInstanceV2Handler tenant_provisioning_service_v2.CreateConnectorInstanceV2Handler
	// TenantProvisioningServiceV2CreateDashboardV2Handler sets the operation handler for the create dashboard v2 operation
	TenantProvisioningServiceV2CreateDashboardV2Handler tenant_provisioning_service_v2.CreateDashboardV2Handler
	// TenantProvisioningServiceV2CreateDataCleaningProfileHandler sets the operation handler for the create data cleaning profile operation
	TenantProvisioningServiceV2CreateDataCleaningProfileHandler tenant_provisioning_service_v2.CreateDataCleaningProfileHandler
	// TenantProvisioningServiceV2CreateIngestionProfileV2Handler sets the operation handler for the create ingestion profile v2 operation
	TenantProvisioningServiceV2CreateIngestionProfileV2Handler tenant_provisioning_service_v2.CreateIngestionProfileV2Handler
	// TenantProvisioningServiceV2CreateMonitoredObjectV2Handler sets the operation handler for the create monitored object v2 operation
	TenantProvisioningServiceV2CreateMonitoredObjectV2Handler tenant_provisioning_service_v2.CreateMonitoredObjectV2Handler
	// TenantProvisioningServiceCreateReportScheduleConfigHandler sets the operation handler for the create report schedule config operation
	TenantProvisioningServiceCreateReportScheduleConfigHandler tenant_provisioning_service.CreateReportScheduleConfigHandler
	// TenantProvisioningServiceV2CreateReportScheduleConfigV2Handler sets the operation handler for the create report schedule config v2 operation
	TenantProvisioningServiceV2CreateReportScheduleConfigV2Handler tenant_provisioning_service_v2.CreateReportScheduleConfigV2Handler
	// AdminProvisioningServiceCreateTenantHandler sets the operation handler for the create tenant operation
	AdminProvisioningServiceCreateTenantHandler admin_provisioning_service.CreateTenantHandler
	// TenantProvisioningServiceCreateTenantConnectorConfigHandler sets the operation handler for the create tenant connector config operation
	TenantProvisioningServiceCreateTenantConnectorConfigHandler tenant_provisioning_service.CreateTenantConnectorConfigHandler
	// TenantProvisioningServiceCreateTenantConnectorInstanceHandler sets the operation handler for the create tenant connector instance operation
	TenantProvisioningServiceCreateTenantConnectorInstanceHandler tenant_provisioning_service.CreateTenantConnectorInstanceHandler
	// TenantProvisioningServiceCreateTenantDomainHandler sets the operation handler for the create tenant domain operation
	TenantProvisioningServiceCreateTenantDomainHandler tenant_provisioning_service.CreateTenantDomainHandler
	// TenantProvisioningServiceCreateTenantIngestionProfileHandler sets the operation handler for the create tenant ingestion profile operation
	TenantProvisioningServiceCreateTenantIngestionProfileHandler tenant_provisioning_service.CreateTenantIngestionProfileHandler
	// TenantProvisioningServiceCreateTenantMetadataHandler sets the operation handler for the create tenant metadata operation
	TenantProvisioningServiceCreateTenantMetadataHandler tenant_provisioning_service.CreateTenantMetadataHandler
	// TenantProvisioningServiceCreateTenantMonitoredObjectHandler sets the operation handler for the create tenant monitored object operation
	TenantProvisioningServiceCreateTenantMonitoredObjectHandler tenant_provisioning_service.CreateTenantMonitoredObjectHandler
	// TenantProvisioningServiceCreateTenantThresholdProfileHandler sets the operation handler for the create tenant threshold profile operation
	TenantProvisioningServiceCreateTenantThresholdProfileHandler tenant_provisioning_service.CreateTenantThresholdProfileHandler
	// AdminProvisioningServiceV2CreateTenantV2Handler sets the operation handler for the create tenant v2 operation
	AdminProvisioningServiceV2CreateTenantV2Handler admin_provisioning_service_v2.CreateTenantV2Handler
	// TenantProvisioningServiceV2CreateThresholdProfileV2Handler sets the operation handler for the create threshold profile v2 operation
	TenantProvisioningServiceV2CreateThresholdProfileV2Handler tenant_provisioning_service_v2.CreateThresholdProfileV2Handler
	// TenantProvisioningServiceV2DeleteCardV2Handler sets the operation handler for the delete card v2 operation
	TenantProvisioningServiceV2DeleteCardV2Handler tenant_provisioning_service_v2.DeleteCardV2Handler
	// TenantProvisioningServiceV2DeleteConnectorConfigV2Handler sets the operation handler for the delete connector config v2 operation
	TenantProvisioningServiceV2DeleteConnectorConfigV2Handler tenant_provisioning_service_v2.DeleteConnectorConfigV2Handler
	// TenantProvisioningServiceV2DeleteConnectorInstanceV2Handler sets the operation handler for the delete connector instance v2 operation
	TenantProvisioningServiceV2DeleteConnectorInstanceV2Handler tenant_provisioning_service_v2.DeleteConnectorInstanceV2Handler
	// TenantProvisioningServiceV2DeleteDashboardV2Handler sets the operation handler for the delete dashboard v2 operation
	TenantProvisioningServiceV2DeleteDashboardV2Handler tenant_provisioning_service_v2.DeleteDashboardV2Handler
	// TenantProvisioningServiceV2DeleteDataCleaningProfileHandler sets the operation handler for the delete data cleaning profile operation
	TenantProvisioningServiceV2DeleteDataCleaningProfileHandler tenant_provisioning_service_v2.DeleteDataCleaningProfileHandler
	// TenantProvisioningServiceV2DeleteIngestionProfileV2Handler sets the operation handler for the delete ingestion profile v2 operation
	TenantProvisioningServiceV2DeleteIngestionProfileV2Handler tenant_provisioning_service_v2.DeleteIngestionProfileV2Handler
	// TenantProvisioningServiceV2DeleteMonitoredObjectV2Handler sets the operation handler for the delete monitored object v2 operation
	TenantProvisioningServiceV2DeleteMonitoredObjectV2Handler tenant_provisioning_service_v2.DeleteMonitoredObjectV2Handler
	// TenantProvisioningServiceDeleteReportScheduleConfigHandler sets the operation handler for the delete report schedule config operation
	TenantProvisioningServiceDeleteReportScheduleConfigHandler tenant_provisioning_service.DeleteReportScheduleConfigHandler
	// TenantProvisioningServiceV2DeleteReportScheduleConfigV2Handler sets the operation handler for the delete report schedule config v2 operation
	TenantProvisioningServiceV2DeleteReportScheduleConfigV2Handler tenant_provisioning_service_v2.DeleteReportScheduleConfigV2Handler
	// AdminProvisioningServiceDeleteTenantHandler sets the operation handler for the delete tenant operation
	AdminProvisioningServiceDeleteTenantHandler admin_provisioning_service.DeleteTenantHandler
	// TenantProvisioningServiceDeleteTenantConnectorConfigHandler sets the operation handler for the delete tenant connector config operation
	TenantProvisioningServiceDeleteTenantConnectorConfigHandler tenant_provisioning_service.DeleteTenantConnectorConfigHandler
	// TenantProvisioningServiceDeleteTenantConnectorInstanceHandler sets the operation handler for the delete tenant connector instance operation
	TenantProvisioningServiceDeleteTenantConnectorInstanceHandler tenant_provisioning_service.DeleteTenantConnectorInstanceHandler
	// TenantProvisioningServiceDeleteTenantDomainHandler sets the operation handler for the delete tenant domain operation
	TenantProvisioningServiceDeleteTenantDomainHandler tenant_provisioning_service.DeleteTenantDomainHandler
	// TenantProvisioningServiceDeleteTenantIngestionProfileHandler sets the operation handler for the delete tenant ingestion profile operation
	TenantProvisioningServiceDeleteTenantIngestionProfileHandler tenant_provisioning_service.DeleteTenantIngestionProfileHandler
	// TenantProvisioningServiceDeleteTenantMetadataHandler sets the operation handler for the delete tenant metadata operation
	TenantProvisioningServiceDeleteTenantMetadataHandler tenant_provisioning_service.DeleteTenantMetadataHandler
	// TenantProvisioningServiceDeleteTenantMonitoredObjectHandler sets the operation handler for the delete tenant monitored object operation
	TenantProvisioningServiceDeleteTenantMonitoredObjectHandler tenant_provisioning_service.DeleteTenantMonitoredObjectHandler
	// TenantProvisioningServiceDeleteTenantThresholdProfileHandler sets the operation handler for the delete tenant threshold profile operation
	TenantProvisioningServiceDeleteTenantThresholdProfileHandler tenant_provisioning_service.DeleteTenantThresholdProfileHandler
	// AdminProvisioningServiceV2DeleteTenantV2Handler sets the operation handler for the delete tenant v2 operation
	AdminProvisioningServiceV2DeleteTenantV2Handler admin_provisioning_service_v2.DeleteTenantV2Handler
	// TenantProvisioningServiceV2DeleteThresholdProfileV2Handler sets the operation handler for the delete threshold profile v2 operation
	TenantProvisioningServiceV2DeleteThresholdProfileV2Handler tenant_provisioning_service_v2.DeleteThresholdProfileV2Handler
	// MetricsServiceGenSLAReportHandler sets the operation handler for the gen SLA report operation
	MetricsServiceGenSLAReportHandler metrics_service.GenSLAReportHandler
	// TenantProvisioningServiceGetActiveTenantIngestionProfileHandler sets the operation handler for the get active tenant ingestion profile operation
	TenantProvisioningServiceGetActiveTenantIngestionProfileHandler tenant_provisioning_service.GetActiveTenantIngestionProfileHandler
	// TenantProvisioningServiceV2GetAllCardsV2Handler sets the operation handler for the get all cards v2 operation
	TenantProvisioningServiceV2GetAllCardsV2Handler tenant_provisioning_service_v2.GetAllCardsV2Handler
	// TenantProvisioningServiceV2GetAllConnectorConfigsV2Handler sets the operation handler for the get all connector configs v2 operation
	TenantProvisioningServiceV2GetAllConnectorConfigsV2Handler tenant_provisioning_service_v2.GetAllConnectorConfigsV2Handler
	// TenantProvisioningServiceV2GetAllConnectorInstancesV2Handler sets the operation handler for the get all connector instances v2 operation
	TenantProvisioningServiceV2GetAllConnectorInstancesV2Handler tenant_provisioning_service_v2.GetAllConnectorInstancesV2Handler
	// TenantProvisioningServiceV2GetAllDashboardsV2Handler sets the operation handler for the get all dashboards v2 operation
	TenantProvisioningServiceV2GetAllDashboardsV2Handler tenant_provisioning_service_v2.GetAllDashboardsV2Handler
	// TenantProvisioningServiceV2GetAllIngestionProfilesV2Handler sets the operation handler for the get all ingestion profiles v2 operation
	TenantProvisioningServiceV2GetAllIngestionProfilesV2Handler tenant_provisioning_service_v2.GetAllIngestionProfilesV2Handler
	// TenantProvisioningServiceV2GetAllMonitoredObjectsV2Handler sets the operation handler for the get all monitored objects v2 operation
	TenantProvisioningServiceV2GetAllMonitoredObjectsV2Handler tenant_provisioning_service_v2.GetAllMonitoredObjectsV2Handler
	// TenantProvisioningServiceGetAllReportScheduleConfigHandler sets the operation handler for the get all report schedule config operation
	TenantProvisioningServiceGetAllReportScheduleConfigHandler tenant_provisioning_service.GetAllReportScheduleConfigHandler
	// TenantProvisioningServiceV2GetAllReportScheduleConfigsV2Handler sets the operation handler for the get all report schedule configs v2 operation
	TenantProvisioningServiceV2GetAllReportScheduleConfigsV2Handler tenant_provisioning_service_v2.GetAllReportScheduleConfigsV2Handler
	// TenantProvisioningServiceGetAllSLAReportsHandler sets the operation handler for the get all SLA reports operation
	TenantProvisioningServiceGetAllSLAReportsHandler tenant_provisioning_service.GetAllSLAReportsHandler
	// TenantProvisioningServiceV2GetAllSLAReportsV2Handler sets the operation handler for the get all SLA reports v2 operation
	TenantProvisioningServiceV2GetAllSLAReportsV2Handler tenant_provisioning_service_v2.GetAllSLAReportsV2Handler
	// TenantProvisioningServiceGetAllTenantConnectorConfigsHandler sets the operation handler for the get all tenant connector configs operation
	TenantProvisioningServiceGetAllTenantConnectorConfigsHandler tenant_provisioning_service.GetAllTenantConnectorConfigsHandler
	// TenantProvisioningServiceGetAllTenantConnectorInstancesHandler sets the operation handler for the get all tenant connector instances operation
	TenantProvisioningServiceGetAllTenantConnectorInstancesHandler tenant_provisioning_service.GetAllTenantConnectorInstancesHandler
	// TenantProvisioningServiceGetAllTenantDomainsHandler sets the operation handler for the get all tenant domains operation
	TenantProvisioningServiceGetAllTenantDomainsHandler tenant_provisioning_service.GetAllTenantDomainsHandler
	// TenantProvisioningServiceGetAllTenantMonitoredObjectsHandler sets the operation handler for the get all tenant monitored objects operation
	TenantProvisioningServiceGetAllTenantMonitoredObjectsHandler tenant_provisioning_service.GetAllTenantMonitoredObjectsHandler
	// TenantProvisioningServiceGetAllTenantThresholdProfilesHandler sets the operation handler for the get all tenant threshold profiles operation
	TenantProvisioningServiceGetAllTenantThresholdProfilesHandler tenant_provisioning_service.GetAllTenantThresholdProfilesHandler
	// AdminProvisioningServiceGetAllTenantsHandler sets the operation handler for the get all tenants operation
	AdminProvisioningServiceGetAllTenantsHandler admin_provisioning_service.GetAllTenantsHandler
	// AdminProvisioningServiceV2GetAllTenantsV2Handler sets the operation handler for the get all tenants v2 operation
	AdminProvisioningServiceV2GetAllTenantsV2Handler admin_provisioning_service_v2.GetAllTenantsV2Handler
	// TenantProvisioningServiceV2GetAllThresholdProfilesV2Handler sets the operation handler for the get all threshold profiles v2 operation
	TenantProvisioningServiceV2GetAllThresholdProfilesV2Handler tenant_provisioning_service_v2.GetAllThresholdProfilesV2Handler
	// TenantProvisioningServiceV2GetCardV2Handler sets the operation handler for the get card v2 operation
	TenantProvisioningServiceV2GetCardV2Handler tenant_provisioning_service_v2.GetCardV2Handler
	// TenantProvisioningServiceV2GetConnectorConfigV2Handler sets the operation handler for the get connector config v2 operation
	TenantProvisioningServiceV2GetConnectorConfigV2Handler tenant_provisioning_service_v2.GetConnectorConfigV2Handler
	// TenantProvisioningServiceV2GetConnectorInstanceV2Handler sets the operation handler for the get connector instance v2 operation
	TenantProvisioningServiceV2GetConnectorInstanceV2Handler tenant_provisioning_service_v2.GetConnectorInstanceV2Handler
	// TenantProvisioningServiceV2GetDashboardV2Handler sets the operation handler for the get dashboard v2 operation
	TenantProvisioningServiceV2GetDashboardV2Handler tenant_provisioning_service_v2.GetDashboardV2Handler
	// TenantProvisioningServiceV2GetDataCleaningProfileHandler sets the operation handler for the get data cleaning profile operation
	TenantProvisioningServiceV2GetDataCleaningProfileHandler tenant_provisioning_service_v2.GetDataCleaningProfileHandler
	// TenantProvisioningServiceV2GetDataCleaningProfilesHandler sets the operation handler for the get data cleaning profiles operation
	TenantProvisioningServiceV2GetDataCleaningProfilesHandler tenant_provisioning_service_v2.GetDataCleaningProfilesHandler
	// TenantProvisioningServiceGetDomainToMonitoredObjectMapHandler sets the operation handler for the get domain to monitored object map operation
	TenantProvisioningServiceGetDomainToMonitoredObjectMapHandler tenant_provisioning_service.GetDomainToMonitoredObjectMapHandler
	// MetricsServiceGetFilteredRawMetricsHandler sets the operation handler for the get filtered raw metrics operation
	MetricsServiceGetFilteredRawMetricsHandler metrics_service.GetFilteredRawMetricsHandler
	// MetricsServiceGetHistogramHandler sets the operation handler for the get histogram operation
	MetricsServiceGetHistogramHandler metrics_service.GetHistogramHandler
	// AdminProvisioningServiceGetIngestionDictionaryHandler sets the operation handler for the get ingestion dictionary operation
	AdminProvisioningServiceGetIngestionDictionaryHandler admin_provisioning_service.GetIngestionDictionaryHandler
	// AdminProvisioningServiceV2GetIngestionDictionaryV2Handler sets the operation handler for the get ingestion dictionary v2 operation
	AdminProvisioningServiceV2GetIngestionDictionaryV2Handler admin_provisioning_service_v2.GetIngestionDictionaryV2Handler
	// TenantProvisioningServiceV2GetIngestionProfileV2Handler sets the operation handler for the get ingestion profile v2 operation
	TenantProvisioningServiceV2GetIngestionProfileV2Handler tenant_provisioning_service_v2.GetIngestionProfileV2Handler
	// TenantProvisioningServiceV2GetMonitoredObjectV2Handler sets the operation handler for the get monitored object v2 operation
	TenantProvisioningServiceV2GetMonitoredObjectV2Handler tenant_provisioning_service_v2.GetMonitoredObjectV2Handler
	// MetricsServiceGetRawMetricsHandler sets the operation handler for the get raw metrics operation
	MetricsServiceGetRawMetricsHandler metrics_service.GetRawMetricsHandler
	// TenantProvisioningServiceGetReportScheduleConfigHandler sets the operation handler for the get report schedule config operation
	TenantProvisioningServiceGetReportScheduleConfigHandler tenant_provisioning_service.GetReportScheduleConfigHandler
	// TenantProvisioningServiceV2GetReportScheduleConfigV2Handler sets the operation handler for the get report schedule config v2 operation
	TenantProvisioningServiceV2GetReportScheduleConfigV2Handler tenant_provisioning_service_v2.GetReportScheduleConfigV2Handler
	// TenantProvisioningServiceGetSLAReportHandler sets the operation handler for the get SLA report operation
	TenantProvisioningServiceGetSLAReportHandler tenant_provisioning_service.GetSLAReportHandler
	// TenantProvisioningServiceV2GetSLAReportV2Handler sets the operation handler for the get SLA report v2 operation
	TenantProvisioningServiceV2GetSLAReportV2Handler tenant_provisioning_service_v2.GetSLAReportV2Handler
	// AdminProvisioningServiceGetTenantHandler sets the operation handler for the get tenant operation
	AdminProvisioningServiceGetTenantHandler admin_provisioning_service.GetTenantHandler
	// TenantProvisioningServiceGetTenantConnectorConfigHandler sets the operation handler for the get tenant connector config operation
	TenantProvisioningServiceGetTenantConnectorConfigHandler tenant_provisioning_service.GetTenantConnectorConfigHandler
	// TenantProvisioningServiceGetTenantConnectorInstanceHandler sets the operation handler for the get tenant connector instance operation
	TenantProvisioningServiceGetTenantConnectorInstanceHandler tenant_provisioning_service.GetTenantConnectorInstanceHandler
	// TenantProvisioningServiceGetTenantDomainHandler sets the operation handler for the get tenant domain operation
	TenantProvisioningServiceGetTenantDomainHandler tenant_provisioning_service.GetTenantDomainHandler
	// AdminProvisioningServiceGetTenantIDByAliasHandler sets the operation handler for the get tenant Id by alias operation
	AdminProvisioningServiceGetTenantIDByAliasHandler admin_provisioning_service.GetTenantIDByAliasHandler
	// AdminProvisioningServiceV2GetTenantIDByAliasV2Handler sets the operation handler for the get tenant Id by alias v2 operation
	AdminProvisioningServiceV2GetTenantIDByAliasV2Handler admin_provisioning_service_v2.GetTenantIDByAliasV2Handler
	// TenantProvisioningServiceGetTenantIngestionProfileHandler sets the operation handler for the get tenant ingestion profile operation
	TenantProvisioningServiceGetTenantIngestionProfileHandler tenant_provisioning_service.GetTenantIngestionProfileHandler
	// TenantProvisioningServiceGetTenantMetadataHandler sets the operation handler for the get tenant metadata operation
	TenantProvisioningServiceGetTenantMetadataHandler tenant_provisioning_service.GetTenantMetadataHandler
	// TenantProvisioningServiceGetTenantMonitoredObjectHandler sets the operation handler for the get tenant monitored object operation
	TenantProvisioningServiceGetTenantMonitoredObjectHandler tenant_provisioning_service.GetTenantMonitoredObjectHandler
	// AdminProvisioningServiceGetTenantSummaryByAliasHandler sets the operation handler for the get tenant summary by alias operation
	AdminProvisioningServiceGetTenantSummaryByAliasHandler admin_provisioning_service.GetTenantSummaryByAliasHandler
	// AdminProvisioningServiceV2GetTenantSummaryByAliasV2Handler sets the operation handler for the get tenant summary by alias v2 operation
	AdminProvisioningServiceV2GetTenantSummaryByAliasV2Handler admin_provisioning_service_v2.GetTenantSummaryByAliasV2Handler
	// TenantProvisioningServiceGetTenantThresholdProfileHandler sets the operation handler for the get tenant threshold profile operation
	TenantProvisioningServiceGetTenantThresholdProfileHandler tenant_provisioning_service.GetTenantThresholdProfileHandler
	// AdminProvisioningServiceV2GetTenantV2Handler sets the operation handler for the get tenant v2 operation
	AdminProvisioningServiceV2GetTenantV2Handler admin_provisioning_service_v2.GetTenantV2Handler
	// MetricsServiceGetThresholdCrossingByMonitoredObjectTopNHandler sets the operation handler for the get threshold crossing by monitored object top n operation
	MetricsServiceGetThresholdCrossingByMonitoredObjectTopNHandler metrics_service.GetThresholdCrossingByMonitoredObjectTopNHandler
	// TenantProvisioningServiceV2GetThresholdProfileV2Handler sets the operation handler for the get threshold profile v2 operation
	TenantProvisioningServiceV2GetThresholdProfileV2Handler tenant_provisioning_service_v2.GetThresholdProfileV2Handler
	// MetricsServiceGetTopNForMetricHandler sets the operation handler for the get top n for metric operation
	MetricsServiceGetTopNForMetricHandler metrics_service.GetTopNForMetricHandler
	// AdminProvisioningServiceGetValidTypesHandler sets the operation handler for the get valid types operation
	AdminProvisioningServiceGetValidTypesHandler admin_provisioning_service.GetValidTypesHandler
	// AdminProvisioningServiceV2GetValidTypesV2Handler sets the operation handler for the get valid types v2 operation
	AdminProvisioningServiceV2GetValidTypesV2Handler admin_provisioning_service_v2.GetValidTypesV2Handler
	// AdminProvisioningServicePatchTenantHandler sets the operation handler for the patch tenant operation
	AdminProvisioningServicePatchTenantHandler admin_provisioning_service.PatchTenantHandler
	// TenantProvisioningServicePatchTenantDomainHandler sets the operation handler for the patch tenant domain operation
	TenantProvisioningServicePatchTenantDomainHandler tenant_provisioning_service.PatchTenantDomainHandler
	// TenantProvisioningServicePatchTenantIngestionProfileHandler sets the operation handler for the patch tenant ingestion profile operation
	TenantProvisioningServicePatchTenantIngestionProfileHandler tenant_provisioning_service.PatchTenantIngestionProfileHandler
	// TenantProvisioningServicePatchTenantMetadataHandler sets the operation handler for the patch tenant metadata operation
	TenantProvisioningServicePatchTenantMetadataHandler tenant_provisioning_service.PatchTenantMetadataHandler
	// TenantProvisioningServicePatchTenantMonitoredObjectHandler sets the operation handler for the patch tenant monitored object operation
	TenantProvisioningServicePatchTenantMonitoredObjectHandler tenant_provisioning_service.PatchTenantMonitoredObjectHandler
	// TenantProvisioningServicePatchTenantThresholdProfileHandler sets the operation handler for the patch tenant threshold profile operation
	TenantProvisioningServicePatchTenantThresholdProfileHandler tenant_provisioning_service.PatchTenantThresholdProfileHandler
	// AdminProvisioningServiceV2PatchTenantV2Handler sets the operation handler for the patch tenant v2 operation
	AdminProvisioningServiceV2PatchTenantV2Handler admin_provisioning_service_v2.PatchTenantV2Handler
	// MetricsServiceQueryAggregatedMetricsHandler sets the operation handler for the query aggregated metrics operation
	MetricsServiceQueryAggregatedMetricsHandler metrics_service.QueryAggregatedMetricsHandler
	// MetricsServiceQueryThresholdCrossingHandler sets the operation handler for the query threshold crossing operation
	MetricsServiceQueryThresholdCrossingHandler metrics_service.QueryThresholdCrossingHandler
	// TenantProvisioningServiceV2UpdateCardV2Handler sets the operation handler for the update card v2 operation
	TenantProvisioningServiceV2UpdateCardV2Handler tenant_provisioning_service_v2.UpdateCardV2Handler
	// TenantProvisioningServiceV2UpdateConnectorConfigV2Handler sets the operation handler for the update connector config v2 operation
	TenantProvisioningServiceV2UpdateConnectorConfigV2Handler tenant_provisioning_service_v2.UpdateConnectorConfigV2Handler
	// TenantProvisioningServiceV2UpdateConnectorInstanceV2Handler sets the operation handler for the update connector instance v2 operation
	TenantProvisioningServiceV2UpdateConnectorInstanceV2Handler tenant_provisioning_service_v2.UpdateConnectorInstanceV2Handler
	// TenantProvisioningServiceV2UpdateDashboardV2Handler sets the operation handler for the update dashboard v2 operation
	TenantProvisioningServiceV2UpdateDashboardV2Handler tenant_provisioning_service_v2.UpdateDashboardV2Handler
	// TenantProvisioningServiceV2UpdateDataCleaningProfileHandler sets the operation handler for the update data cleaning profile operation
	TenantProvisioningServiceV2UpdateDataCleaningProfileHandler tenant_provisioning_service_v2.UpdateDataCleaningProfileHandler
	// TenantProvisioningServiceV2UpdateIngestionProfileV2Handler sets the operation handler for the update ingestion profile v2 operation
	TenantProvisioningServiceV2UpdateIngestionProfileV2Handler tenant_provisioning_service_v2.UpdateIngestionProfileV2Handler
	// TenantProvisioningServiceV2UpdateMonitoredObjectV2Handler sets the operation handler for the update monitored object v2 operation
	TenantProvisioningServiceV2UpdateMonitoredObjectV2Handler tenant_provisioning_service_v2.UpdateMonitoredObjectV2Handler
	// TenantProvisioningServiceUpdateReportScheduleConfigHandler sets the operation handler for the update report schedule config operation
	TenantProvisioningServiceUpdateReportScheduleConfigHandler tenant_provisioning_service.UpdateReportScheduleConfigHandler
	// TenantProvisioningServiceV2UpdateReportScheduleConfigV2Handler sets the operation handler for the update report schedule config v2 operation
	TenantProvisioningServiceV2UpdateReportScheduleConfigV2Handler tenant_provisioning_service_v2.UpdateReportScheduleConfigV2Handler
	// AdminProvisioningServiceUpdateTenantHandler sets the operation handler for the update tenant operation
	AdminProvisioningServiceUpdateTenantHandler admin_provisioning_service.UpdateTenantHandler
	// TenantProvisioningServiceUpdateTenantConnectorConfigHandler sets the operation handler for the update tenant connector config operation
	TenantProvisioningServiceUpdateTenantConnectorConfigHandler tenant_provisioning_service.UpdateTenantConnectorConfigHandler
	// TenantProvisioningServiceUpdateTenantConnectorInstanceHandler sets the operation handler for the update tenant connector instance operation
	TenantProvisioningServiceUpdateTenantConnectorInstanceHandler tenant_provisioning_service.UpdateTenantConnectorInstanceHandler
	// TenantProvisioningServiceUpdateTenantDomainHandler sets the operation handler for the update tenant domain operation
	TenantProvisioningServiceUpdateTenantDomainHandler tenant_provisioning_service.UpdateTenantDomainHandler
	// TenantProvisioningServiceUpdateTenantIngestionProfileHandler sets the operation handler for the update tenant ingestion profile operation
	TenantProvisioningServiceUpdateTenantIngestionProfileHandler tenant_provisioning_service.UpdateTenantIngestionProfileHandler
	// TenantProvisioningServiceUpdateTenantMetadataHandler sets the operation handler for the update tenant metadata operation
	TenantProvisioningServiceUpdateTenantMetadataHandler tenant_provisioning_service.UpdateTenantMetadataHandler
	// TenantProvisioningServiceUpdateTenantMonitoredObjectHandler sets the operation handler for the update tenant monitored object operation
	TenantProvisioningServiceUpdateTenantMonitoredObjectHandler tenant_provisioning_service.UpdateTenantMonitoredObjectHandler
	// TenantProvisioningServiceUpdateTenantThresholdProfileHandler sets the operation handler for the update tenant threshold profile operation
	TenantProvisioningServiceUpdateTenantThresholdProfileHandler tenant_provisioning_service.UpdateTenantThresholdProfileHandler
	// TenantProvisioningServiceV2UpdateThresholdProfileV2Handler sets the operation handler for the update threshold profile v2 operation
	TenantProvisioningServiceV2UpdateThresholdProfileV2Handler tenant_provisioning_service_v2.UpdateThresholdProfileV2Handler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *GatherAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *GatherAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *GatherAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *GatherAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *GatherAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *GatherAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *GatherAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the GatherAPI
func (o *GatherAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.TxtProducer == nil {
		unregistered = append(unregistered, "TxtProducer")
	}

	if o.TenantProvisioningServiceBulkInsertMonitoredObjectHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.BulkInsertMonitoredObjectHandler")
	}

	if o.TenantProvisioningServiceV2BulkInsertMonitoredObjectsV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.BulkInsertMonitoredObjectsV2Handler")
	}

	if o.TenantProvisioningServiceBulkUpdateMonitoredObjectHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.BulkUpdateMonitoredObjectHandler")
	}

	if o.TenantProvisioningServiceV2BulkUpdateMonitoredObjectsV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.BulkUpdateMonitoredObjectsV2Handler")
	}

	if o.TenantProvisioningServiceBulkUpsertMonitoredObjectMetaHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.BulkUpsertMonitoredObjectMetaHandler")
	}

	if o.TenantProvisioningServiceV2CreateCardV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.CreateCardV2Handler")
	}

	if o.TenantProvisioningServiceV2CreateConnectorConfigV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.CreateConnectorConfigV2Handler")
	}

	if o.TenantProvisioningServiceV2CreateConnectorInstanceV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.CreateConnectorInstanceV2Handler")
	}

	if o.TenantProvisioningServiceV2CreateDashboardV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.CreateDashboardV2Handler")
	}

	if o.TenantProvisioningServiceV2CreateDataCleaningProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.CreateDataCleaningProfileHandler")
	}

	if o.TenantProvisioningServiceV2CreateIngestionProfileV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.CreateIngestionProfileV2Handler")
	}

	if o.TenantProvisioningServiceV2CreateMonitoredObjectV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.CreateMonitoredObjectV2Handler")
	}

	if o.TenantProvisioningServiceCreateReportScheduleConfigHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.CreateReportScheduleConfigHandler")
	}

	if o.TenantProvisioningServiceV2CreateReportScheduleConfigV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.CreateReportScheduleConfigV2Handler")
	}

	if o.AdminProvisioningServiceCreateTenantHandler == nil {
		unregistered = append(unregistered, "admin_provisioning_service.CreateTenantHandler")
	}

	if o.TenantProvisioningServiceCreateTenantConnectorConfigHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.CreateTenantConnectorConfigHandler")
	}

	if o.TenantProvisioningServiceCreateTenantConnectorInstanceHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.CreateTenantConnectorInstanceHandler")
	}

	if o.TenantProvisioningServiceCreateTenantDomainHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.CreateTenantDomainHandler")
	}

	if o.TenantProvisioningServiceCreateTenantIngestionProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.CreateTenantIngestionProfileHandler")
	}

	if o.TenantProvisioningServiceCreateTenantMetadataHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.CreateTenantMetadataHandler")
	}

	if o.TenantProvisioningServiceCreateTenantMonitoredObjectHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.CreateTenantMonitoredObjectHandler")
	}

	if o.TenantProvisioningServiceCreateTenantThresholdProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.CreateTenantThresholdProfileHandler")
	}

	if o.AdminProvisioningServiceV2CreateTenantV2Handler == nil {
		unregistered = append(unregistered, "admin_provisioning_service_v2.CreateTenantV2Handler")
	}

	if o.TenantProvisioningServiceV2CreateThresholdProfileV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.CreateThresholdProfileV2Handler")
	}

	if o.TenantProvisioningServiceV2DeleteCardV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.DeleteCardV2Handler")
	}

	if o.TenantProvisioningServiceV2DeleteConnectorConfigV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.DeleteConnectorConfigV2Handler")
	}

	if o.TenantProvisioningServiceV2DeleteConnectorInstanceV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.DeleteConnectorInstanceV2Handler")
	}

	if o.TenantProvisioningServiceV2DeleteDashboardV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.DeleteDashboardV2Handler")
	}

	if o.TenantProvisioningServiceV2DeleteDataCleaningProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.DeleteDataCleaningProfileHandler")
	}

	if o.TenantProvisioningServiceV2DeleteIngestionProfileV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.DeleteIngestionProfileV2Handler")
	}

	if o.TenantProvisioningServiceV2DeleteMonitoredObjectV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.DeleteMonitoredObjectV2Handler")
	}

	if o.TenantProvisioningServiceDeleteReportScheduleConfigHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.DeleteReportScheduleConfigHandler")
	}

	if o.TenantProvisioningServiceV2DeleteReportScheduleConfigV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.DeleteReportScheduleConfigV2Handler")
	}

	if o.AdminProvisioningServiceDeleteTenantHandler == nil {
		unregistered = append(unregistered, "admin_provisioning_service.DeleteTenantHandler")
	}

	if o.TenantProvisioningServiceDeleteTenantConnectorConfigHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.DeleteTenantConnectorConfigHandler")
	}

	if o.TenantProvisioningServiceDeleteTenantConnectorInstanceHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.DeleteTenantConnectorInstanceHandler")
	}

	if o.TenantProvisioningServiceDeleteTenantDomainHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.DeleteTenantDomainHandler")
	}

	if o.TenantProvisioningServiceDeleteTenantIngestionProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.DeleteTenantIngestionProfileHandler")
	}

	if o.TenantProvisioningServiceDeleteTenantMetadataHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.DeleteTenantMetadataHandler")
	}

	if o.TenantProvisioningServiceDeleteTenantMonitoredObjectHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.DeleteTenantMonitoredObjectHandler")
	}

	if o.TenantProvisioningServiceDeleteTenantThresholdProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.DeleteTenantThresholdProfileHandler")
	}

	if o.AdminProvisioningServiceV2DeleteTenantV2Handler == nil {
		unregistered = append(unregistered, "admin_provisioning_service_v2.DeleteTenantV2Handler")
	}

	if o.TenantProvisioningServiceV2DeleteThresholdProfileV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.DeleteThresholdProfileV2Handler")
	}

	if o.MetricsServiceGenSLAReportHandler == nil {
		unregistered = append(unregistered, "metrics_service.GenSLAReportHandler")
	}

	if o.TenantProvisioningServiceGetActiveTenantIngestionProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetActiveTenantIngestionProfileHandler")
	}

	if o.TenantProvisioningServiceV2GetAllCardsV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetAllCardsV2Handler")
	}

	if o.TenantProvisioningServiceV2GetAllConnectorConfigsV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetAllConnectorConfigsV2Handler")
	}

	if o.TenantProvisioningServiceV2GetAllConnectorInstancesV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetAllConnectorInstancesV2Handler")
	}

	if o.TenantProvisioningServiceV2GetAllDashboardsV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetAllDashboardsV2Handler")
	}

	if o.TenantProvisioningServiceV2GetAllIngestionProfilesV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetAllIngestionProfilesV2Handler")
	}

	if o.TenantProvisioningServiceV2GetAllMonitoredObjectsV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetAllMonitoredObjectsV2Handler")
	}

	if o.TenantProvisioningServiceGetAllReportScheduleConfigHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetAllReportScheduleConfigHandler")
	}

	if o.TenantProvisioningServiceV2GetAllReportScheduleConfigsV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetAllReportScheduleConfigsV2Handler")
	}

	if o.TenantProvisioningServiceGetAllSLAReportsHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetAllSLAReportsHandler")
	}

	if o.TenantProvisioningServiceV2GetAllSLAReportsV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetAllSLAReportsV2Handler")
	}

	if o.TenantProvisioningServiceGetAllTenantConnectorConfigsHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetAllTenantConnectorConfigsHandler")
	}

	if o.TenantProvisioningServiceGetAllTenantConnectorInstancesHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetAllTenantConnectorInstancesHandler")
	}

	if o.TenantProvisioningServiceGetAllTenantDomainsHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetAllTenantDomainsHandler")
	}

	if o.TenantProvisioningServiceGetAllTenantMonitoredObjectsHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetAllTenantMonitoredObjectsHandler")
	}

	if o.TenantProvisioningServiceGetAllTenantThresholdProfilesHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetAllTenantThresholdProfilesHandler")
	}

	if o.AdminProvisioningServiceGetAllTenantsHandler == nil {
		unregistered = append(unregistered, "admin_provisioning_service.GetAllTenantsHandler")
	}

	if o.AdminProvisioningServiceV2GetAllTenantsV2Handler == nil {
		unregistered = append(unregistered, "admin_provisioning_service_v2.GetAllTenantsV2Handler")
	}

	if o.TenantProvisioningServiceV2GetAllThresholdProfilesV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetAllThresholdProfilesV2Handler")
	}

	if o.TenantProvisioningServiceV2GetCardV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetCardV2Handler")
	}

	if o.TenantProvisioningServiceV2GetConnectorConfigV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetConnectorConfigV2Handler")
	}

	if o.TenantProvisioningServiceV2GetConnectorInstanceV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetConnectorInstanceV2Handler")
	}

	if o.TenantProvisioningServiceV2GetDashboardV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetDashboardV2Handler")
	}

	if o.TenantProvisioningServiceV2GetDataCleaningProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetDataCleaningProfileHandler")
	}

	if o.TenantProvisioningServiceV2GetDataCleaningProfilesHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetDataCleaningProfilesHandler")
	}

	if o.TenantProvisioningServiceGetDomainToMonitoredObjectMapHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetDomainToMonitoredObjectMapHandler")
	}

	if o.MetricsServiceGetFilteredRawMetricsHandler == nil {
		unregistered = append(unregistered, "metrics_service.GetFilteredRawMetricsHandler")
	}

	if o.MetricsServiceGetHistogramHandler == nil {
		unregistered = append(unregistered, "metrics_service.GetHistogramHandler")
	}

	if o.AdminProvisioningServiceGetIngestionDictionaryHandler == nil {
		unregistered = append(unregistered, "admin_provisioning_service.GetIngestionDictionaryHandler")
	}

	if o.AdminProvisioningServiceV2GetIngestionDictionaryV2Handler == nil {
		unregistered = append(unregistered, "admin_provisioning_service_v2.GetIngestionDictionaryV2Handler")
	}

	if o.TenantProvisioningServiceV2GetIngestionProfileV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetIngestionProfileV2Handler")
	}

	if o.TenantProvisioningServiceV2GetMonitoredObjectV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetMonitoredObjectV2Handler")
	}

	if o.MetricsServiceGetRawMetricsHandler == nil {
		unregistered = append(unregistered, "metrics_service.GetRawMetricsHandler")
	}

	if o.TenantProvisioningServiceGetReportScheduleConfigHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetReportScheduleConfigHandler")
	}

	if o.TenantProvisioningServiceV2GetReportScheduleConfigV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetReportScheduleConfigV2Handler")
	}

	if o.TenantProvisioningServiceGetSLAReportHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetSLAReportHandler")
	}

	if o.TenantProvisioningServiceV2GetSLAReportV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetSLAReportV2Handler")
	}

	if o.AdminProvisioningServiceGetTenantHandler == nil {
		unregistered = append(unregistered, "admin_provisioning_service.GetTenantHandler")
	}

	if o.TenantProvisioningServiceGetTenantConnectorConfigHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetTenantConnectorConfigHandler")
	}

	if o.TenantProvisioningServiceGetTenantConnectorInstanceHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetTenantConnectorInstanceHandler")
	}

	if o.TenantProvisioningServiceGetTenantDomainHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetTenantDomainHandler")
	}

	if o.AdminProvisioningServiceGetTenantIDByAliasHandler == nil {
		unregistered = append(unregistered, "admin_provisioning_service.GetTenantIDByAliasHandler")
	}

	if o.AdminProvisioningServiceV2GetTenantIDByAliasV2Handler == nil {
		unregistered = append(unregistered, "admin_provisioning_service_v2.GetTenantIDByAliasV2Handler")
	}

	if o.TenantProvisioningServiceGetTenantIngestionProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetTenantIngestionProfileHandler")
	}

	if o.TenantProvisioningServiceGetTenantMetadataHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetTenantMetadataHandler")
	}

	if o.TenantProvisioningServiceGetTenantMonitoredObjectHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetTenantMonitoredObjectHandler")
	}

	if o.AdminProvisioningServiceGetTenantSummaryByAliasHandler == nil {
		unregistered = append(unregistered, "admin_provisioning_service.GetTenantSummaryByAliasHandler")
	}

	if o.AdminProvisioningServiceV2GetTenantSummaryByAliasV2Handler == nil {
		unregistered = append(unregistered, "admin_provisioning_service_v2.GetTenantSummaryByAliasV2Handler")
	}

	if o.TenantProvisioningServiceGetTenantThresholdProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.GetTenantThresholdProfileHandler")
	}

	if o.AdminProvisioningServiceV2GetTenantV2Handler == nil {
		unregistered = append(unregistered, "admin_provisioning_service_v2.GetTenantV2Handler")
	}

	if o.MetricsServiceGetThresholdCrossingByMonitoredObjectTopNHandler == nil {
		unregistered = append(unregistered, "metrics_service.GetThresholdCrossingByMonitoredObjectTopNHandler")
	}

	if o.TenantProvisioningServiceV2GetThresholdProfileV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.GetThresholdProfileV2Handler")
	}

	if o.MetricsServiceGetTopNForMetricHandler == nil {
		unregistered = append(unregistered, "metrics_service.GetTopNForMetricHandler")
	}

	if o.AdminProvisioningServiceGetValidTypesHandler == nil {
		unregistered = append(unregistered, "admin_provisioning_service.GetValidTypesHandler")
	}

	if o.AdminProvisioningServiceV2GetValidTypesV2Handler == nil {
		unregistered = append(unregistered, "admin_provisioning_service_v2.GetValidTypesV2Handler")
	}

	if o.AdminProvisioningServicePatchTenantHandler == nil {
		unregistered = append(unregistered, "admin_provisioning_service.PatchTenantHandler")
	}

	if o.TenantProvisioningServicePatchTenantDomainHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.PatchTenantDomainHandler")
	}

	if o.TenantProvisioningServicePatchTenantIngestionProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.PatchTenantIngestionProfileHandler")
	}

	if o.TenantProvisioningServicePatchTenantMetadataHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.PatchTenantMetadataHandler")
	}

	if o.TenantProvisioningServicePatchTenantMonitoredObjectHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.PatchTenantMonitoredObjectHandler")
	}

	if o.TenantProvisioningServicePatchTenantThresholdProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.PatchTenantThresholdProfileHandler")
	}

	if o.AdminProvisioningServiceV2PatchTenantV2Handler == nil {
		unregistered = append(unregistered, "admin_provisioning_service_v2.PatchTenantV2Handler")
	}

	if o.MetricsServiceQueryAggregatedMetricsHandler == nil {
		unregistered = append(unregistered, "metrics_service.QueryAggregatedMetricsHandler")
	}

	if o.MetricsServiceQueryThresholdCrossingHandler == nil {
		unregistered = append(unregistered, "metrics_service.QueryThresholdCrossingHandler")
	}

	if o.TenantProvisioningServiceV2UpdateCardV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.UpdateCardV2Handler")
	}

	if o.TenantProvisioningServiceV2UpdateConnectorConfigV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.UpdateConnectorConfigV2Handler")
	}

	if o.TenantProvisioningServiceV2UpdateConnectorInstanceV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.UpdateConnectorInstanceV2Handler")
	}

	if o.TenantProvisioningServiceV2UpdateDashboardV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.UpdateDashboardV2Handler")
	}

	if o.TenantProvisioningServiceV2UpdateDataCleaningProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.UpdateDataCleaningProfileHandler")
	}

	if o.TenantProvisioningServiceV2UpdateIngestionProfileV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.UpdateIngestionProfileV2Handler")
	}

	if o.TenantProvisioningServiceV2UpdateMonitoredObjectV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.UpdateMonitoredObjectV2Handler")
	}

	if o.TenantProvisioningServiceUpdateReportScheduleConfigHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.UpdateReportScheduleConfigHandler")
	}

	if o.TenantProvisioningServiceV2UpdateReportScheduleConfigV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.UpdateReportScheduleConfigV2Handler")
	}

	if o.AdminProvisioningServiceUpdateTenantHandler == nil {
		unregistered = append(unregistered, "admin_provisioning_service.UpdateTenantHandler")
	}

	if o.TenantProvisioningServiceUpdateTenantConnectorConfigHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.UpdateTenantConnectorConfigHandler")
	}

	if o.TenantProvisioningServiceUpdateTenantConnectorInstanceHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.UpdateTenantConnectorInstanceHandler")
	}

	if o.TenantProvisioningServiceUpdateTenantDomainHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.UpdateTenantDomainHandler")
	}

	if o.TenantProvisioningServiceUpdateTenantIngestionProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.UpdateTenantIngestionProfileHandler")
	}

	if o.TenantProvisioningServiceUpdateTenantMetadataHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.UpdateTenantMetadataHandler")
	}

	if o.TenantProvisioningServiceUpdateTenantMonitoredObjectHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.UpdateTenantMonitoredObjectHandler")
	}

	if o.TenantProvisioningServiceUpdateTenantThresholdProfileHandler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service.UpdateTenantThresholdProfileHandler")
	}

	if o.TenantProvisioningServiceV2UpdateThresholdProfileV2Handler == nil {
		unregistered = append(unregistered, "tenant_provisioning_service_v2.UpdateThresholdProfileV2Handler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *GatherAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *GatherAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *GatherAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *GatherAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		case "application/vnd.api+json":
			result["application/vnd.api+json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *GatherAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		case "application/vnd.api+json":
			result["application/vnd.api+json"] = o.JSONProducer

		case "text/plain":
			result["text/plain"] = o.TxtProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *GatherAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the gather API
func (o *GatherAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *GatherAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/tenants/{tenantId}/bulk/insert/monitored-objects"] = tenant_provisioning_service.NewBulkInsertMonitoredObject(o.context, o.TenantProvisioningServiceBulkInsertMonitoredObjectHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/bulk/insert/monitored-objects"] = tenant_provisioning_service_v2.NewBulkInsertMonitoredObjectsV2(o.context, o.TenantProvisioningServiceV2BulkInsertMonitoredObjectsV2Handler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/tenants/{tenantId}/bulk/insert/monitored-objects"] = tenant_provisioning_service.NewBulkUpdateMonitoredObject(o.context, o.TenantProvisioningServiceBulkUpdateMonitoredObjectHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v2/bulk/insert/monitored-objects"] = tenant_provisioning_service_v2.NewBulkUpdateMonitoredObjectsV2(o.context, o.TenantProvisioningServiceV2BulkUpdateMonitoredObjectsV2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/tenants/{tenantId}/bulk/upsert/monitored-objects/meta"] = tenant_provisioning_service.NewBulkUpsertMonitoredObjectMeta(o.context, o.TenantProvisioningServiceBulkUpsertMonitoredObjectMetaHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/cards"] = tenant_provisioning_service_v2.NewCreateCardV2(o.context, o.TenantProvisioningServiceV2CreateCardV2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/connector-configs"] = tenant_provisioning_service_v2.NewCreateConnectorConfigV2(o.context, o.TenantProvisioningServiceV2CreateConnectorConfigV2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/connector-instances"] = tenant_provisioning_service_v2.NewCreateConnectorInstanceV2(o.context, o.TenantProvisioningServiceV2CreateConnectorInstanceV2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/dashboards"] = tenant_provisioning_service_v2.NewCreateDashboardV2(o.context, o.TenantProvisioningServiceV2CreateDashboardV2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/data-cleaning-profiles"] = tenant_provisioning_service_v2.NewCreateDataCleaningProfile(o.context, o.TenantProvisioningServiceV2CreateDataCleaningProfileHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/ingestion-profiles"] = tenant_provisioning_service_v2.NewCreateIngestionProfileV2(o.context, o.TenantProvisioningServiceV2CreateIngestionProfileV2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/monitored-objects"] = tenant_provisioning_service_v2.NewCreateMonitoredObjectV2(o.context, o.TenantProvisioningServiceV2CreateMonitoredObjectV2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/tenants/{tenantId}/report-schedule-configs"] = tenant_provisioning_service.NewCreateReportScheduleConfig(o.context, o.TenantProvisioningServiceCreateReportScheduleConfigHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/report-schedule-configs"] = tenant_provisioning_service_v2.NewCreateReportScheduleConfigV2(o.context, o.TenantProvisioningServiceV2CreateReportScheduleConfigV2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/tenants"] = admin_provisioning_service.NewCreateTenant(o.context, o.AdminProvisioningServiceCreateTenantHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/tenants/{tenantId}/connector-configs"] = tenant_provisioning_service.NewCreateTenantConnectorConfig(o.context, o.TenantProvisioningServiceCreateTenantConnectorConfigHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/tenants/{tenantId}/connector-instances"] = tenant_provisioning_service.NewCreateTenantConnectorInstance(o.context, o.TenantProvisioningServiceCreateTenantConnectorInstanceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/tenants/{tenantId}/domains"] = tenant_provisioning_service.NewCreateTenantDomain(o.context, o.TenantProvisioningServiceCreateTenantDomainHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/tenants/{tenantId}/ingestion-profiles"] = tenant_provisioning_service.NewCreateTenantIngestionProfile(o.context, o.TenantProvisioningServiceCreateTenantIngestionProfileHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/tenants/{tenantId}/meta"] = tenant_provisioning_service.NewCreateTenantMetadata(o.context, o.TenantProvisioningServiceCreateTenantMetadataHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/tenants/{tenantId}/monitored-objects"] = tenant_provisioning_service.NewCreateTenantMonitoredObject(o.context, o.TenantProvisioningServiceCreateTenantMonitoredObjectHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/tenants/{tenantId}/threshold-profiles"] = tenant_provisioning_service.NewCreateTenantThresholdProfile(o.context, o.TenantProvisioningServiceCreateTenantThresholdProfileHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/tenants"] = admin_provisioning_service_v2.NewCreateTenantV2(o.context, o.AdminProvisioningServiceV2CreateTenantV2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/threshold-profiles"] = tenant_provisioning_service_v2.NewCreateThresholdProfileV2(o.context, o.TenantProvisioningServiceV2CreateThresholdProfileV2Handler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v2/cards/{cardId}"] = tenant_provisioning_service_v2.NewDeleteCardV2(o.context, o.TenantProvisioningServiceV2DeleteCardV2Handler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v2/connector-configs/{connectorId}"] = tenant_provisioning_service_v2.NewDeleteConnectorConfigV2(o.context, o.TenantProvisioningServiceV2DeleteConnectorConfigV2Handler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v2/connector-instances/{connectorInstanceId}"] = tenant_provisioning_service_v2.NewDeleteConnectorInstanceV2(o.context, o.TenantProvisioningServiceV2DeleteConnectorInstanceV2Handler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v2/dashboards/{dashboardId}"] = tenant_provisioning_service_v2.NewDeleteDashboardV2(o.context, o.TenantProvisioningServiceV2DeleteDashboardV2Handler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v2/data-cleaning-profiles/{profileId}"] = tenant_provisioning_service_v2.NewDeleteDataCleaningProfile(o.context, o.TenantProvisioningServiceV2DeleteDataCleaningProfileHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v2/ingestion-profiles/{ingestionProfileId}"] = tenant_provisioning_service_v2.NewDeleteIngestionProfileV2(o.context, o.TenantProvisioningServiceV2DeleteIngestionProfileV2Handler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v2/monitored-objects/{monObjId}"] = tenant_provisioning_service_v2.NewDeleteMonitoredObjectV2(o.context, o.TenantProvisioningServiceV2DeleteMonitoredObjectV2Handler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/tenants/{tenantId}/report-schedule-configs/{configId}"] = tenant_provisioning_service.NewDeleteReportScheduleConfig(o.context, o.TenantProvisioningServiceDeleteReportScheduleConfigHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v2/report-schedule-configs/{configId}"] = tenant_provisioning_service_v2.NewDeleteReportScheduleConfigV2(o.context, o.TenantProvisioningServiceV2DeleteReportScheduleConfigV2Handler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/tenants/{tenantId}"] = admin_provisioning_service.NewDeleteTenant(o.context, o.AdminProvisioningServiceDeleteTenantHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/tenants/{tenantId}/connector-configs/{connectorId}"] = tenant_provisioning_service.NewDeleteTenantConnectorConfig(o.context, o.TenantProvisioningServiceDeleteTenantConnectorConfigHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/tenants/{tenantId}/connector-instances/{connectorInstanceId}"] = tenant_provisioning_service.NewDeleteTenantConnectorInstance(o.context, o.TenantProvisioningServiceDeleteTenantConnectorInstanceHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/tenants/{tenantId}/domains/{domainId}"] = tenant_provisioning_service.NewDeleteTenantDomain(o.context, o.TenantProvisioningServiceDeleteTenantDomainHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/tenants/{tenantId}/ingestion-profiles/{ingestionProfileId}"] = tenant_provisioning_service.NewDeleteTenantIngestionProfile(o.context, o.TenantProvisioningServiceDeleteTenantIngestionProfileHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/tenants/{tenantId}/meta"] = tenant_provisioning_service.NewDeleteTenantMetadata(o.context, o.TenantProvisioningServiceDeleteTenantMetadataHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/tenants/{tenantId}/monitored-objects/{monObjId}"] = tenant_provisioning_service.NewDeleteTenantMonitoredObject(o.context, o.TenantProvisioningServiceDeleteTenantMonitoredObjectHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/tenants/{tenantId}/threshold-profiles/{thrPrfId}"] = tenant_provisioning_service.NewDeleteTenantThresholdProfile(o.context, o.TenantProvisioningServiceDeleteTenantThresholdProfileHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v2/tenants/{tenantId}"] = admin_provisioning_service_v2.NewDeleteTenantV2(o.context, o.AdminProvisioningServiceV2DeleteTenantV2Handler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v2/threshold-profiles/{thrPrfId}"] = tenant_provisioning_service_v2.NewDeleteThresholdProfileV2(o.context, o.TenantProvisioningServiceV2DeleteThresholdProfileV2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/generate-sla-report"] = metrics_service.NewGenSLAReport(o.context, o.MetricsServiceGenSLAReportHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/active-ingestion-profile"] = tenant_provisioning_service.NewGetActiveTenantIngestionProfile(o.context, o.TenantProvisioningServiceGetActiveTenantIngestionProfileHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/cards"] = tenant_provisioning_service_v2.NewGetAllCardsV2(o.context, o.TenantProvisioningServiceV2GetAllCardsV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/connector-configs"] = tenant_provisioning_service_v2.NewGetAllConnectorConfigsV2(o.context, o.TenantProvisioningServiceV2GetAllConnectorConfigsV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/connector-instances"] = tenant_provisioning_service_v2.NewGetAllConnectorInstancesV2(o.context, o.TenantProvisioningServiceV2GetAllConnectorInstancesV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/dashboards"] = tenant_provisioning_service_v2.NewGetAllDashboardsV2(o.context, o.TenantProvisioningServiceV2GetAllDashboardsV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/ingestion-profiles"] = tenant_provisioning_service_v2.NewGetAllIngestionProfilesV2(o.context, o.TenantProvisioningServiceV2GetAllIngestionProfilesV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/monitored-objects"] = tenant_provisioning_service_v2.NewGetAllMonitoredObjectsV2(o.context, o.TenantProvisioningServiceV2GetAllMonitoredObjectsV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/report-schedule-config-list"] = tenant_provisioning_service.NewGetAllReportScheduleConfig(o.context, o.TenantProvisioningServiceGetAllReportScheduleConfigHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/report-schedule-configs"] = tenant_provisioning_service_v2.NewGetAllReportScheduleConfigsV2(o.context, o.TenantProvisioningServiceV2GetAllReportScheduleConfigsV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/report-list"] = tenant_provisioning_service.NewGetAllSLAReports(o.context, o.TenantProvisioningServiceGetAllSLAReportsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/reports"] = tenant_provisioning_service_v2.NewGetAllSLAReportsV2(o.context, o.TenantProvisioningServiceV2GetAllSLAReportsV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/connector-config-list"] = tenant_provisioning_service.NewGetAllTenantConnectorConfigs(o.context, o.TenantProvisioningServiceGetAllTenantConnectorConfigsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/connector-instance-list"] = tenant_provisioning_service.NewGetAllTenantConnectorInstances(o.context, o.TenantProvisioningServiceGetAllTenantConnectorInstancesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/domain-list"] = tenant_provisioning_service.NewGetAllTenantDomains(o.context, o.TenantProvisioningServiceGetAllTenantDomainsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/monitored-object-list"] = tenant_provisioning_service.NewGetAllTenantMonitoredObjects(o.context, o.TenantProvisioningServiceGetAllTenantMonitoredObjectsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/threshold-profile-list"] = tenant_provisioning_service.NewGetAllTenantThresholdProfiles(o.context, o.TenantProvisioningServiceGetAllTenantThresholdProfilesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenant-list"] = admin_provisioning_service.NewGetAllTenants(o.context, o.AdminProvisioningServiceGetAllTenantsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/tenants"] = admin_provisioning_service_v2.NewGetAllTenantsV2(o.context, o.AdminProvisioningServiceV2GetAllTenantsV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/threshold-profiles"] = tenant_provisioning_service_v2.NewGetAllThresholdProfilesV2(o.context, o.TenantProvisioningServiceV2GetAllThresholdProfilesV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/cards/{cardId}"] = tenant_provisioning_service_v2.NewGetCardV2(o.context, o.TenantProvisioningServiceV2GetCardV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/connector-configs/{connectorId}"] = tenant_provisioning_service_v2.NewGetConnectorConfigV2(o.context, o.TenantProvisioningServiceV2GetConnectorConfigV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/connector-instances/{connectorInstanceId}"] = tenant_provisioning_service_v2.NewGetConnectorInstanceV2(o.context, o.TenantProvisioningServiceV2GetConnectorInstanceV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/dashboards/{dashboardId}"] = tenant_provisioning_service_v2.NewGetDashboardV2(o.context, o.TenantProvisioningServiceV2GetDashboardV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data-cleaning-profiles/{profileId}"] = tenant_provisioning_service_v2.NewGetDataCleaningProfile(o.context, o.TenantProvisioningServiceV2GetDataCleaningProfileHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/data-cleaning-profiles"] = tenant_provisioning_service_v2.NewGetDataCleaningProfiles(o.context, o.TenantProvisioningServiceV2GetDataCleaningProfilesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/tenants/{tenantId}/monitored-object-domain-map"] = tenant_provisioning_service.NewGetDomainToMonitoredObjectMap(o.context, o.TenantProvisioningServiceGetDomainToMonitoredObjectMapHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v2/raw-metrics"] = metrics_service.NewGetFilteredRawMetrics(o.context, o.MetricsServiceGetFilteredRawMetricsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/histogram"] = metrics_service.NewGetHistogram(o.context, o.MetricsServiceGetHistogramHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/ingestion-dictionaries"] = admin_provisioning_service.NewGetIngestionDictionary(o.context, o.AdminProvisioningServiceGetIngestionDictionaryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/ingestion-dictionaries"] = admin_provisioning_service_v2.NewGetIngestionDictionaryV2(o.context, o.AdminProvisioningServiceV2GetIngestionDictionaryV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/ingestion-profiles/{ingestionProfileId}"] = tenant_provisioning_service_v2.NewGetIngestionProfileV2(o.context, o.TenantProvisioningServiceV2GetIngestionProfileV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/monitored-objects/{monObjId}"] = tenant_provisioning_service_v2.NewGetMonitoredObjectV2(o.context, o.TenantProvisioningServiceV2GetMonitoredObjectV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/raw-metrics"] = metrics_service.NewGetRawMetrics(o.context, o.MetricsServiceGetRawMetricsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/report-schedule-configs/{configId}"] = tenant_provisioning_service.NewGetReportScheduleConfig(o.context, o.TenantProvisioningServiceGetReportScheduleConfigHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/report-schedule-configs/{configId}"] = tenant_provisioning_service_v2.NewGetReportScheduleConfigV2(o.context, o.TenantProvisioningServiceV2GetReportScheduleConfigV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/reports/{reportID}"] = tenant_provisioning_service.NewGetSLAReport(o.context, o.TenantProvisioningServiceGetSLAReportHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/reports/{reportID}"] = tenant_provisioning_service_v2.NewGetSLAReportV2(o.context, o.TenantProvisioningServiceV2GetSLAReportV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}"] = admin_provisioning_service.NewGetTenant(o.context, o.AdminProvisioningServiceGetTenantHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/connector-configs/{connectorId}"] = tenant_provisioning_service.NewGetTenantConnectorConfig(o.context, o.TenantProvisioningServiceGetTenantConnectorConfigHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/connector-instances/{connectorInstanceId}"] = tenant_provisioning_service.NewGetTenantConnectorInstance(o.context, o.TenantProvisioningServiceGetTenantConnectorInstanceHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/domains/{domainId}"] = tenant_provisioning_service.NewGetTenantDomain(o.context, o.TenantProvisioningServiceGetTenantDomainHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenant-by-alias/{value}"] = admin_provisioning_service.NewGetTenantIDByAlias(o.context, o.AdminProvisioningServiceGetTenantIDByAliasHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/tenant-by-alias/{value}"] = admin_provisioning_service_v2.NewGetTenantIDByAliasV2(o.context, o.AdminProvisioningServiceV2GetTenantIDByAliasV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/ingestion-profiles/{ingestionProfileId}"] = tenant_provisioning_service.NewGetTenantIngestionProfile(o.context, o.TenantProvisioningServiceGetTenantIngestionProfileHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/meta"] = tenant_provisioning_service.NewGetTenantMetadata(o.context, o.TenantProvisioningServiceGetTenantMetadataHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/monitored-objects/{monObjId}"] = tenant_provisioning_service.NewGetTenantMonitoredObject(o.context, o.TenantProvisioningServiceGetTenantMonitoredObjectHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenant-summary-by-alias/{value}"] = admin_provisioning_service.NewGetTenantSummaryByAlias(o.context, o.AdminProvisioningServiceGetTenantSummaryByAliasHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/tenant-summary-by-alias/{value}"] = admin_provisioning_service_v2.NewGetTenantSummaryByAliasV2(o.context, o.AdminProvisioningServiceV2GetTenantSummaryByAliasV2Handler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/tenants/{tenantId}/threshold-profiles/{thrPrfId}"] = tenant_provisioning_service.NewGetTenantThresholdProfile(o.context, o.TenantProvisioningServiceGetTenantThresholdProfileHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/tenants/{tenantId}"] = admin_provisioning_service_v2.NewGetTenantV2(o.context, o.AdminProvisioningServiceV2GetTenantV2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/threshold-crossing-by-monitored-object-top-n"] = metrics_service.NewGetThresholdCrossingByMonitoredObjectTopN(o.context, o.MetricsServiceGetThresholdCrossingByMonitoredObjectTopNHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/threshold-profiles/{thrPrfId}"] = tenant_provisioning_service_v2.NewGetThresholdProfileV2(o.context, o.TenantProvisioningServiceV2GetThresholdProfileV2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/topn-metrics"] = metrics_service.NewGetTopNForMetric(o.context, o.MetricsServiceGetTopNForMetricHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/valid-types"] = admin_provisioning_service.NewGetValidTypes(o.context, o.AdminProvisioningServiceGetValidTypesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v2/valid-types"] = admin_provisioning_service_v2.NewGetValidTypesV2(o.context, o.AdminProvisioningServiceV2GetValidTypesV2Handler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/tenants/{tenantId}"] = admin_provisioning_service.NewPatchTenant(o.context, o.AdminProvisioningServicePatchTenantHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/tenants/{tenantId}/domains/{domainId}"] = tenant_provisioning_service.NewPatchTenantDomain(o.context, o.TenantProvisioningServicePatchTenantDomainHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/tenants/{tenantId}/ingestion-profiles"] = tenant_provisioning_service.NewPatchTenantIngestionProfile(o.context, o.TenantProvisioningServicePatchTenantIngestionProfileHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/tenants/{tenantId}/meta"] = tenant_provisioning_service.NewPatchTenantMetadata(o.context, o.TenantProvisioningServicePatchTenantMetadataHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/tenants/{tenantId}/monitored-objects"] = tenant_provisioning_service.NewPatchTenantMonitoredObject(o.context, o.TenantProvisioningServicePatchTenantMonitoredObjectHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/tenants/{tenantId}/threshold-profiles"] = tenant_provisioning_service.NewPatchTenantThresholdProfile(o.context, o.TenantProvisioningServicePatchTenantThresholdProfileHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v2/tenants/{tenantId}"] = admin_provisioning_service_v2.NewPatchTenantV2(o.context, o.AdminProvisioningServiceV2PatchTenantV2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/aggregated-metrics"] = metrics_service.NewQueryAggregatedMetrics(o.context, o.MetricsServiceQueryAggregatedMetricsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/threshold-crossing"] = metrics_service.NewQueryThresholdCrossing(o.context, o.MetricsServiceQueryThresholdCrossingHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v2/cards/{cardId}"] = tenant_provisioning_service_v2.NewUpdateCardV2(o.context, o.TenantProvisioningServiceV2UpdateCardV2Handler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v2/connector-configs/{connectorId}"] = tenant_provisioning_service_v2.NewUpdateConnectorConfigV2(o.context, o.TenantProvisioningServiceV2UpdateConnectorConfigV2Handler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v2/connector-instances/{connectorInstanceId}"] = tenant_provisioning_service_v2.NewUpdateConnectorInstanceV2(o.context, o.TenantProvisioningServiceV2UpdateConnectorInstanceV2Handler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v2/dashboards/{dashboardId}"] = tenant_provisioning_service_v2.NewUpdateDashboardV2(o.context, o.TenantProvisioningServiceV2UpdateDashboardV2Handler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v2/data-cleaning-profiles/{profileId}"] = tenant_provisioning_service_v2.NewUpdateDataCleaningProfile(o.context, o.TenantProvisioningServiceV2UpdateDataCleaningProfileHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v2/ingestion-profiles/{ingestionProfileId}"] = tenant_provisioning_service_v2.NewUpdateIngestionProfileV2(o.context, o.TenantProvisioningServiceV2UpdateIngestionProfileV2Handler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v2/monitored-objects/{monObjId}"] = tenant_provisioning_service_v2.NewUpdateMonitoredObjectV2(o.context, o.TenantProvisioningServiceV2UpdateMonitoredObjectV2Handler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/tenants/{tenantId}/report-schedule-configs"] = tenant_provisioning_service.NewUpdateReportScheduleConfig(o.context, o.TenantProvisioningServiceUpdateReportScheduleConfigHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v2/report-schedule-configs/{configId}"] = tenant_provisioning_service_v2.NewUpdateReportScheduleConfigV2(o.context, o.TenantProvisioningServiceV2UpdateReportScheduleConfigV2Handler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/tenants"] = admin_provisioning_service.NewUpdateTenant(o.context, o.AdminProvisioningServiceUpdateTenantHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/tenants/{tenantId}/connector-configs"] = tenant_provisioning_service.NewUpdateTenantConnectorConfig(o.context, o.TenantProvisioningServiceUpdateTenantConnectorConfigHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/tenants/{tenantId}/connector-instances"] = tenant_provisioning_service.NewUpdateTenantConnectorInstance(o.context, o.TenantProvisioningServiceUpdateTenantConnectorInstanceHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/tenants/{tenantId}/domains/{domainId}"] = tenant_provisioning_service.NewUpdateTenantDomain(o.context, o.TenantProvisioningServiceUpdateTenantDomainHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/tenants/{tenantId}/ingestion-profiles"] = tenant_provisioning_service.NewUpdateTenantIngestionProfile(o.context, o.TenantProvisioningServiceUpdateTenantIngestionProfileHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/tenants/{tenantId}/meta"] = tenant_provisioning_service.NewUpdateTenantMetadata(o.context, o.TenantProvisioningServiceUpdateTenantMetadataHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/tenants/{tenantId}/monitored-objects"] = tenant_provisioning_service.NewUpdateTenantMonitoredObject(o.context, o.TenantProvisioningServiceUpdateTenantMonitoredObjectHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/tenants/{tenantId}/threshold-profiles"] = tenant_provisioning_service.NewUpdateTenantThresholdProfile(o.context, o.TenantProvisioningServiceUpdateTenantThresholdProfileHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v2/threshold-profiles/{thrPrfId}"] = tenant_provisioning_service_v2.NewUpdateThresholdProfileV2(o.context, o.TenantProvisioningServiceV2UpdateThresholdProfileV2Handler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *GatherAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *GatherAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *GatherAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *GatherAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
