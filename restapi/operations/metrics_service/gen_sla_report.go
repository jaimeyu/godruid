// Code generated by go-swagger; DO NOT EDIT.

package metrics_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GenSLAReportHandlerFunc turns a function with the right signature into a gen SLA report handler
type GenSLAReportHandlerFunc func(GenSLAReportParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GenSLAReportHandlerFunc) Handle(params GenSLAReportParams) middleware.Responder {
	return fn(params)
}

// GenSLAReportHandler interface for that can handle valid gen SLA report params
type GenSLAReportHandler interface {
	Handle(GenSLAReportParams) middleware.Responder
}

// NewGenSLAReport creates a new http.Handler for the gen SLA report operation
func NewGenSLAReport(ctx *middleware.Context, handler GenSLAReportHandler) *GenSLAReport {
	return &GenSLAReport{Context: ctx, Handler: handler}
}

/*GenSLAReport swagger:route GET /v1/generate-sla-report MetricsService genSlaReport

Generate an SLA Report.

*/
type GenSLAReport struct {
	Context *middleware.Context
	Handler GenSLAReportHandler
}

func (o *GenSLAReport) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGenSLAReportParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
