// Code generated by go-swagger; DO NOT EDIT.

package metrics_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGenSLAReportParams creates a new GenSLAReportParams object
// with the default values initialized.
func NewGenSLAReportParams() GenSLAReportParams {

	var (
		// initialize parameters with default values

		granularityDefault = string("PT1H")
	)

	return GenSLAReportParams{
		Granularity: &granularityDefault,
	}
}

// GenSLAReportParams contains all the bound params for the gen SLA report operation
// typically these are obtained from a http.Request
//
// swagger:parameters GenSLAReport
type GenSLAReportParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Domain ID
	  In: query
	*/
	Domain []string
	/*the granularity for timeseries in ISO-8601 Duration format
	  In: query
	  Default: "PT1H"
	*/
	Granularity *string
	/*ISO-8601 Intervals.
	  Required: true
	  In: query
	*/
	Interval string
	/*Tenant ID
	  Required: true
	  In: query
	*/
	Tenant string
	/*ID of the ThresholdProfile to use for the report
	  Required: true
	  In: query
	*/
	ThresholdProfileID string
	/*database query timeout in milliseconds
	  In: query
	*/
	Timeout *int32
	/*timezone used for time-based buckets (e.g. hour of day buckets) see http://joda-time.sourceforge.net/timezones.html
	  In: query
	*/
	Timezone *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGenSLAReportParams() beforehand.
func (o *GenSLAReportParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDomain, qhkDomain, _ := qs.GetOK("domain")
	if err := o.bindDomain(qDomain, qhkDomain, route.Formats); err != nil {
		res = append(res, err)
	}

	qGranularity, qhkGranularity, _ := qs.GetOK("granularity")
	if err := o.bindGranularity(qGranularity, qhkGranularity, route.Formats); err != nil {
		res = append(res, err)
	}

	qInterval, qhkInterval, _ := qs.GetOK("interval")
	if err := o.bindInterval(qInterval, qhkInterval, route.Formats); err != nil {
		res = append(res, err)
	}

	qTenant, qhkTenant, _ := qs.GetOK("tenant")
	if err := o.bindTenant(qTenant, qhkTenant, route.Formats); err != nil {
		res = append(res, err)
	}

	qThresholdProfileID, qhkThresholdProfileID, _ := qs.GetOK("thresholdProfileId")
	if err := o.bindThresholdProfileID(qThresholdProfileID, qhkThresholdProfileID, route.Formats); err != nil {
		res = append(res, err)
	}

	qTimeout, qhkTimeout, _ := qs.GetOK("timeout")
	if err := o.bindTimeout(qTimeout, qhkTimeout, route.Formats); err != nil {
		res = append(res, err)
	}

	qTimezone, qhkTimezone, _ := qs.GetOK("timezone")
	if err := o.bindTimezone(qTimezone, qhkTimezone, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GenSLAReportParams) bindDomain(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvDomain string
	if len(rawData) > 0 {
		qvDomain = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	domainIC := swag.SplitByFormat(qvDomain, "")
	if len(domainIC) == 0 {
		return nil
	}

	var domainIR []string
	for _, domainIV := range domainIC {
		domainI := domainIV

		domainIR = append(domainIR, domainI)
	}

	o.Domain = domainIR

	return nil
}

func (o *GenSLAReportParams) bindGranularity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGenSLAReportParams()
		return nil
	}

	o.Granularity = &raw

	return nil
}

func (o *GenSLAReportParams) bindInterval(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("interval", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("interval", "query", raw); err != nil {
		return err
	}

	o.Interval = raw

	return nil
}

func (o *GenSLAReportParams) bindTenant(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("tenant", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("tenant", "query", raw); err != nil {
		return err
	}

	o.Tenant = raw

	return nil
}

func (o *GenSLAReportParams) bindThresholdProfileID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("thresholdProfileId", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("thresholdProfileId", "query", raw); err != nil {
		return err
	}

	o.ThresholdProfileID = raw

	return nil
}

func (o *GenSLAReportParams) bindTimeout(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("timeout", "query", "int32", raw)
	}
	o.Timeout = &value

	return nil
}

func (o *GenSLAReportParams) bindTimezone(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Timezone = &raw

	return nil
}
