// Code generated by go-swagger; DO NOT EDIT.

package metrics_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetThresholdCrossingByMonitoredObjectHandlerFunc turns a function with the right signature into a get threshold crossing by monitored object handler
type GetThresholdCrossingByMonitoredObjectHandlerFunc func(GetThresholdCrossingByMonitoredObjectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetThresholdCrossingByMonitoredObjectHandlerFunc) Handle(params GetThresholdCrossingByMonitoredObjectParams) middleware.Responder {
	return fn(params)
}

// GetThresholdCrossingByMonitoredObjectHandler interface for that can handle valid get threshold crossing by monitored object params
type GetThresholdCrossingByMonitoredObjectHandler interface {
	Handle(GetThresholdCrossingByMonitoredObjectParams) middleware.Responder
}

// NewGetThresholdCrossingByMonitoredObject creates a new http.Handler for the get threshold crossing by monitored object operation
func NewGetThresholdCrossingByMonitoredObject(ctx *middleware.Context, handler GetThresholdCrossingByMonitoredObjectHandler) *GetThresholdCrossingByMonitoredObject {
	return &GetThresholdCrossingByMonitoredObject{Context: ctx, Handler: handler}
}

/*GetThresholdCrossingByMonitoredObject swagger:route GET /v1/threshold-crossing-by-monitored-object MetricsService getThresholdCrossingByMonitoredObject

GetThresholdCrossingByMonitoredObject get threshold crossing by monitored object API

*/
type GetThresholdCrossingByMonitoredObject struct {
	Context *middleware.Context
	Handler GetThresholdCrossingByMonitoredObjectHandler
}

func (o *GetThresholdCrossingByMonitoredObject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetThresholdCrossingByMonitoredObjectParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
