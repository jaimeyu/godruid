// Code generated by go-swagger; DO NOT EDIT.

package metrics_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// QueryThresholdCrossingHandlerFunc turns a function with the right signature into a query threshold crossing handler
type QueryThresholdCrossingHandlerFunc func(QueryThresholdCrossingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn QueryThresholdCrossingHandlerFunc) Handle(params QueryThresholdCrossingParams) middleware.Responder {
	return fn(params)
}

// QueryThresholdCrossingHandler interface for that can handle valid query threshold crossing params
type QueryThresholdCrossingHandler interface {
	Handle(QueryThresholdCrossingParams) middleware.Responder
}

// NewQueryThresholdCrossing creates a new http.Handler for the query threshold crossing operation
func NewQueryThresholdCrossing(ctx *middleware.Context, handler QueryThresholdCrossingHandler) *QueryThresholdCrossing {
	return &QueryThresholdCrossing{Context: ctx, Handler: handler}
}

/*QueryThresholdCrossing swagger:route POST /v1/threshold-crossing MetricsService queryThresholdCrossing

Retrieve threshold crossings

*/
type QueryThresholdCrossing struct {
	Context *middleware.Context
	Handler QueryThresholdCrossingHandler
}

func (o *QueryThresholdCrossing) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewQueryThresholdCrossingParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
