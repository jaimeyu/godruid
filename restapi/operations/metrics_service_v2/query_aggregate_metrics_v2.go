// Code generated by go-swagger; DO NOT EDIT.

package metrics_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// QueryAggregateMetricsV2HandlerFunc turns a function with the right signature into a query aggregate metrics v2 handler
type QueryAggregateMetricsV2HandlerFunc func(QueryAggregateMetricsV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn QueryAggregateMetricsV2HandlerFunc) Handle(params QueryAggregateMetricsV2Params) middleware.Responder {
	return fn(params)
}

// QueryAggregateMetricsV2Handler interface for that can handle valid query aggregate metrics v2 params
type QueryAggregateMetricsV2Handler interface {
	Handle(QueryAggregateMetricsV2Params) middleware.Responder
}

// NewQueryAggregateMetricsV2 creates a new http.Handler for the query aggregate metrics v2 operation
func NewQueryAggregateMetricsV2(ctx *middleware.Context, handler QueryAggregateMetricsV2Handler) *QueryAggregateMetricsV2 {
	return &QueryAggregateMetricsV2{Context: ctx, Handler: handler}
}

/*QueryAggregateMetricsV2 swagger:route POST /v2/metrics/aggregated-metrics MetricsServiceV2 queryAggregateMetricsV2

Retrieve a variety of aggregation types against the specified metric filters

*/
type QueryAggregateMetricsV2 struct {
	Context *middleware.Context
	Handler QueryAggregateMetricsV2Handler
}

func (o *QueryAggregateMetricsV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewQueryAggregateMetricsV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
