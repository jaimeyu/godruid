// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// BulkInsertMonitoredObjectHandlerFunc turns a function with the right signature into a bulk insert monitored object handler
type BulkInsertMonitoredObjectHandlerFunc func(BulkInsertMonitoredObjectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BulkInsertMonitoredObjectHandlerFunc) Handle(params BulkInsertMonitoredObjectParams) middleware.Responder {
	return fn(params)
}

// BulkInsertMonitoredObjectHandler interface for that can handle valid bulk insert monitored object params
type BulkInsertMonitoredObjectHandler interface {
	Handle(BulkInsertMonitoredObjectParams) middleware.Responder
}

// NewBulkInsertMonitoredObject creates a new http.Handler for the bulk insert monitored object operation
func NewBulkInsertMonitoredObject(ctx *middleware.Context, handler BulkInsertMonitoredObjectHandler) *BulkInsertMonitoredObject {
	return &BulkInsertMonitoredObject{Context: ctx, Handler: handler}
}

/*BulkInsertMonitoredObject swagger:route POST /v1/tenants/{tenantId}/bulk/insert/monitored-objects TenantProvisioningService bulkInsertMonitoredObject

Create one or more Monitored Objects in a single API request.

*/
type BulkInsertMonitoredObject struct {
	Context *middleware.Context
	Handler BulkInsertMonitoredObjectHandler
}

func (o *BulkInsertMonitoredObject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewBulkInsertMonitoredObjectParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
