// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// BulkInsertMonitoredObjectMetaOKCode is the HTTP code returned for type BulkInsertMonitoredObjectMetaOK
const BulkInsertMonitoredObjectMetaOKCode int = 200

/*BulkInsertMonitoredObjectMetaOK bulk insert monitored object meta o k

swagger:response bulkInsertMonitoredObjectMetaOK
*/
type BulkInsertMonitoredObjectMetaOK struct {

	/*
	  In: Body
	*/
	Payload swagmodels.BulkOperationResponse `json:"body,omitempty"`
}

// NewBulkInsertMonitoredObjectMetaOK creates BulkInsertMonitoredObjectMetaOK with default headers values
func NewBulkInsertMonitoredObjectMetaOK() *BulkInsertMonitoredObjectMetaOK {

	return &BulkInsertMonitoredObjectMetaOK{}
}

// WithPayload adds the payload to the bulk insert monitored object meta o k response
func (o *BulkInsertMonitoredObjectMetaOK) WithPayload(payload swagmodels.BulkOperationResponse) *BulkInsertMonitoredObjectMetaOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk insert monitored object meta o k response
func (o *BulkInsertMonitoredObjectMetaOK) SetPayload(payload swagmodels.BulkOperationResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkInsertMonitoredObjectMetaOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make(swagmodels.BulkOperationResponse, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// BulkInsertMonitoredObjectMetaBadRequestCode is the HTTP code returned for type BulkInsertMonitoredObjectMetaBadRequest
const BulkInsertMonitoredObjectMetaBadRequestCode int = 400

/*BulkInsertMonitoredObjectMetaBadRequest Request data does not pass validation

swagger:response bulkInsertMonitoredObjectMetaBadRequest
*/
type BulkInsertMonitoredObjectMetaBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewBulkInsertMonitoredObjectMetaBadRequest creates BulkInsertMonitoredObjectMetaBadRequest with default headers values
func NewBulkInsertMonitoredObjectMetaBadRequest() *BulkInsertMonitoredObjectMetaBadRequest {

	return &BulkInsertMonitoredObjectMetaBadRequest{}
}

// WithPayload adds the payload to the bulk insert monitored object meta bad request response
func (o *BulkInsertMonitoredObjectMetaBadRequest) WithPayload(payload string) *BulkInsertMonitoredObjectMetaBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk insert monitored object meta bad request response
func (o *BulkInsertMonitoredObjectMetaBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkInsertMonitoredObjectMetaBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// BulkInsertMonitoredObjectMetaForbiddenCode is the HTTP code returned for type BulkInsertMonitoredObjectMetaForbidden
const BulkInsertMonitoredObjectMetaForbiddenCode int = 403

/*BulkInsertMonitoredObjectMetaForbidden Requestor does not have authorization to perform this action

swagger:response bulkInsertMonitoredObjectMetaForbidden
*/
type BulkInsertMonitoredObjectMetaForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewBulkInsertMonitoredObjectMetaForbidden creates BulkInsertMonitoredObjectMetaForbidden with default headers values
func NewBulkInsertMonitoredObjectMetaForbidden() *BulkInsertMonitoredObjectMetaForbidden {

	return &BulkInsertMonitoredObjectMetaForbidden{}
}

// WithPayload adds the payload to the bulk insert monitored object meta forbidden response
func (o *BulkInsertMonitoredObjectMetaForbidden) WithPayload(payload string) *BulkInsertMonitoredObjectMetaForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk insert monitored object meta forbidden response
func (o *BulkInsertMonitoredObjectMetaForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkInsertMonitoredObjectMetaForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// BulkInsertMonitoredObjectMetaInternalServerErrorCode is the HTTP code returned for type BulkInsertMonitoredObjectMetaInternalServerError
const BulkInsertMonitoredObjectMetaInternalServerErrorCode int = 500

/*BulkInsertMonitoredObjectMetaInternalServerError Unexpected error processing request

swagger:response bulkInsertMonitoredObjectMetaInternalServerError
*/
type BulkInsertMonitoredObjectMetaInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewBulkInsertMonitoredObjectMetaInternalServerError creates BulkInsertMonitoredObjectMetaInternalServerError with default headers values
func NewBulkInsertMonitoredObjectMetaInternalServerError() *BulkInsertMonitoredObjectMetaInternalServerError {

	return &BulkInsertMonitoredObjectMetaInternalServerError{}
}

// WithPayload adds the payload to the bulk insert monitored object meta internal server error response
func (o *BulkInsertMonitoredObjectMetaInternalServerError) WithPayload(payload string) *BulkInsertMonitoredObjectMetaInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk insert monitored object meta internal server error response
func (o *BulkInsertMonitoredObjectMetaInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkInsertMonitoredObjectMetaInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
