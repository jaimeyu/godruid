// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateReportScheduleConfigHandlerFunc turns a function with the right signature into a create report schedule config handler
type CreateReportScheduleConfigHandlerFunc func(CreateReportScheduleConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateReportScheduleConfigHandlerFunc) Handle(params CreateReportScheduleConfigParams) middleware.Responder {
	return fn(params)
}

// CreateReportScheduleConfigHandler interface for that can handle valid create report schedule config params
type CreateReportScheduleConfigHandler interface {
	Handle(CreateReportScheduleConfigParams) middleware.Responder
}

// NewCreateReportScheduleConfig creates a new http.Handler for the create report schedule config operation
func NewCreateReportScheduleConfig(ctx *middleware.Context, handler CreateReportScheduleConfigHandler) *CreateReportScheduleConfig {
	return &CreateReportScheduleConfig{Context: ctx, Handler: handler}
}

/*CreateReportScheduleConfig swagger:route POST /v1/tenants/{tenantId}/report-schedule-configs TenantProvisioningService createReportScheduleConfig

Create a report schedule configuration for a Tenant.

*/
type CreateReportScheduleConfig struct {
	Context *middleware.Context
	Handler CreateReportScheduleConfigHandler
}

func (o *CreateReportScheduleConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateReportScheduleConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
