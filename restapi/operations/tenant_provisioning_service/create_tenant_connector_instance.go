// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateTenantConnectorInstanceHandlerFunc turns a function with the right signature into a create tenant connector instance handler
type CreateTenantConnectorInstanceHandlerFunc func(CreateTenantConnectorInstanceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateTenantConnectorInstanceHandlerFunc) Handle(params CreateTenantConnectorInstanceParams) middleware.Responder {
	return fn(params)
}

// CreateTenantConnectorInstanceHandler interface for that can handle valid create tenant connector instance params
type CreateTenantConnectorInstanceHandler interface {
	Handle(CreateTenantConnectorInstanceParams) middleware.Responder
}

// NewCreateTenantConnectorInstance creates a new http.Handler for the create tenant connector instance operation
func NewCreateTenantConnectorInstance(ctx *middleware.Context, handler CreateTenantConnectorInstanceHandler) *CreateTenantConnectorInstance {
	return &CreateTenantConnectorInstance{Context: ctx, Handler: handler}
}

/*CreateTenantConnectorInstance swagger:route POST /v1/tenants/{tenantId}/connector-instances TenantProvisioningService createTenantConnectorInstance

Create a ConnectorInstance for a Tenant.

*/
type CreateTenantConnectorInstance struct {
	Context *middleware.Context
	Handler CreateTenantConnectorInstanceHandler
}

func (o *CreateTenantConnectorInstance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateTenantConnectorInstanceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
