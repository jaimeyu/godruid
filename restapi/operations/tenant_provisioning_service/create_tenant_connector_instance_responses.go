// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// CreateTenantConnectorInstanceOKCode is the HTTP code returned for type CreateTenantConnectorInstanceOK
const CreateTenantConnectorInstanceOKCode int = 200

/*CreateTenantConnectorInstanceOK create tenant connector instance o k

swagger:response createTenantConnectorInstanceOK
*/
type CreateTenantConnectorInstanceOK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.JSONAPITenantConnectorInstance `json:"body,omitempty"`
}

// NewCreateTenantConnectorInstanceOK creates CreateTenantConnectorInstanceOK with default headers values
func NewCreateTenantConnectorInstanceOK() *CreateTenantConnectorInstanceOK {

	return &CreateTenantConnectorInstanceOK{}
}

// WithPayload adds the payload to the create tenant connector instance o k response
func (o *CreateTenantConnectorInstanceOK) WithPayload(payload *swagmodels.JSONAPITenantConnectorInstance) *CreateTenantConnectorInstanceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create tenant connector instance o k response
func (o *CreateTenantConnectorInstanceOK) SetPayload(payload *swagmodels.JSONAPITenantConnectorInstance) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTenantConnectorInstanceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTenantConnectorInstanceBadRequestCode is the HTTP code returned for type CreateTenantConnectorInstanceBadRequest
const CreateTenantConnectorInstanceBadRequestCode int = 400

/*CreateTenantConnectorInstanceBadRequest Request data does not pass validation

swagger:response createTenantConnectorInstanceBadRequest
*/
type CreateTenantConnectorInstanceBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateTenantConnectorInstanceBadRequest creates CreateTenantConnectorInstanceBadRequest with default headers values
func NewCreateTenantConnectorInstanceBadRequest() *CreateTenantConnectorInstanceBadRequest {

	return &CreateTenantConnectorInstanceBadRequest{}
}

// WithPayload adds the payload to the create tenant connector instance bad request response
func (o *CreateTenantConnectorInstanceBadRequest) WithPayload(payload string) *CreateTenantConnectorInstanceBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create tenant connector instance bad request response
func (o *CreateTenantConnectorInstanceBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTenantConnectorInstanceBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// CreateTenantConnectorInstanceForbiddenCode is the HTTP code returned for type CreateTenantConnectorInstanceForbidden
const CreateTenantConnectorInstanceForbiddenCode int = 403

/*CreateTenantConnectorInstanceForbidden Requestor does not have authorization to perform this action

swagger:response createTenantConnectorInstanceForbidden
*/
type CreateTenantConnectorInstanceForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateTenantConnectorInstanceForbidden creates CreateTenantConnectorInstanceForbidden with default headers values
func NewCreateTenantConnectorInstanceForbidden() *CreateTenantConnectorInstanceForbidden {

	return &CreateTenantConnectorInstanceForbidden{}
}

// WithPayload adds the payload to the create tenant connector instance forbidden response
func (o *CreateTenantConnectorInstanceForbidden) WithPayload(payload string) *CreateTenantConnectorInstanceForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create tenant connector instance forbidden response
func (o *CreateTenantConnectorInstanceForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTenantConnectorInstanceForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// CreateTenantConnectorInstanceInternalServerErrorCode is the HTTP code returned for type CreateTenantConnectorInstanceInternalServerError
const CreateTenantConnectorInstanceInternalServerErrorCode int = 500

/*CreateTenantConnectorInstanceInternalServerError Unexpected error processing request

swagger:response createTenantConnectorInstanceInternalServerError
*/
type CreateTenantConnectorInstanceInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateTenantConnectorInstanceInternalServerError creates CreateTenantConnectorInstanceInternalServerError with default headers values
func NewCreateTenantConnectorInstanceInternalServerError() *CreateTenantConnectorInstanceInternalServerError {

	return &CreateTenantConnectorInstanceInternalServerError{}
}

// WithPayload adds the payload to the create tenant connector instance internal server error response
func (o *CreateTenantConnectorInstanceInternalServerError) WithPayload(payload string) *CreateTenantConnectorInstanceInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create tenant connector instance internal server error response
func (o *CreateTenantConnectorInstanceInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTenantConnectorInstanceInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
