// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// CreateTenantIngestionProfileOKCode is the HTTP code returned for type CreateTenantIngestionProfileOK
const CreateTenantIngestionProfileOKCode int = 200

/*CreateTenantIngestionProfileOK create tenant ingestion profile o k

swagger:response createTenantIngestionProfileOK
*/
type CreateTenantIngestionProfileOK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.JSONAPITenantIngestionProfile `json:"body,omitempty"`
}

// NewCreateTenantIngestionProfileOK creates CreateTenantIngestionProfileOK with default headers values
func NewCreateTenantIngestionProfileOK() *CreateTenantIngestionProfileOK {

	return &CreateTenantIngestionProfileOK{}
}

// WithPayload adds the payload to the create tenant ingestion profile o k response
func (o *CreateTenantIngestionProfileOK) WithPayload(payload *swagmodels.JSONAPITenantIngestionProfile) *CreateTenantIngestionProfileOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create tenant ingestion profile o k response
func (o *CreateTenantIngestionProfileOK) SetPayload(payload *swagmodels.JSONAPITenantIngestionProfile) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTenantIngestionProfileOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTenantIngestionProfileBadRequestCode is the HTTP code returned for type CreateTenantIngestionProfileBadRequest
const CreateTenantIngestionProfileBadRequestCode int = 400

/*CreateTenantIngestionProfileBadRequest Request data does not pass validation

swagger:response createTenantIngestionProfileBadRequest
*/
type CreateTenantIngestionProfileBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateTenantIngestionProfileBadRequest creates CreateTenantIngestionProfileBadRequest with default headers values
func NewCreateTenantIngestionProfileBadRequest() *CreateTenantIngestionProfileBadRequest {

	return &CreateTenantIngestionProfileBadRequest{}
}

// WithPayload adds the payload to the create tenant ingestion profile bad request response
func (o *CreateTenantIngestionProfileBadRequest) WithPayload(payload string) *CreateTenantIngestionProfileBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create tenant ingestion profile bad request response
func (o *CreateTenantIngestionProfileBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTenantIngestionProfileBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// CreateTenantIngestionProfileForbiddenCode is the HTTP code returned for type CreateTenantIngestionProfileForbidden
const CreateTenantIngestionProfileForbiddenCode int = 403

/*CreateTenantIngestionProfileForbidden Requestor does not have authorization to perform this action

swagger:response createTenantIngestionProfileForbidden
*/
type CreateTenantIngestionProfileForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateTenantIngestionProfileForbidden creates CreateTenantIngestionProfileForbidden with default headers values
func NewCreateTenantIngestionProfileForbidden() *CreateTenantIngestionProfileForbidden {

	return &CreateTenantIngestionProfileForbidden{}
}

// WithPayload adds the payload to the create tenant ingestion profile forbidden response
func (o *CreateTenantIngestionProfileForbidden) WithPayload(payload string) *CreateTenantIngestionProfileForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create tenant ingestion profile forbidden response
func (o *CreateTenantIngestionProfileForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTenantIngestionProfileForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// CreateTenantIngestionProfileInternalServerErrorCode is the HTTP code returned for type CreateTenantIngestionProfileInternalServerError
const CreateTenantIngestionProfileInternalServerErrorCode int = 500

/*CreateTenantIngestionProfileInternalServerError Unexpected error processing request

swagger:response createTenantIngestionProfileInternalServerError
*/
type CreateTenantIngestionProfileInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateTenantIngestionProfileInternalServerError creates CreateTenantIngestionProfileInternalServerError with default headers values
func NewCreateTenantIngestionProfileInternalServerError() *CreateTenantIngestionProfileInternalServerError {

	return &CreateTenantIngestionProfileInternalServerError{}
}

// WithPayload adds the payload to the create tenant ingestion profile internal server error response
func (o *CreateTenantIngestionProfileInternalServerError) WithPayload(payload string) *CreateTenantIngestionProfileInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create tenant ingestion profile internal server error response
func (o *CreateTenantIngestionProfileInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTenantIngestionProfileInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
