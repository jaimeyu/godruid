// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteTenantConnectorConfigHandlerFunc turns a function with the right signature into a delete tenant connector config handler
type DeleteTenantConnectorConfigHandlerFunc func(DeleteTenantConnectorConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTenantConnectorConfigHandlerFunc) Handle(params DeleteTenantConnectorConfigParams) middleware.Responder {
	return fn(params)
}

// DeleteTenantConnectorConfigHandler interface for that can handle valid delete tenant connector config params
type DeleteTenantConnectorConfigHandler interface {
	Handle(DeleteTenantConnectorConfigParams) middleware.Responder
}

// NewDeleteTenantConnectorConfig creates a new http.Handler for the delete tenant connector config operation
func NewDeleteTenantConnectorConfig(ctx *middleware.Context, handler DeleteTenantConnectorConfigHandler) *DeleteTenantConnectorConfig {
	return &DeleteTenantConnectorConfig{Context: ctx, Handler: handler}
}

/*DeleteTenantConnectorConfig swagger:route DELETE /v1/tenants/{tenantId}/connector-configs/{connectorId} TenantProvisioningService deleteTenantConnectorConfig

Delete a Tenant ConnectorConfig specified by the provided Connector Id.

*/
type DeleteTenantConnectorConfig struct {
	Context *middleware.Context
	Handler DeleteTenantConnectorConfigHandler
}

func (o *DeleteTenantConnectorConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteTenantConnectorConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
