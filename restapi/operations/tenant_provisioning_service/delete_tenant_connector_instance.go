// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteTenantConnectorInstanceHandlerFunc turns a function with the right signature into a delete tenant connector instance handler
type DeleteTenantConnectorInstanceHandlerFunc func(DeleteTenantConnectorInstanceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTenantConnectorInstanceHandlerFunc) Handle(params DeleteTenantConnectorInstanceParams) middleware.Responder {
	return fn(params)
}

// DeleteTenantConnectorInstanceHandler interface for that can handle valid delete tenant connector instance params
type DeleteTenantConnectorInstanceHandler interface {
	Handle(DeleteTenantConnectorInstanceParams) middleware.Responder
}

// NewDeleteTenantConnectorInstance creates a new http.Handler for the delete tenant connector instance operation
func NewDeleteTenantConnectorInstance(ctx *middleware.Context, handler DeleteTenantConnectorInstanceHandler) *DeleteTenantConnectorInstance {
	return &DeleteTenantConnectorInstance{Context: ctx, Handler: handler}
}

/*DeleteTenantConnectorInstance swagger:route DELETE /v1/tenants/{tenantId}/connector-instances/{connectorInstanceId} TenantProvisioningService deleteTenantConnectorInstance

Delete a Tenant ConnectorInstance specified by the provided Connector Instance Id.

*/
type DeleteTenantConnectorInstance struct {
	Context *middleware.Context
	Handler DeleteTenantConnectorInstanceHandler
}

func (o *DeleteTenantConnectorInstance) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteTenantConnectorInstanceParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
