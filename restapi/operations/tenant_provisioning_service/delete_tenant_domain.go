// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteTenantDomainHandlerFunc turns a function with the right signature into a delete tenant domain handler
type DeleteTenantDomainHandlerFunc func(DeleteTenantDomainParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTenantDomainHandlerFunc) Handle(params DeleteTenantDomainParams) middleware.Responder {
	return fn(params)
}

// DeleteTenantDomainHandler interface for that can handle valid delete tenant domain params
type DeleteTenantDomainHandler interface {
	Handle(DeleteTenantDomainParams) middleware.Responder
}

// NewDeleteTenantDomain creates a new http.Handler for the delete tenant domain operation
func NewDeleteTenantDomain(ctx *middleware.Context, handler DeleteTenantDomainHandler) *DeleteTenantDomain {
	return &DeleteTenantDomain{Context: ctx, Handler: handler}
}

/*DeleteTenantDomain swagger:route DELETE /v1/tenants/{tenantId}/domains/{domainId} TenantProvisioningService deleteTenantDomain

Delete a Tenant Domain specified by the provided Domain Id.

*/
type DeleteTenantDomain struct {
	Context *middleware.Context
	Handler DeleteTenantDomainHandler
}

func (o *DeleteTenantDomain) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteTenantDomainParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
