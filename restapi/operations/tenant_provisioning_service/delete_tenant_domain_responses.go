// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// DeleteTenantDomainOKCode is the HTTP code returned for type DeleteTenantDomainOK
const DeleteTenantDomainOKCode int = 200

/*DeleteTenantDomainOK delete tenant domain o k

swagger:response deleteTenantDomainOK
*/
type DeleteTenantDomainOK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.JSONAPITenantDomain `json:"body,omitempty"`
}

// NewDeleteTenantDomainOK creates DeleteTenantDomainOK with default headers values
func NewDeleteTenantDomainOK() *DeleteTenantDomainOK {

	return &DeleteTenantDomainOK{}
}

// WithPayload adds the payload to the delete tenant domain o k response
func (o *DeleteTenantDomainOK) WithPayload(payload *swagmodels.JSONAPITenantDomain) *DeleteTenantDomainOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete tenant domain o k response
func (o *DeleteTenantDomainOK) SetPayload(payload *swagmodels.JSONAPITenantDomain) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTenantDomainOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteTenantDomainForbiddenCode is the HTTP code returned for type DeleteTenantDomainForbidden
const DeleteTenantDomainForbiddenCode int = 403

/*DeleteTenantDomainForbidden Requestor does not have authorization to perform this action

swagger:response deleteTenantDomainForbidden
*/
type DeleteTenantDomainForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteTenantDomainForbidden creates DeleteTenantDomainForbidden with default headers values
func NewDeleteTenantDomainForbidden() *DeleteTenantDomainForbidden {

	return &DeleteTenantDomainForbidden{}
}

// WithPayload adds the payload to the delete tenant domain forbidden response
func (o *DeleteTenantDomainForbidden) WithPayload(payload string) *DeleteTenantDomainForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete tenant domain forbidden response
func (o *DeleteTenantDomainForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTenantDomainForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DeleteTenantDomainInternalServerErrorCode is the HTTP code returned for type DeleteTenantDomainInternalServerError
const DeleteTenantDomainInternalServerErrorCode int = 500

/*DeleteTenantDomainInternalServerError Unexpected error processing request

swagger:response deleteTenantDomainInternalServerError
*/
type DeleteTenantDomainInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteTenantDomainInternalServerError creates DeleteTenantDomainInternalServerError with default headers values
func NewDeleteTenantDomainInternalServerError() *DeleteTenantDomainInternalServerError {

	return &DeleteTenantDomainInternalServerError{}
}

// WithPayload adds the payload to the delete tenant domain internal server error response
func (o *DeleteTenantDomainInternalServerError) WithPayload(payload string) *DeleteTenantDomainInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete tenant domain internal server error response
func (o *DeleteTenantDomainInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteTenantDomainInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
