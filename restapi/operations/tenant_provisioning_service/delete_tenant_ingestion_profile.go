// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteTenantIngestionProfileHandlerFunc turns a function with the right signature into a delete tenant ingestion profile handler
type DeleteTenantIngestionProfileHandlerFunc func(DeleteTenantIngestionProfileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTenantIngestionProfileHandlerFunc) Handle(params DeleteTenantIngestionProfileParams) middleware.Responder {
	return fn(params)
}

// DeleteTenantIngestionProfileHandler interface for that can handle valid delete tenant ingestion profile params
type DeleteTenantIngestionProfileHandler interface {
	Handle(DeleteTenantIngestionProfileParams) middleware.Responder
}

// NewDeleteTenantIngestionProfile creates a new http.Handler for the delete tenant ingestion profile operation
func NewDeleteTenantIngestionProfile(ctx *middleware.Context, handler DeleteTenantIngestionProfileHandler) *DeleteTenantIngestionProfile {
	return &DeleteTenantIngestionProfile{Context: ctx, Handler: handler}
}

/*DeleteTenantIngestionProfile swagger:route DELETE /v1/tenants/{tenantId}/ingestion-profiles/{ingestionProfileId} TenantProvisioningService deleteTenantIngestionProfile

Delete a Tenant Ingestion Profile specified by the provided Ingestion Profile Id.

*/
type DeleteTenantIngestionProfile struct {
	Context *middleware.Context
	Handler DeleteTenantIngestionProfileHandler
}

func (o *DeleteTenantIngestionProfile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteTenantIngestionProfileParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
