// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteTenantMetadataHandlerFunc turns a function with the right signature into a delete tenant metadata handler
type DeleteTenantMetadataHandlerFunc func(DeleteTenantMetadataParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTenantMetadataHandlerFunc) Handle(params DeleteTenantMetadataParams) middleware.Responder {
	return fn(params)
}

// DeleteTenantMetadataHandler interface for that can handle valid delete tenant metadata params
type DeleteTenantMetadataHandler interface {
	Handle(DeleteTenantMetadataParams) middleware.Responder
}

// NewDeleteTenantMetadata creates a new http.Handler for the delete tenant metadata operation
func NewDeleteTenantMetadata(ctx *middleware.Context, handler DeleteTenantMetadataHandler) *DeleteTenantMetadata {
	return &DeleteTenantMetadata{Context: ctx, Handler: handler}
}

/*DeleteTenantMetadata swagger:route DELETE /v1/tenants/{tenantId}/meta TenantProvisioningService deleteTenantMetadata

Delete a Tenant Metadata record

*/
type DeleteTenantMetadata struct {
	Context *middleware.Context
	Handler DeleteTenantMetadataHandler
}

func (o *DeleteTenantMetadata) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteTenantMetadataParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
