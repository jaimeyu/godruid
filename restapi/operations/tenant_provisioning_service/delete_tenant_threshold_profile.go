// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteTenantThresholdProfileHandlerFunc turns a function with the right signature into a delete tenant threshold profile handler
type DeleteTenantThresholdProfileHandlerFunc func(DeleteTenantThresholdProfileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteTenantThresholdProfileHandlerFunc) Handle(params DeleteTenantThresholdProfileParams) middleware.Responder {
	return fn(params)
}

// DeleteTenantThresholdProfileHandler interface for that can handle valid delete tenant threshold profile params
type DeleteTenantThresholdProfileHandler interface {
	Handle(DeleteTenantThresholdProfileParams) middleware.Responder
}

// NewDeleteTenantThresholdProfile creates a new http.Handler for the delete tenant threshold profile operation
func NewDeleteTenantThresholdProfile(ctx *middleware.Context, handler DeleteTenantThresholdProfileHandler) *DeleteTenantThresholdProfile {
	return &DeleteTenantThresholdProfile{Context: ctx, Handler: handler}
}

/*DeleteTenantThresholdProfile swagger:route DELETE /v1/tenants/{tenantId}/threshold-profiles/{thrPrfId} TenantProvisioningService deleteTenantThresholdProfile

Delete a Tenant Threshold Profile specified by the provided id.

*/
type DeleteTenantThresholdProfile struct {
	Context *middleware.Context
	Handler DeleteTenantThresholdProfileHandler
}

func (o *DeleteTenantThresholdProfile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteTenantThresholdProfileParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
