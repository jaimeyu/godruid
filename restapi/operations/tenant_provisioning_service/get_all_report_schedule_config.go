// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAllReportScheduleConfigHandlerFunc turns a function with the right signature into a get all report schedule config handler
type GetAllReportScheduleConfigHandlerFunc func(GetAllReportScheduleConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllReportScheduleConfigHandlerFunc) Handle(params GetAllReportScheduleConfigParams) middleware.Responder {
	return fn(params)
}

// GetAllReportScheduleConfigHandler interface for that can handle valid get all report schedule config params
type GetAllReportScheduleConfigHandler interface {
	Handle(GetAllReportScheduleConfigParams) middleware.Responder
}

// NewGetAllReportScheduleConfig creates a new http.Handler for the get all report schedule config operation
func NewGetAllReportScheduleConfig(ctx *middleware.Context, handler GetAllReportScheduleConfigHandler) *GetAllReportScheduleConfig {
	return &GetAllReportScheduleConfig{Context: ctx, Handler: handler}
}

/*GetAllReportScheduleConfig swagger:route GET /v1/tenants/{tenantId}/report-schedule-config-list TenantProvisioningService getAllReportScheduleConfig

Retrieve all report schedule configs for the specified Tenant.

*/
type GetAllReportScheduleConfig struct {
	Context *middleware.Context
	Handler GetAllReportScheduleConfigHandler
}

func (o *GetAllReportScheduleConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAllReportScheduleConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
