// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAllSLAReportsHandlerFunc turns a function with the right signature into a get all SLA reports handler
type GetAllSLAReportsHandlerFunc func(GetAllSLAReportsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllSLAReportsHandlerFunc) Handle(params GetAllSLAReportsParams) middleware.Responder {
	return fn(params)
}

// GetAllSLAReportsHandler interface for that can handle valid get all SLA reports params
type GetAllSLAReportsHandler interface {
	Handle(GetAllSLAReportsParams) middleware.Responder
}

// NewGetAllSLAReports creates a new http.Handler for the get all SLA reports operation
func NewGetAllSLAReports(ctx *middleware.Context, handler GetAllSLAReportsHandler) *GetAllSLAReports {
	return &GetAllSLAReports{Context: ctx, Handler: handler}
}

/*GetAllSLAReports swagger:route GET /v1/tenants/{tenantId}/report-list TenantProvisioningService getAllSlaReports

Retrieve all SLA reports for the specified Tenant.

*/
type GetAllSLAReports struct {
	Context *middleware.Context
	Handler GetAllSLAReportsHandler
}

func (o *GetAllSLAReports) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAllSLAReportsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
