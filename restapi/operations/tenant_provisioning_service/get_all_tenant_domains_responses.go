// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// GetAllTenantDomainsOKCode is the HTTP code returned for type GetAllTenantDomainsOK
const GetAllTenantDomainsOKCode int = 200

/*GetAllTenantDomainsOK get all tenant domains o k

swagger:response getAllTenantDomainsOK
*/
type GetAllTenantDomainsOK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.JSONAPITenantDomainList `json:"body,omitempty"`
}

// NewGetAllTenantDomainsOK creates GetAllTenantDomainsOK with default headers values
func NewGetAllTenantDomainsOK() *GetAllTenantDomainsOK {

	return &GetAllTenantDomainsOK{}
}

// WithPayload adds the payload to the get all tenant domains o k response
func (o *GetAllTenantDomainsOK) WithPayload(payload *swagmodels.JSONAPITenantDomainList) *GetAllTenantDomainsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all tenant domains o k response
func (o *GetAllTenantDomainsOK) SetPayload(payload *swagmodels.JSONAPITenantDomainList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllTenantDomainsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAllTenantDomainsForbiddenCode is the HTTP code returned for type GetAllTenantDomainsForbidden
const GetAllTenantDomainsForbiddenCode int = 403

/*GetAllTenantDomainsForbidden Requestor does not have authorization to perform this action

swagger:response getAllTenantDomainsForbidden
*/
type GetAllTenantDomainsForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetAllTenantDomainsForbidden creates GetAllTenantDomainsForbidden with default headers values
func NewGetAllTenantDomainsForbidden() *GetAllTenantDomainsForbidden {

	return &GetAllTenantDomainsForbidden{}
}

// WithPayload adds the payload to the get all tenant domains forbidden response
func (o *GetAllTenantDomainsForbidden) WithPayload(payload string) *GetAllTenantDomainsForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all tenant domains forbidden response
func (o *GetAllTenantDomainsForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllTenantDomainsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetAllTenantDomainsInternalServerErrorCode is the HTTP code returned for type GetAllTenantDomainsInternalServerError
const GetAllTenantDomainsInternalServerErrorCode int = 500

/*GetAllTenantDomainsInternalServerError Unexpected error processing request

swagger:response getAllTenantDomainsInternalServerError
*/
type GetAllTenantDomainsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetAllTenantDomainsInternalServerError creates GetAllTenantDomainsInternalServerError with default headers values
func NewGetAllTenantDomainsInternalServerError() *GetAllTenantDomainsInternalServerError {

	return &GetAllTenantDomainsInternalServerError{}
}

// WithPayload adds the payload to the get all tenant domains internal server error response
func (o *GetAllTenantDomainsInternalServerError) WithPayload(payload string) *GetAllTenantDomainsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all tenant domains internal server error response
func (o *GetAllTenantDomainsInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllTenantDomainsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
