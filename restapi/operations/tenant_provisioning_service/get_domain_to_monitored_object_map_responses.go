// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// GetDomainToMonitoredObjectMapOKCode is the HTTP code returned for type GetDomainToMonitoredObjectMapOK
const GetDomainToMonitoredObjectMapOKCode int = 200

/*GetDomainToMonitoredObjectMapOK get domain to monitored object map o k

swagger:response getDomainToMonitoredObjectMapOK
*/
type GetDomainToMonitoredObjectMapOK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.MonitoredObjectCountByDomainResponse `json:"body,omitempty"`
}

// NewGetDomainToMonitoredObjectMapOK creates GetDomainToMonitoredObjectMapOK with default headers values
func NewGetDomainToMonitoredObjectMapOK() *GetDomainToMonitoredObjectMapOK {

	return &GetDomainToMonitoredObjectMapOK{}
}

// WithPayload adds the payload to the get domain to monitored object map o k response
func (o *GetDomainToMonitoredObjectMapOK) WithPayload(payload *swagmodels.MonitoredObjectCountByDomainResponse) *GetDomainToMonitoredObjectMapOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get domain to monitored object map o k response
func (o *GetDomainToMonitoredObjectMapOK) SetPayload(payload *swagmodels.MonitoredObjectCountByDomainResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDomainToMonitoredObjectMapOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDomainToMonitoredObjectMapBadRequestCode is the HTTP code returned for type GetDomainToMonitoredObjectMapBadRequest
const GetDomainToMonitoredObjectMapBadRequestCode int = 400

/*GetDomainToMonitoredObjectMapBadRequest Request data does not pass validation

swagger:response getDomainToMonitoredObjectMapBadRequest
*/
type GetDomainToMonitoredObjectMapBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetDomainToMonitoredObjectMapBadRequest creates GetDomainToMonitoredObjectMapBadRequest with default headers values
func NewGetDomainToMonitoredObjectMapBadRequest() *GetDomainToMonitoredObjectMapBadRequest {

	return &GetDomainToMonitoredObjectMapBadRequest{}
}

// WithPayload adds the payload to the get domain to monitored object map bad request response
func (o *GetDomainToMonitoredObjectMapBadRequest) WithPayload(payload string) *GetDomainToMonitoredObjectMapBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get domain to monitored object map bad request response
func (o *GetDomainToMonitoredObjectMapBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDomainToMonitoredObjectMapBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetDomainToMonitoredObjectMapForbiddenCode is the HTTP code returned for type GetDomainToMonitoredObjectMapForbidden
const GetDomainToMonitoredObjectMapForbiddenCode int = 403

/*GetDomainToMonitoredObjectMapForbidden Requestor does not have authorization to perform this action

swagger:response getDomainToMonitoredObjectMapForbidden
*/
type GetDomainToMonitoredObjectMapForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetDomainToMonitoredObjectMapForbidden creates GetDomainToMonitoredObjectMapForbidden with default headers values
func NewGetDomainToMonitoredObjectMapForbidden() *GetDomainToMonitoredObjectMapForbidden {

	return &GetDomainToMonitoredObjectMapForbidden{}
}

// WithPayload adds the payload to the get domain to monitored object map forbidden response
func (o *GetDomainToMonitoredObjectMapForbidden) WithPayload(payload string) *GetDomainToMonitoredObjectMapForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get domain to monitored object map forbidden response
func (o *GetDomainToMonitoredObjectMapForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDomainToMonitoredObjectMapForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetDomainToMonitoredObjectMapInternalServerErrorCode is the HTTP code returned for type GetDomainToMonitoredObjectMapInternalServerError
const GetDomainToMonitoredObjectMapInternalServerErrorCode int = 500

/*GetDomainToMonitoredObjectMapInternalServerError Unexpected error processing request

swagger:response getDomainToMonitoredObjectMapInternalServerError
*/
type GetDomainToMonitoredObjectMapInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetDomainToMonitoredObjectMapInternalServerError creates GetDomainToMonitoredObjectMapInternalServerError with default headers values
func NewGetDomainToMonitoredObjectMapInternalServerError() *GetDomainToMonitoredObjectMapInternalServerError {

	return &GetDomainToMonitoredObjectMapInternalServerError{}
}

// WithPayload adds the payload to the get domain to monitored object map internal server error response
func (o *GetDomainToMonitoredObjectMapInternalServerError) WithPayload(payload string) *GetDomainToMonitoredObjectMapInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get domain to monitored object map internal server error response
func (o *GetDomainToMonitoredObjectMapInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDomainToMonitoredObjectMapInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
