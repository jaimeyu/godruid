// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSLAReportHandlerFunc turns a function with the right signature into a get SLA report handler
type GetSLAReportHandlerFunc func(GetSLAReportParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSLAReportHandlerFunc) Handle(params GetSLAReportParams) middleware.Responder {
	return fn(params)
}

// GetSLAReportHandler interface for that can handle valid get SLA report params
type GetSLAReportHandler interface {
	Handle(GetSLAReportParams) middleware.Responder
}

// NewGetSLAReport creates a new http.Handler for the get SLA report operation
func NewGetSLAReport(ctx *middleware.Context, handler GetSLAReportHandler) *GetSLAReport {
	return &GetSLAReport{Context: ctx, Handler: handler}
}

/*GetSLAReport swagger:route GET /v1/tenants/{tenantId}/reports/{reportID} TenantProvisioningService getSlaReport

Retrieve a Tenant SLA report by id.

*/
type GetSLAReport struct {
	Context *middleware.Context
	Handler GetSLAReportHandler
}

func (o *GetSLAReport) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSLAReportParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
