// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// GetTenantDomainOKCode is the HTTP code returned for type GetTenantDomainOK
const GetTenantDomainOKCode int = 200

/*GetTenantDomainOK get tenant domain o k

swagger:response getTenantDomainOK
*/
type GetTenantDomainOK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.JSONAPITenantDomain `json:"body,omitempty"`
}

// NewGetTenantDomainOK creates GetTenantDomainOK with default headers values
func NewGetTenantDomainOK() *GetTenantDomainOK {

	return &GetTenantDomainOK{}
}

// WithPayload adds the payload to the get tenant domain o k response
func (o *GetTenantDomainOK) WithPayload(payload *swagmodels.JSONAPITenantDomain) *GetTenantDomainOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tenant domain o k response
func (o *GetTenantDomainOK) SetPayload(payload *swagmodels.JSONAPITenantDomain) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTenantDomainOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTenantDomainForbiddenCode is the HTTP code returned for type GetTenantDomainForbidden
const GetTenantDomainForbiddenCode int = 403

/*GetTenantDomainForbidden Requestor does not have authorization to perform this action

swagger:response getTenantDomainForbidden
*/
type GetTenantDomainForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetTenantDomainForbidden creates GetTenantDomainForbidden with default headers values
func NewGetTenantDomainForbidden() *GetTenantDomainForbidden {

	return &GetTenantDomainForbidden{}
}

// WithPayload adds the payload to the get tenant domain forbidden response
func (o *GetTenantDomainForbidden) WithPayload(payload string) *GetTenantDomainForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tenant domain forbidden response
func (o *GetTenantDomainForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTenantDomainForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetTenantDomainInternalServerErrorCode is the HTTP code returned for type GetTenantDomainInternalServerError
const GetTenantDomainInternalServerErrorCode int = 500

/*GetTenantDomainInternalServerError Unexpected error processing request

swagger:response getTenantDomainInternalServerError
*/
type GetTenantDomainInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetTenantDomainInternalServerError creates GetTenantDomainInternalServerError with default headers values
func NewGetTenantDomainInternalServerError() *GetTenantDomainInternalServerError {

	return &GetTenantDomainInternalServerError{}
}

// WithPayload adds the payload to the get tenant domain internal server error response
func (o *GetTenantDomainInternalServerError) WithPayload(payload string) *GetTenantDomainInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tenant domain internal server error response
func (o *GetTenantDomainInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTenantDomainInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
