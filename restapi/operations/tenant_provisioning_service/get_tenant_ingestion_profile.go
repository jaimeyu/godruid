// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetTenantIngestionProfileHandlerFunc turns a function with the right signature into a get tenant ingestion profile handler
type GetTenantIngestionProfileHandlerFunc func(GetTenantIngestionProfileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTenantIngestionProfileHandlerFunc) Handle(params GetTenantIngestionProfileParams) middleware.Responder {
	return fn(params)
}

// GetTenantIngestionProfileHandler interface for that can handle valid get tenant ingestion profile params
type GetTenantIngestionProfileHandler interface {
	Handle(GetTenantIngestionProfileParams) middleware.Responder
}

// NewGetTenantIngestionProfile creates a new http.Handler for the get tenant ingestion profile operation
func NewGetTenantIngestionProfile(ctx *middleware.Context, handler GetTenantIngestionProfileHandler) *GetTenantIngestionProfile {
	return &GetTenantIngestionProfile{Context: ctx, Handler: handler}
}

/*GetTenantIngestionProfile swagger:route GET /v1/tenants/{tenantId}/ingestion-profiles/{ingestionProfileId} TenantProvisioningService getTenantIngestionProfile

Retrieve a Tenant Ingestion Profile by id.

*/
type GetTenantIngestionProfile struct {
	Context *middleware.Context
	Handler GetTenantIngestionProfileHandler
}

func (o *GetTenantIngestionProfile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTenantIngestionProfileParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
