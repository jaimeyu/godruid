// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// GetTenantMetadataOKCode is the HTTP code returned for type GetTenantMetadataOK
const GetTenantMetadataOKCode int = 200

/*GetTenantMetadataOK get tenant metadata o k

swagger:response getTenantMetadataOK
*/
type GetTenantMetadataOK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.JSONAPITenantMetadata `json:"body,omitempty"`
}

// NewGetTenantMetadataOK creates GetTenantMetadataOK with default headers values
func NewGetTenantMetadataOK() *GetTenantMetadataOK {

	return &GetTenantMetadataOK{}
}

// WithPayload adds the payload to the get tenant metadata o k response
func (o *GetTenantMetadataOK) WithPayload(payload *swagmodels.JSONAPITenantMetadata) *GetTenantMetadataOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tenant metadata o k response
func (o *GetTenantMetadataOK) SetPayload(payload *swagmodels.JSONAPITenantMetadata) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTenantMetadataOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTenantMetadataForbiddenCode is the HTTP code returned for type GetTenantMetadataForbidden
const GetTenantMetadataForbiddenCode int = 403

/*GetTenantMetadataForbidden Requestor does not have authorization to perform this action

swagger:response getTenantMetadataForbidden
*/
type GetTenantMetadataForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetTenantMetadataForbidden creates GetTenantMetadataForbidden with default headers values
func NewGetTenantMetadataForbidden() *GetTenantMetadataForbidden {

	return &GetTenantMetadataForbidden{}
}

// WithPayload adds the payload to the get tenant metadata forbidden response
func (o *GetTenantMetadataForbidden) WithPayload(payload string) *GetTenantMetadataForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tenant metadata forbidden response
func (o *GetTenantMetadataForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTenantMetadataForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// GetTenantMetadataInternalServerErrorCode is the HTTP code returned for type GetTenantMetadataInternalServerError
const GetTenantMetadataInternalServerErrorCode int = 500

/*GetTenantMetadataInternalServerError Unexpected error processing request

swagger:response getTenantMetadataInternalServerError
*/
type GetTenantMetadataInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetTenantMetadataInternalServerError creates GetTenantMetadataInternalServerError with default headers values
func NewGetTenantMetadataInternalServerError() *GetTenantMetadataInternalServerError {

	return &GetTenantMetadataInternalServerError{}
}

// WithPayload adds the payload to the get tenant metadata internal server error response
func (o *GetTenantMetadataInternalServerError) WithPayload(payload string) *GetTenantMetadataInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tenant metadata internal server error response
func (o *GetTenantMetadataInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTenantMetadataInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
