// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// PatchTenantIngestionProfileOKCode is the HTTP code returned for type PatchTenantIngestionProfileOK
const PatchTenantIngestionProfileOKCode int = 200

/*PatchTenantIngestionProfileOK patch tenant ingestion profile o k

swagger:response patchTenantIngestionProfileOK
*/
type PatchTenantIngestionProfileOK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.JSONAPITenantIngestionProfile `json:"body,omitempty"`
}

// NewPatchTenantIngestionProfileOK creates PatchTenantIngestionProfileOK with default headers values
func NewPatchTenantIngestionProfileOK() *PatchTenantIngestionProfileOK {

	return &PatchTenantIngestionProfileOK{}
}

// WithPayload adds the payload to the patch tenant ingestion profile o k response
func (o *PatchTenantIngestionProfileOK) WithPayload(payload *swagmodels.JSONAPITenantIngestionProfile) *PatchTenantIngestionProfileOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tenant ingestion profile o k response
func (o *PatchTenantIngestionProfileOK) SetPayload(payload *swagmodels.JSONAPITenantIngestionProfile) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTenantIngestionProfileOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchTenantIngestionProfileBadRequestCode is the HTTP code returned for type PatchTenantIngestionProfileBadRequest
const PatchTenantIngestionProfileBadRequestCode int = 400

/*PatchTenantIngestionProfileBadRequest Request data does not pass validation

swagger:response patchTenantIngestionProfileBadRequest
*/
type PatchTenantIngestionProfileBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPatchTenantIngestionProfileBadRequest creates PatchTenantIngestionProfileBadRequest with default headers values
func NewPatchTenantIngestionProfileBadRequest() *PatchTenantIngestionProfileBadRequest {

	return &PatchTenantIngestionProfileBadRequest{}
}

// WithPayload adds the payload to the patch tenant ingestion profile bad request response
func (o *PatchTenantIngestionProfileBadRequest) WithPayload(payload string) *PatchTenantIngestionProfileBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tenant ingestion profile bad request response
func (o *PatchTenantIngestionProfileBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTenantIngestionProfileBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// PatchTenantIngestionProfileForbiddenCode is the HTTP code returned for type PatchTenantIngestionProfileForbidden
const PatchTenantIngestionProfileForbiddenCode int = 403

/*PatchTenantIngestionProfileForbidden Requestor does not have authorization to perform this action

swagger:response patchTenantIngestionProfileForbidden
*/
type PatchTenantIngestionProfileForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPatchTenantIngestionProfileForbidden creates PatchTenantIngestionProfileForbidden with default headers values
func NewPatchTenantIngestionProfileForbidden() *PatchTenantIngestionProfileForbidden {

	return &PatchTenantIngestionProfileForbidden{}
}

// WithPayload adds the payload to the patch tenant ingestion profile forbidden response
func (o *PatchTenantIngestionProfileForbidden) WithPayload(payload string) *PatchTenantIngestionProfileForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tenant ingestion profile forbidden response
func (o *PatchTenantIngestionProfileForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTenantIngestionProfileForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// PatchTenantIngestionProfileInternalServerErrorCode is the HTTP code returned for type PatchTenantIngestionProfileInternalServerError
const PatchTenantIngestionProfileInternalServerErrorCode int = 500

/*PatchTenantIngestionProfileInternalServerError Unexpected error processing request

swagger:response patchTenantIngestionProfileInternalServerError
*/
type PatchTenantIngestionProfileInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPatchTenantIngestionProfileInternalServerError creates PatchTenantIngestionProfileInternalServerError with default headers values
func NewPatchTenantIngestionProfileInternalServerError() *PatchTenantIngestionProfileInternalServerError {

	return &PatchTenantIngestionProfileInternalServerError{}
}

// WithPayload adds the payload to the patch tenant ingestion profile internal server error response
func (o *PatchTenantIngestionProfileInternalServerError) WithPayload(payload string) *PatchTenantIngestionProfileInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tenant ingestion profile internal server error response
func (o *PatchTenantIngestionProfileInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTenantIngestionProfileInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
