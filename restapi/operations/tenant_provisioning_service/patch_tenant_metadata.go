// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PatchTenantMetadataHandlerFunc turns a function with the right signature into a patch tenant metadata handler
type PatchTenantMetadataHandlerFunc func(PatchTenantMetadataParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchTenantMetadataHandlerFunc) Handle(params PatchTenantMetadataParams) middleware.Responder {
	return fn(params)
}

// PatchTenantMetadataHandler interface for that can handle valid patch tenant metadata params
type PatchTenantMetadataHandler interface {
	Handle(PatchTenantMetadataParams) middleware.Responder
}

// NewPatchTenantMetadata creates a new http.Handler for the patch tenant metadata operation
func NewPatchTenantMetadata(ctx *middleware.Context, handler PatchTenantMetadataHandler) *PatchTenantMetadata {
	return &PatchTenantMetadata{Context: ctx, Handler: handler}
}

/*PatchTenantMetadata swagger:route PATCH /v1/tenants/{tenantId}/meta TenantProvisioningService patchTenantMetadata

Patch a Tenant Metadata record

*/
type PatchTenantMetadata struct {
	Context *middleware.Context
	Handler PatchTenantMetadataHandler
}

func (o *PatchTenantMetadata) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchTenantMetadataParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
