// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PatchTenantMonitoredObjectHandlerFunc turns a function with the right signature into a patch tenant monitored object handler
type PatchTenantMonitoredObjectHandlerFunc func(PatchTenantMonitoredObjectParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchTenantMonitoredObjectHandlerFunc) Handle(params PatchTenantMonitoredObjectParams) middleware.Responder {
	return fn(params)
}

// PatchTenantMonitoredObjectHandler interface for that can handle valid patch tenant monitored object params
type PatchTenantMonitoredObjectHandler interface {
	Handle(PatchTenantMonitoredObjectParams) middleware.Responder
}

// NewPatchTenantMonitoredObject creates a new http.Handler for the patch tenant monitored object operation
func NewPatchTenantMonitoredObject(ctx *middleware.Context, handler PatchTenantMonitoredObjectHandler) *PatchTenantMonitoredObject {
	return &PatchTenantMonitoredObject{Context: ctx, Handler: handler}
}

/*PatchTenantMonitoredObject swagger:route PATCH /v1/tenants/{tenantId}/monitored-objects TenantProvisioningService patchTenantMonitoredObject

Patch a Tenant Monitored Object

*/
type PatchTenantMonitoredObject struct {
	Context *middleware.Context
	Handler PatchTenantMonitoredObjectHandler
}

func (o *PatchTenantMonitoredObject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchTenantMonitoredObjectParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
