// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// PatchTenantMonitoredObjectOKCode is the HTTP code returned for type PatchTenantMonitoredObjectOK
const PatchTenantMonitoredObjectOKCode int = 200

/*PatchTenantMonitoredObjectOK patch tenant monitored object o k

swagger:response patchTenantMonitoredObjectOK
*/
type PatchTenantMonitoredObjectOK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.JSONAPITenantMonitoredObject `json:"body,omitempty"`
}

// NewPatchTenantMonitoredObjectOK creates PatchTenantMonitoredObjectOK with default headers values
func NewPatchTenantMonitoredObjectOK() *PatchTenantMonitoredObjectOK {

	return &PatchTenantMonitoredObjectOK{}
}

// WithPayload adds the payload to the patch tenant monitored object o k response
func (o *PatchTenantMonitoredObjectOK) WithPayload(payload *swagmodels.JSONAPITenantMonitoredObject) *PatchTenantMonitoredObjectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tenant monitored object o k response
func (o *PatchTenantMonitoredObjectOK) SetPayload(payload *swagmodels.JSONAPITenantMonitoredObject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTenantMonitoredObjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchTenantMonitoredObjectBadRequestCode is the HTTP code returned for type PatchTenantMonitoredObjectBadRequest
const PatchTenantMonitoredObjectBadRequestCode int = 400

/*PatchTenantMonitoredObjectBadRequest Request data does not pass validation

swagger:response patchTenantMonitoredObjectBadRequest
*/
type PatchTenantMonitoredObjectBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPatchTenantMonitoredObjectBadRequest creates PatchTenantMonitoredObjectBadRequest with default headers values
func NewPatchTenantMonitoredObjectBadRequest() *PatchTenantMonitoredObjectBadRequest {

	return &PatchTenantMonitoredObjectBadRequest{}
}

// WithPayload adds the payload to the patch tenant monitored object bad request response
func (o *PatchTenantMonitoredObjectBadRequest) WithPayload(payload string) *PatchTenantMonitoredObjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tenant monitored object bad request response
func (o *PatchTenantMonitoredObjectBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTenantMonitoredObjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// PatchTenantMonitoredObjectForbiddenCode is the HTTP code returned for type PatchTenantMonitoredObjectForbidden
const PatchTenantMonitoredObjectForbiddenCode int = 403

/*PatchTenantMonitoredObjectForbidden Requestor does not have authorization to perform this action

swagger:response patchTenantMonitoredObjectForbidden
*/
type PatchTenantMonitoredObjectForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPatchTenantMonitoredObjectForbidden creates PatchTenantMonitoredObjectForbidden with default headers values
func NewPatchTenantMonitoredObjectForbidden() *PatchTenantMonitoredObjectForbidden {

	return &PatchTenantMonitoredObjectForbidden{}
}

// WithPayload adds the payload to the patch tenant monitored object forbidden response
func (o *PatchTenantMonitoredObjectForbidden) WithPayload(payload string) *PatchTenantMonitoredObjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tenant monitored object forbidden response
func (o *PatchTenantMonitoredObjectForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTenantMonitoredObjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// PatchTenantMonitoredObjectInternalServerErrorCode is the HTTP code returned for type PatchTenantMonitoredObjectInternalServerError
const PatchTenantMonitoredObjectInternalServerErrorCode int = 500

/*PatchTenantMonitoredObjectInternalServerError Unexpected error processing request

swagger:response patchTenantMonitoredObjectInternalServerError
*/
type PatchTenantMonitoredObjectInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPatchTenantMonitoredObjectInternalServerError creates PatchTenantMonitoredObjectInternalServerError with default headers values
func NewPatchTenantMonitoredObjectInternalServerError() *PatchTenantMonitoredObjectInternalServerError {

	return &PatchTenantMonitoredObjectInternalServerError{}
}

// WithPayload adds the payload to the patch tenant monitored object internal server error response
func (o *PatchTenantMonitoredObjectInternalServerError) WithPayload(payload string) *PatchTenantMonitoredObjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tenant monitored object internal server error response
func (o *PatchTenantMonitoredObjectInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTenantMonitoredObjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
