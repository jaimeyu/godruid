// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// PatchTenantThresholdProfileOKCode is the HTTP code returned for type PatchTenantThresholdProfileOK
const PatchTenantThresholdProfileOKCode int = 200

/*PatchTenantThresholdProfileOK patch tenant threshold profile o k

swagger:response patchTenantThresholdProfileOK
*/
type PatchTenantThresholdProfileOK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.JSONAPITenantThresholdProfile `json:"body,omitempty"`
}

// NewPatchTenantThresholdProfileOK creates PatchTenantThresholdProfileOK with default headers values
func NewPatchTenantThresholdProfileOK() *PatchTenantThresholdProfileOK {

	return &PatchTenantThresholdProfileOK{}
}

// WithPayload adds the payload to the patch tenant threshold profile o k response
func (o *PatchTenantThresholdProfileOK) WithPayload(payload *swagmodels.JSONAPITenantThresholdProfile) *PatchTenantThresholdProfileOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tenant threshold profile o k response
func (o *PatchTenantThresholdProfileOK) SetPayload(payload *swagmodels.JSONAPITenantThresholdProfile) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTenantThresholdProfileOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchTenantThresholdProfileBadRequestCode is the HTTP code returned for type PatchTenantThresholdProfileBadRequest
const PatchTenantThresholdProfileBadRequestCode int = 400

/*PatchTenantThresholdProfileBadRequest Request data does not pass validation

swagger:response patchTenantThresholdProfileBadRequest
*/
type PatchTenantThresholdProfileBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPatchTenantThresholdProfileBadRequest creates PatchTenantThresholdProfileBadRequest with default headers values
func NewPatchTenantThresholdProfileBadRequest() *PatchTenantThresholdProfileBadRequest {

	return &PatchTenantThresholdProfileBadRequest{}
}

// WithPayload adds the payload to the patch tenant threshold profile bad request response
func (o *PatchTenantThresholdProfileBadRequest) WithPayload(payload string) *PatchTenantThresholdProfileBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tenant threshold profile bad request response
func (o *PatchTenantThresholdProfileBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTenantThresholdProfileBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// PatchTenantThresholdProfileForbiddenCode is the HTTP code returned for type PatchTenantThresholdProfileForbidden
const PatchTenantThresholdProfileForbiddenCode int = 403

/*PatchTenantThresholdProfileForbidden Requestor does not have authorization to perform this action

swagger:response patchTenantThresholdProfileForbidden
*/
type PatchTenantThresholdProfileForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPatchTenantThresholdProfileForbidden creates PatchTenantThresholdProfileForbidden with default headers values
func NewPatchTenantThresholdProfileForbidden() *PatchTenantThresholdProfileForbidden {

	return &PatchTenantThresholdProfileForbidden{}
}

// WithPayload adds the payload to the patch tenant threshold profile forbidden response
func (o *PatchTenantThresholdProfileForbidden) WithPayload(payload string) *PatchTenantThresholdProfileForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tenant threshold profile forbidden response
func (o *PatchTenantThresholdProfileForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTenantThresholdProfileForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// PatchTenantThresholdProfileInternalServerErrorCode is the HTTP code returned for type PatchTenantThresholdProfileInternalServerError
const PatchTenantThresholdProfileInternalServerErrorCode int = 500

/*PatchTenantThresholdProfileInternalServerError Unexpected error processing request

swagger:response patchTenantThresholdProfileInternalServerError
*/
type PatchTenantThresholdProfileInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewPatchTenantThresholdProfileInternalServerError creates PatchTenantThresholdProfileInternalServerError with default headers values
func NewPatchTenantThresholdProfileInternalServerError() *PatchTenantThresholdProfileInternalServerError {

	return &PatchTenantThresholdProfileInternalServerError{}
}

// WithPayload adds the payload to the patch tenant threshold profile internal server error response
func (o *PatchTenantThresholdProfileInternalServerError) WithPayload(payload string) *PatchTenantThresholdProfileInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch tenant threshold profile internal server error response
func (o *PatchTenantThresholdProfileInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchTenantThresholdProfileInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
