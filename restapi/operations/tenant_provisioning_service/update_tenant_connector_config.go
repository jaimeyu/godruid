// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateTenantConnectorConfigHandlerFunc turns a function with the right signature into a update tenant connector config handler
type UpdateTenantConnectorConfigHandlerFunc func(UpdateTenantConnectorConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateTenantConnectorConfigHandlerFunc) Handle(params UpdateTenantConnectorConfigParams) middleware.Responder {
	return fn(params)
}

// UpdateTenantConnectorConfigHandler interface for that can handle valid update tenant connector config params
type UpdateTenantConnectorConfigHandler interface {
	Handle(UpdateTenantConnectorConfigParams) middleware.Responder
}

// NewUpdateTenantConnectorConfig creates a new http.Handler for the update tenant connector config operation
func NewUpdateTenantConnectorConfig(ctx *middleware.Context, handler UpdateTenantConnectorConfigHandler) *UpdateTenantConnectorConfig {
	return &UpdateTenantConnectorConfig{Context: ctx, Handler: handler}
}

/*UpdateTenantConnectorConfig swagger:route PUT /v1/tenants/{tenantId}/connector-configs TenantProvisioningService updateTenantConnectorConfig

Update a Tenant ConnectorConfig

*/
type UpdateTenantConnectorConfig struct {
	Context *middleware.Context
	Handler UpdateTenantConnectorConfigHandler
}

func (o *UpdateTenantConnectorConfig) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateTenantConnectorConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
