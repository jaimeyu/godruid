// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// UpdateTenantMonitoredObjectOKCode is the HTTP code returned for type UpdateTenantMonitoredObjectOK
const UpdateTenantMonitoredObjectOKCode int = 200

/*UpdateTenantMonitoredObjectOK update tenant monitored object o k

swagger:response updateTenantMonitoredObjectOK
*/
type UpdateTenantMonitoredObjectOK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.JSONAPITenantMonitoredObject `json:"body,omitempty"`
}

// NewUpdateTenantMonitoredObjectOK creates UpdateTenantMonitoredObjectOK with default headers values
func NewUpdateTenantMonitoredObjectOK() *UpdateTenantMonitoredObjectOK {

	return &UpdateTenantMonitoredObjectOK{}
}

// WithPayload adds the payload to the update tenant monitored object o k response
func (o *UpdateTenantMonitoredObjectOK) WithPayload(payload *swagmodels.JSONAPITenantMonitoredObject) *UpdateTenantMonitoredObjectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update tenant monitored object o k response
func (o *UpdateTenantMonitoredObjectOK) SetPayload(payload *swagmodels.JSONAPITenantMonitoredObject) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTenantMonitoredObjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateTenantMonitoredObjectBadRequestCode is the HTTP code returned for type UpdateTenantMonitoredObjectBadRequest
const UpdateTenantMonitoredObjectBadRequestCode int = 400

/*UpdateTenantMonitoredObjectBadRequest Request data does not pass validation

swagger:response updateTenantMonitoredObjectBadRequest
*/
type UpdateTenantMonitoredObjectBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUpdateTenantMonitoredObjectBadRequest creates UpdateTenantMonitoredObjectBadRequest with default headers values
func NewUpdateTenantMonitoredObjectBadRequest() *UpdateTenantMonitoredObjectBadRequest {

	return &UpdateTenantMonitoredObjectBadRequest{}
}

// WithPayload adds the payload to the update tenant monitored object bad request response
func (o *UpdateTenantMonitoredObjectBadRequest) WithPayload(payload string) *UpdateTenantMonitoredObjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update tenant monitored object bad request response
func (o *UpdateTenantMonitoredObjectBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTenantMonitoredObjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// UpdateTenantMonitoredObjectForbiddenCode is the HTTP code returned for type UpdateTenantMonitoredObjectForbidden
const UpdateTenantMonitoredObjectForbiddenCode int = 403

/*UpdateTenantMonitoredObjectForbidden Requestor does not have authorization to perform this action

swagger:response updateTenantMonitoredObjectForbidden
*/
type UpdateTenantMonitoredObjectForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUpdateTenantMonitoredObjectForbidden creates UpdateTenantMonitoredObjectForbidden with default headers values
func NewUpdateTenantMonitoredObjectForbidden() *UpdateTenantMonitoredObjectForbidden {

	return &UpdateTenantMonitoredObjectForbidden{}
}

// WithPayload adds the payload to the update tenant monitored object forbidden response
func (o *UpdateTenantMonitoredObjectForbidden) WithPayload(payload string) *UpdateTenantMonitoredObjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update tenant monitored object forbidden response
func (o *UpdateTenantMonitoredObjectForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTenantMonitoredObjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// UpdateTenantMonitoredObjectInternalServerErrorCode is the HTTP code returned for type UpdateTenantMonitoredObjectInternalServerError
const UpdateTenantMonitoredObjectInternalServerErrorCode int = 500

/*UpdateTenantMonitoredObjectInternalServerError Unexpected error processing request

swagger:response updateTenantMonitoredObjectInternalServerError
*/
type UpdateTenantMonitoredObjectInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUpdateTenantMonitoredObjectInternalServerError creates UpdateTenantMonitoredObjectInternalServerError with default headers values
func NewUpdateTenantMonitoredObjectInternalServerError() *UpdateTenantMonitoredObjectInternalServerError {

	return &UpdateTenantMonitoredObjectInternalServerError{}
}

// WithPayload adds the payload to the update tenant monitored object internal server error response
func (o *UpdateTenantMonitoredObjectInternalServerError) WithPayload(payload string) *UpdateTenantMonitoredObjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update tenant monitored object internal server error response
func (o *UpdateTenantMonitoredObjectInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateTenantMonitoredObjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
