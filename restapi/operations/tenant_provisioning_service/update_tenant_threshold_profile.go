// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateTenantThresholdProfileHandlerFunc turns a function with the right signature into a update tenant threshold profile handler
type UpdateTenantThresholdProfileHandlerFunc func(UpdateTenantThresholdProfileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateTenantThresholdProfileHandlerFunc) Handle(params UpdateTenantThresholdProfileParams) middleware.Responder {
	return fn(params)
}

// UpdateTenantThresholdProfileHandler interface for that can handle valid update tenant threshold profile params
type UpdateTenantThresholdProfileHandler interface {
	Handle(UpdateTenantThresholdProfileParams) middleware.Responder
}

// NewUpdateTenantThresholdProfile creates a new http.Handler for the update tenant threshold profile operation
func NewUpdateTenantThresholdProfile(ctx *middleware.Context, handler UpdateTenantThresholdProfileHandler) *UpdateTenantThresholdProfile {
	return &UpdateTenantThresholdProfile{Context: ctx, Handler: handler}
}

/*UpdateTenantThresholdProfile swagger:route PUT /v1/tenants/{tenantId}/threshold-profiles TenantProvisioningService updateTenantThresholdProfile

Update a Tenant Threshold Profile

*/
type UpdateTenantThresholdProfile struct {
	Context *middleware.Context
	Handler UpdateTenantThresholdProfileHandler
}

func (o *UpdateTenantThresholdProfile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateTenantThresholdProfileParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
