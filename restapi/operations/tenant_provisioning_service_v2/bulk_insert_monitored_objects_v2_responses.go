// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// BulkInsertMonitoredObjectsV2OKCode is the HTTP code returned for type BulkInsertMonitoredObjectsV2OK
const BulkInsertMonitoredObjectsV2OKCode int = 200

/*BulkInsertMonitoredObjectsV2OK bulk insert monitored objects v2 o k

swagger:response bulkInsertMonitoredObjectsV2OK
*/
type BulkInsertMonitoredObjectsV2OK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.BulkOperationResponseV2 `json:"body,omitempty"`
}

// NewBulkInsertMonitoredObjectsV2OK creates BulkInsertMonitoredObjectsV2OK with default headers values
func NewBulkInsertMonitoredObjectsV2OK() *BulkInsertMonitoredObjectsV2OK {

	return &BulkInsertMonitoredObjectsV2OK{}
}

// WithPayload adds the payload to the bulk insert monitored objects v2 o k response
func (o *BulkInsertMonitoredObjectsV2OK) WithPayload(payload *swagmodels.BulkOperationResponseV2) *BulkInsertMonitoredObjectsV2OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk insert monitored objects v2 o k response
func (o *BulkInsertMonitoredObjectsV2OK) SetPayload(payload *swagmodels.BulkOperationResponseV2) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkInsertMonitoredObjectsV2OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// BulkInsertMonitoredObjectsV2BadRequestCode is the HTTP code returned for type BulkInsertMonitoredObjectsV2BadRequest
const BulkInsertMonitoredObjectsV2BadRequestCode int = 400

/*BulkInsertMonitoredObjectsV2BadRequest Request data does not pass validation

swagger:response bulkInsertMonitoredObjectsV2BadRequest
*/
type BulkInsertMonitoredObjectsV2BadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewBulkInsertMonitoredObjectsV2BadRequest creates BulkInsertMonitoredObjectsV2BadRequest with default headers values
func NewBulkInsertMonitoredObjectsV2BadRequest() *BulkInsertMonitoredObjectsV2BadRequest {

	return &BulkInsertMonitoredObjectsV2BadRequest{}
}

// WithPayload adds the payload to the bulk insert monitored objects v2 bad request response
func (o *BulkInsertMonitoredObjectsV2BadRequest) WithPayload(payload string) *BulkInsertMonitoredObjectsV2BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk insert monitored objects v2 bad request response
func (o *BulkInsertMonitoredObjectsV2BadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkInsertMonitoredObjectsV2BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// BulkInsertMonitoredObjectsV2ForbiddenCode is the HTTP code returned for type BulkInsertMonitoredObjectsV2Forbidden
const BulkInsertMonitoredObjectsV2ForbiddenCode int = 403

/*BulkInsertMonitoredObjectsV2Forbidden Requestor does not have authorization to perform this action

swagger:response bulkInsertMonitoredObjectsV2Forbidden
*/
type BulkInsertMonitoredObjectsV2Forbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewBulkInsertMonitoredObjectsV2Forbidden creates BulkInsertMonitoredObjectsV2Forbidden with default headers values
func NewBulkInsertMonitoredObjectsV2Forbidden() *BulkInsertMonitoredObjectsV2Forbidden {

	return &BulkInsertMonitoredObjectsV2Forbidden{}
}

// WithPayload adds the payload to the bulk insert monitored objects v2 forbidden response
func (o *BulkInsertMonitoredObjectsV2Forbidden) WithPayload(payload string) *BulkInsertMonitoredObjectsV2Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk insert monitored objects v2 forbidden response
func (o *BulkInsertMonitoredObjectsV2Forbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkInsertMonitoredObjectsV2Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// BulkInsertMonitoredObjectsV2InternalServerErrorCode is the HTTP code returned for type BulkInsertMonitoredObjectsV2InternalServerError
const BulkInsertMonitoredObjectsV2InternalServerErrorCode int = 500

/*BulkInsertMonitoredObjectsV2InternalServerError Unexpected error processing request

swagger:response bulkInsertMonitoredObjectsV2InternalServerError
*/
type BulkInsertMonitoredObjectsV2InternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewBulkInsertMonitoredObjectsV2InternalServerError creates BulkInsertMonitoredObjectsV2InternalServerError with default headers values
func NewBulkInsertMonitoredObjectsV2InternalServerError() *BulkInsertMonitoredObjectsV2InternalServerError {

	return &BulkInsertMonitoredObjectsV2InternalServerError{}
}

// WithPayload adds the payload to the bulk insert monitored objects v2 internal server error response
func (o *BulkInsertMonitoredObjectsV2InternalServerError) WithPayload(payload string) *BulkInsertMonitoredObjectsV2InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk insert monitored objects v2 internal server error response
func (o *BulkInsertMonitoredObjectsV2InternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkInsertMonitoredObjectsV2InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
