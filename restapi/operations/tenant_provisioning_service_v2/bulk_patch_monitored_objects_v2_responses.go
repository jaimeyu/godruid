// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// BulkPatchMonitoredObjectsV2OKCode is the HTTP code returned for type BulkPatchMonitoredObjectsV2OK
const BulkPatchMonitoredObjectsV2OKCode int = 200

/*BulkPatchMonitoredObjectsV2OK bulk patch monitored objects v2 o k

swagger:response bulkPatchMonitoredObjectsV2OK
*/
type BulkPatchMonitoredObjectsV2OK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.BulkOperationResponseV2 `json:"body,omitempty"`
}

// NewBulkPatchMonitoredObjectsV2OK creates BulkPatchMonitoredObjectsV2OK with default headers values
func NewBulkPatchMonitoredObjectsV2OK() *BulkPatchMonitoredObjectsV2OK {

	return &BulkPatchMonitoredObjectsV2OK{}
}

// WithPayload adds the payload to the bulk patch monitored objects v2 o k response
func (o *BulkPatchMonitoredObjectsV2OK) WithPayload(payload *swagmodels.BulkOperationResponseV2) *BulkPatchMonitoredObjectsV2OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk patch monitored objects v2 o k response
func (o *BulkPatchMonitoredObjectsV2OK) SetPayload(payload *swagmodels.BulkOperationResponseV2) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkPatchMonitoredObjectsV2OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// BulkPatchMonitoredObjectsV2BadRequestCode is the HTTP code returned for type BulkPatchMonitoredObjectsV2BadRequest
const BulkPatchMonitoredObjectsV2BadRequestCode int = 400

/*BulkPatchMonitoredObjectsV2BadRequest Request data does not pass validation

swagger:response bulkPatchMonitoredObjectsV2BadRequest
*/
type BulkPatchMonitoredObjectsV2BadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewBulkPatchMonitoredObjectsV2BadRequest creates BulkPatchMonitoredObjectsV2BadRequest with default headers values
func NewBulkPatchMonitoredObjectsV2BadRequest() *BulkPatchMonitoredObjectsV2BadRequest {

	return &BulkPatchMonitoredObjectsV2BadRequest{}
}

// WithPayload adds the payload to the bulk patch monitored objects v2 bad request response
func (o *BulkPatchMonitoredObjectsV2BadRequest) WithPayload(payload string) *BulkPatchMonitoredObjectsV2BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk patch monitored objects v2 bad request response
func (o *BulkPatchMonitoredObjectsV2BadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkPatchMonitoredObjectsV2BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// BulkPatchMonitoredObjectsV2ForbiddenCode is the HTTP code returned for type BulkPatchMonitoredObjectsV2Forbidden
const BulkPatchMonitoredObjectsV2ForbiddenCode int = 403

/*BulkPatchMonitoredObjectsV2Forbidden Requestor does not have authorization to perform this action

swagger:response bulkPatchMonitoredObjectsV2Forbidden
*/
type BulkPatchMonitoredObjectsV2Forbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewBulkPatchMonitoredObjectsV2Forbidden creates BulkPatchMonitoredObjectsV2Forbidden with default headers values
func NewBulkPatchMonitoredObjectsV2Forbidden() *BulkPatchMonitoredObjectsV2Forbidden {

	return &BulkPatchMonitoredObjectsV2Forbidden{}
}

// WithPayload adds the payload to the bulk patch monitored objects v2 forbidden response
func (o *BulkPatchMonitoredObjectsV2Forbidden) WithPayload(payload string) *BulkPatchMonitoredObjectsV2Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk patch monitored objects v2 forbidden response
func (o *BulkPatchMonitoredObjectsV2Forbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkPatchMonitoredObjectsV2Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// BulkPatchMonitoredObjectsV2InternalServerErrorCode is the HTTP code returned for type BulkPatchMonitoredObjectsV2InternalServerError
const BulkPatchMonitoredObjectsV2InternalServerErrorCode int = 500

/*BulkPatchMonitoredObjectsV2InternalServerError Unexpected error processing request

swagger:response bulkPatchMonitoredObjectsV2InternalServerError
*/
type BulkPatchMonitoredObjectsV2InternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewBulkPatchMonitoredObjectsV2InternalServerError creates BulkPatchMonitoredObjectsV2InternalServerError with default headers values
func NewBulkPatchMonitoredObjectsV2InternalServerError() *BulkPatchMonitoredObjectsV2InternalServerError {

	return &BulkPatchMonitoredObjectsV2InternalServerError{}
}

// WithPayload adds the payload to the bulk patch monitored objects v2 internal server error response
func (o *BulkPatchMonitoredObjectsV2InternalServerError) WithPayload(payload string) *BulkPatchMonitoredObjectsV2InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk patch monitored objects v2 internal server error response
func (o *BulkPatchMonitoredObjectsV2InternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkPatchMonitoredObjectsV2InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
