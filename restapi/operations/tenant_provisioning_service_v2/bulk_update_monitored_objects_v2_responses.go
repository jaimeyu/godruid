// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// BulkUpdateMonitoredObjectsV2OKCode is the HTTP code returned for type BulkUpdateMonitoredObjectsV2OK
const BulkUpdateMonitoredObjectsV2OKCode int = 200

/*BulkUpdateMonitoredObjectsV2OK bulk update monitored objects v2 o k

swagger:response bulkUpdateMonitoredObjectsV2OK
*/
type BulkUpdateMonitoredObjectsV2OK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.BulkOperationResponseV2 `json:"body,omitempty"`
}

// NewBulkUpdateMonitoredObjectsV2OK creates BulkUpdateMonitoredObjectsV2OK with default headers values
func NewBulkUpdateMonitoredObjectsV2OK() *BulkUpdateMonitoredObjectsV2OK {

	return &BulkUpdateMonitoredObjectsV2OK{}
}

// WithPayload adds the payload to the bulk update monitored objects v2 o k response
func (o *BulkUpdateMonitoredObjectsV2OK) WithPayload(payload *swagmodels.BulkOperationResponseV2) *BulkUpdateMonitoredObjectsV2OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk update monitored objects v2 o k response
func (o *BulkUpdateMonitoredObjectsV2OK) SetPayload(payload *swagmodels.BulkOperationResponseV2) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkUpdateMonitoredObjectsV2OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// BulkUpdateMonitoredObjectsV2BadRequestCode is the HTTP code returned for type BulkUpdateMonitoredObjectsV2BadRequest
const BulkUpdateMonitoredObjectsV2BadRequestCode int = 400

/*BulkUpdateMonitoredObjectsV2BadRequest Request data does not pass validation

swagger:response bulkUpdateMonitoredObjectsV2BadRequest
*/
type BulkUpdateMonitoredObjectsV2BadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewBulkUpdateMonitoredObjectsV2BadRequest creates BulkUpdateMonitoredObjectsV2BadRequest with default headers values
func NewBulkUpdateMonitoredObjectsV2BadRequest() *BulkUpdateMonitoredObjectsV2BadRequest {

	return &BulkUpdateMonitoredObjectsV2BadRequest{}
}

// WithPayload adds the payload to the bulk update monitored objects v2 bad request response
func (o *BulkUpdateMonitoredObjectsV2BadRequest) WithPayload(payload string) *BulkUpdateMonitoredObjectsV2BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk update monitored objects v2 bad request response
func (o *BulkUpdateMonitoredObjectsV2BadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkUpdateMonitoredObjectsV2BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// BulkUpdateMonitoredObjectsV2ForbiddenCode is the HTTP code returned for type BulkUpdateMonitoredObjectsV2Forbidden
const BulkUpdateMonitoredObjectsV2ForbiddenCode int = 403

/*BulkUpdateMonitoredObjectsV2Forbidden Requestor does not have authorization to perform this action

swagger:response bulkUpdateMonitoredObjectsV2Forbidden
*/
type BulkUpdateMonitoredObjectsV2Forbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewBulkUpdateMonitoredObjectsV2Forbidden creates BulkUpdateMonitoredObjectsV2Forbidden with default headers values
func NewBulkUpdateMonitoredObjectsV2Forbidden() *BulkUpdateMonitoredObjectsV2Forbidden {

	return &BulkUpdateMonitoredObjectsV2Forbidden{}
}

// WithPayload adds the payload to the bulk update monitored objects v2 forbidden response
func (o *BulkUpdateMonitoredObjectsV2Forbidden) WithPayload(payload string) *BulkUpdateMonitoredObjectsV2Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk update monitored objects v2 forbidden response
func (o *BulkUpdateMonitoredObjectsV2Forbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkUpdateMonitoredObjectsV2Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// BulkUpdateMonitoredObjectsV2InternalServerErrorCode is the HTTP code returned for type BulkUpdateMonitoredObjectsV2InternalServerError
const BulkUpdateMonitoredObjectsV2InternalServerErrorCode int = 500

/*BulkUpdateMonitoredObjectsV2InternalServerError Unexpected error processing request

swagger:response bulkUpdateMonitoredObjectsV2InternalServerError
*/
type BulkUpdateMonitoredObjectsV2InternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewBulkUpdateMonitoredObjectsV2InternalServerError creates BulkUpdateMonitoredObjectsV2InternalServerError with default headers values
func NewBulkUpdateMonitoredObjectsV2InternalServerError() *BulkUpdateMonitoredObjectsV2InternalServerError {

	return &BulkUpdateMonitoredObjectsV2InternalServerError{}
}

// WithPayload adds the payload to the bulk update monitored objects v2 internal server error response
func (o *BulkUpdateMonitoredObjectsV2InternalServerError) WithPayload(payload string) *BulkUpdateMonitoredObjectsV2InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the bulk update monitored objects v2 internal server error response
func (o *BulkUpdateMonitoredObjectsV2InternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BulkUpdateMonitoredObjectsV2InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
