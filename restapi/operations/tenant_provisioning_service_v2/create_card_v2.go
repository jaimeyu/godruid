// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateCardV2HandlerFunc turns a function with the right signature into a create card v2 handler
type CreateCardV2HandlerFunc func(CreateCardV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCardV2HandlerFunc) Handle(params CreateCardV2Params) middleware.Responder {
	return fn(params)
}

// CreateCardV2Handler interface for that can handle valid create card v2 params
type CreateCardV2Handler interface {
	Handle(CreateCardV2Params) middleware.Responder
}

// NewCreateCardV2 creates a new http.Handler for the create card v2 operation
func NewCreateCardV2(ctx *middleware.Context, handler CreateCardV2Handler) *CreateCardV2 {
	return &CreateCardV2{Context: ctx, Handler: handler}
}

/*CreateCardV2 swagger:route POST /v2/cards TenantProvisioningServiceV2 createCardV2

Create a Card for a Tenant.

*/
type CreateCardV2 struct {
	Context *middleware.Context
	Handler CreateCardV2Handler
}

func (o *CreateCardV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateCardV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
