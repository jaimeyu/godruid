// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// CreateCardV2CreatedCode is the HTTP code returned for type CreateCardV2Created
const CreateCardV2CreatedCode int = 201

/*CreateCardV2Created create card v2 created

swagger:response createCardV2Created
*/
type CreateCardV2Created struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.CardResponse `json:"body,omitempty"`
}

// NewCreateCardV2Created creates CreateCardV2Created with default headers values
func NewCreateCardV2Created() *CreateCardV2Created {

	return &CreateCardV2Created{}
}

// WithPayload adds the payload to the create card v2 created response
func (o *CreateCardV2Created) WithPayload(payload *swagmodels.CardResponse) *CreateCardV2Created {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create card v2 created response
func (o *CreateCardV2Created) SetPayload(payload *swagmodels.CardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateCardV2Created) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateCardV2BadRequestCode is the HTTP code returned for type CreateCardV2BadRequest
const CreateCardV2BadRequestCode int = 400

/*CreateCardV2BadRequest Request data does not pass validation

swagger:response createCardV2BadRequest
*/
type CreateCardV2BadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateCardV2BadRequest creates CreateCardV2BadRequest with default headers values
func NewCreateCardV2BadRequest() *CreateCardV2BadRequest {

	return &CreateCardV2BadRequest{}
}

// WithPayload adds the payload to the create card v2 bad request response
func (o *CreateCardV2BadRequest) WithPayload(payload string) *CreateCardV2BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create card v2 bad request response
func (o *CreateCardV2BadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateCardV2BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// CreateCardV2ForbiddenCode is the HTTP code returned for type CreateCardV2Forbidden
const CreateCardV2ForbiddenCode int = 403

/*CreateCardV2Forbidden Requestor does not have authorization to perform this action

swagger:response createCardV2Forbidden
*/
type CreateCardV2Forbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateCardV2Forbidden creates CreateCardV2Forbidden with default headers values
func NewCreateCardV2Forbidden() *CreateCardV2Forbidden {

	return &CreateCardV2Forbidden{}
}

// WithPayload adds the payload to the create card v2 forbidden response
func (o *CreateCardV2Forbidden) WithPayload(payload string) *CreateCardV2Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create card v2 forbidden response
func (o *CreateCardV2Forbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateCardV2Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// CreateCardV2ConflictCode is the HTTP code returned for type CreateCardV2Conflict
const CreateCardV2ConflictCode int = 409

/*CreateCardV2Conflict The Card being provisioned already exists

swagger:response createCardV2Conflict
*/
type CreateCardV2Conflict struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateCardV2Conflict creates CreateCardV2Conflict with default headers values
func NewCreateCardV2Conflict() *CreateCardV2Conflict {

	return &CreateCardV2Conflict{}
}

// WithPayload adds the payload to the create card v2 conflict response
func (o *CreateCardV2Conflict) WithPayload(payload string) *CreateCardV2Conflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create card v2 conflict response
func (o *CreateCardV2Conflict) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateCardV2Conflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// CreateCardV2InternalServerErrorCode is the HTTP code returned for type CreateCardV2InternalServerError
const CreateCardV2InternalServerErrorCode int = 500

/*CreateCardV2InternalServerError Unexpected error processing request

swagger:response createCardV2InternalServerError
*/
type CreateCardV2InternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateCardV2InternalServerError creates CreateCardV2InternalServerError with default headers values
func NewCreateCardV2InternalServerError() *CreateCardV2InternalServerError {

	return &CreateCardV2InternalServerError{}
}

// WithPayload adds the payload to the create card v2 internal server error response
func (o *CreateCardV2InternalServerError) WithPayload(payload string) *CreateCardV2InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create card v2 internal server error response
func (o *CreateCardV2InternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateCardV2InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
