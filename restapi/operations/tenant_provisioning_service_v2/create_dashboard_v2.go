// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateDashboardV2HandlerFunc turns a function with the right signature into a create dashboard v2 handler
type CreateDashboardV2HandlerFunc func(CreateDashboardV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateDashboardV2HandlerFunc) Handle(params CreateDashboardV2Params) middleware.Responder {
	return fn(params)
}

// CreateDashboardV2Handler interface for that can handle valid create dashboard v2 params
type CreateDashboardV2Handler interface {
	Handle(CreateDashboardV2Params) middleware.Responder
}

// NewCreateDashboardV2 creates a new http.Handler for the create dashboard v2 operation
func NewCreateDashboardV2(ctx *middleware.Context, handler CreateDashboardV2Handler) *CreateDashboardV2 {
	return &CreateDashboardV2{Context: ctx, Handler: handler}
}

/*CreateDashboardV2 swagger:route POST /v2/dashboards TenantProvisioningServiceV2 createDashboardV2

Create a Dashboard for a Tenant.

*/
type CreateDashboardV2 struct {
	Context *middleware.Context
	Handler CreateDashboardV2Handler
}

func (o *CreateDashboardV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateDashboardV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
