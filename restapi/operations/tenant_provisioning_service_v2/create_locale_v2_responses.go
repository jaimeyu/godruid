// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// CreateLocaleV2CreatedCode is the HTTP code returned for type CreateLocaleV2Created
const CreateLocaleV2CreatedCode int = 201

/*CreateLocaleV2Created create locale v2 created

swagger:response createLocaleV2Created
*/
type CreateLocaleV2Created struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.LocaleResponse `json:"body,omitempty"`
}

// NewCreateLocaleV2Created creates CreateLocaleV2Created with default headers values
func NewCreateLocaleV2Created() *CreateLocaleV2Created {

	return &CreateLocaleV2Created{}
}

// WithPayload adds the payload to the create locale v2 created response
func (o *CreateLocaleV2Created) WithPayload(payload *swagmodels.LocaleResponse) *CreateLocaleV2Created {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create locale v2 created response
func (o *CreateLocaleV2Created) SetPayload(payload *swagmodels.LocaleResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLocaleV2Created) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateLocaleV2BadRequestCode is the HTTP code returned for type CreateLocaleV2BadRequest
const CreateLocaleV2BadRequestCode int = 400

/*CreateLocaleV2BadRequest Request data does not pass validation

swagger:response createLocaleV2BadRequest
*/
type CreateLocaleV2BadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateLocaleV2BadRequest creates CreateLocaleV2BadRequest with default headers values
func NewCreateLocaleV2BadRequest() *CreateLocaleV2BadRequest {

	return &CreateLocaleV2BadRequest{}
}

// WithPayload adds the payload to the create locale v2 bad request response
func (o *CreateLocaleV2BadRequest) WithPayload(payload string) *CreateLocaleV2BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create locale v2 bad request response
func (o *CreateLocaleV2BadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLocaleV2BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// CreateLocaleV2ForbiddenCode is the HTTP code returned for type CreateLocaleV2Forbidden
const CreateLocaleV2ForbiddenCode int = 403

/*CreateLocaleV2Forbidden Requestor does not have authorization to perform this action

swagger:response createLocaleV2Forbidden
*/
type CreateLocaleV2Forbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateLocaleV2Forbidden creates CreateLocaleV2Forbidden with default headers values
func NewCreateLocaleV2Forbidden() *CreateLocaleV2Forbidden {

	return &CreateLocaleV2Forbidden{}
}

// WithPayload adds the payload to the create locale v2 forbidden response
func (o *CreateLocaleV2Forbidden) WithPayload(payload string) *CreateLocaleV2Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create locale v2 forbidden response
func (o *CreateLocaleV2Forbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLocaleV2Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// CreateLocaleV2ConflictCode is the HTTP code returned for type CreateLocaleV2Conflict
const CreateLocaleV2ConflictCode int = 409

/*CreateLocaleV2Conflict The Locale being provisioned already exists

swagger:response createLocaleV2Conflict
*/
type CreateLocaleV2Conflict struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateLocaleV2Conflict creates CreateLocaleV2Conflict with default headers values
func NewCreateLocaleV2Conflict() *CreateLocaleV2Conflict {

	return &CreateLocaleV2Conflict{}
}

// WithPayload adds the payload to the create locale v2 conflict response
func (o *CreateLocaleV2Conflict) WithPayload(payload string) *CreateLocaleV2Conflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create locale v2 conflict response
func (o *CreateLocaleV2Conflict) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLocaleV2Conflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// CreateLocaleV2InternalServerErrorCode is the HTTP code returned for type CreateLocaleV2InternalServerError
const CreateLocaleV2InternalServerErrorCode int = 500

/*CreateLocaleV2InternalServerError Unexpected error processing request

swagger:response createLocaleV2InternalServerError
*/
type CreateLocaleV2InternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCreateLocaleV2InternalServerError creates CreateLocaleV2InternalServerError with default headers values
func NewCreateLocaleV2InternalServerError() *CreateLocaleV2InternalServerError {

	return &CreateLocaleV2InternalServerError{}
}

// WithPayload adds the payload to the create locale v2 internal server error response
func (o *CreateLocaleV2InternalServerError) WithPayload(payload string) *CreateLocaleV2InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create locale v2 internal server error response
func (o *CreateLocaleV2InternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateLocaleV2InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
