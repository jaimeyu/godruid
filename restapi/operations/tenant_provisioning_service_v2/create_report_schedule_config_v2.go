// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateReportScheduleConfigV2HandlerFunc turns a function with the right signature into a create report schedule config v2 handler
type CreateReportScheduleConfigV2HandlerFunc func(CreateReportScheduleConfigV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateReportScheduleConfigV2HandlerFunc) Handle(params CreateReportScheduleConfigV2Params) middleware.Responder {
	return fn(params)
}

// CreateReportScheduleConfigV2Handler interface for that can handle valid create report schedule config v2 params
type CreateReportScheduleConfigV2Handler interface {
	Handle(CreateReportScheduleConfigV2Params) middleware.Responder
}

// NewCreateReportScheduleConfigV2 creates a new http.Handler for the create report schedule config v2 operation
func NewCreateReportScheduleConfigV2(ctx *middleware.Context, handler CreateReportScheduleConfigV2Handler) *CreateReportScheduleConfigV2 {
	return &CreateReportScheduleConfigV2{Context: ctx, Handler: handler}
}

/*CreateReportScheduleConfigV2 swagger:route POST /v2/report-schedule-configs TenantProvisioningServiceV2 createReportScheduleConfigV2

Create a report schedule configuration for a Tenant.

*/
type CreateReportScheduleConfigV2 struct {
	Context *middleware.Context
	Handler CreateReportScheduleConfigV2Handler
}

func (o *CreateReportScheduleConfigV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateReportScheduleConfigV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
