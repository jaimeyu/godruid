// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteDataCleaningProfileHandlerFunc turns a function with the right signature into a delete data cleaning profile handler
type DeleteDataCleaningProfileHandlerFunc func(DeleteDataCleaningProfileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteDataCleaningProfileHandlerFunc) Handle(params DeleteDataCleaningProfileParams) middleware.Responder {
	return fn(params)
}

// DeleteDataCleaningProfileHandler interface for that can handle valid delete data cleaning profile params
type DeleteDataCleaningProfileHandler interface {
	Handle(DeleteDataCleaningProfileParams) middleware.Responder
}

// NewDeleteDataCleaningProfile creates a new http.Handler for the delete data cleaning profile operation
func NewDeleteDataCleaningProfile(ctx *middleware.Context, handler DeleteDataCleaningProfileHandler) *DeleteDataCleaningProfile {
	return &DeleteDataCleaningProfile{Context: ctx, Handler: handler}
}

/*DeleteDataCleaningProfile swagger:route DELETE /v2/data-cleaning-profiles/{profileId} TenantProvisioningServiceV2 deleteDataCleaningProfile

Delete a Data Cleaning Profile for a Tenant.

*/
type DeleteDataCleaningProfile struct {
	Context *middleware.Context
	Handler DeleteDataCleaningProfileHandler
}

func (o *DeleteDataCleaningProfile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteDataCleaningProfileParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
