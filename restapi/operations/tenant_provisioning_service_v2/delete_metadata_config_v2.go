// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteMetadataConfigV2HandlerFunc turns a function with the right signature into a delete metadata config v2 handler
type DeleteMetadataConfigV2HandlerFunc func(DeleteMetadataConfigV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteMetadataConfigV2HandlerFunc) Handle(params DeleteMetadataConfigV2Params) middleware.Responder {
	return fn(params)
}

// DeleteMetadataConfigV2Handler interface for that can handle valid delete metadata config v2 params
type DeleteMetadataConfigV2Handler interface {
	Handle(DeleteMetadataConfigV2Params) middleware.Responder
}

// NewDeleteMetadataConfigV2 creates a new http.Handler for the delete metadata config v2 operation
func NewDeleteMetadataConfigV2(ctx *middleware.Context, handler DeleteMetadataConfigV2Handler) *DeleteMetadataConfigV2 {
	return &DeleteMetadataConfigV2{Context: ctx, Handler: handler}
}

/*DeleteMetadataConfigV2 swagger:route DELETE /v2/metadata-configs/{MetadataConfigId} TenantProvisioningServiceV2 deleteMetadataConfigV2

Delete a Tenant Metadata Configuration specified by the provided Metadata Configuration Id.

*/
type DeleteMetadataConfigV2 struct {
	Context *middleware.Context
	Handler DeleteMetadataConfigV2Handler
}

func (o *DeleteMetadataConfigV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteMetadataConfigV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
