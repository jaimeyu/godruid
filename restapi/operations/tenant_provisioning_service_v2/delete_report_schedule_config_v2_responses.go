// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// DeleteReportScheduleConfigV2OKCode is the HTTP code returned for type DeleteReportScheduleConfigV2OK
const DeleteReportScheduleConfigV2OKCode int = 200

/*DeleteReportScheduleConfigV2OK delete report schedule config v2 o k

swagger:response deleteReportScheduleConfigV2OK
*/
type DeleteReportScheduleConfigV2OK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.ReportScheduleConfigResponse `json:"body,omitempty"`
}

// NewDeleteReportScheduleConfigV2OK creates DeleteReportScheduleConfigV2OK with default headers values
func NewDeleteReportScheduleConfigV2OK() *DeleteReportScheduleConfigV2OK {

	return &DeleteReportScheduleConfigV2OK{}
}

// WithPayload adds the payload to the delete report schedule config v2 o k response
func (o *DeleteReportScheduleConfigV2OK) WithPayload(payload *swagmodels.ReportScheduleConfigResponse) *DeleteReportScheduleConfigV2OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete report schedule config v2 o k response
func (o *DeleteReportScheduleConfigV2OK) SetPayload(payload *swagmodels.ReportScheduleConfigResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteReportScheduleConfigV2OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteReportScheduleConfigV2ForbiddenCode is the HTTP code returned for type DeleteReportScheduleConfigV2Forbidden
const DeleteReportScheduleConfigV2ForbiddenCode int = 403

/*DeleteReportScheduleConfigV2Forbidden Requestor does not have authorization to perform this action

swagger:response deleteReportScheduleConfigV2Forbidden
*/
type DeleteReportScheduleConfigV2Forbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteReportScheduleConfigV2Forbidden creates DeleteReportScheduleConfigV2Forbidden with default headers values
func NewDeleteReportScheduleConfigV2Forbidden() *DeleteReportScheduleConfigV2Forbidden {

	return &DeleteReportScheduleConfigV2Forbidden{}
}

// WithPayload adds the payload to the delete report schedule config v2 forbidden response
func (o *DeleteReportScheduleConfigV2Forbidden) WithPayload(payload string) *DeleteReportScheduleConfigV2Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete report schedule config v2 forbidden response
func (o *DeleteReportScheduleConfigV2Forbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteReportScheduleConfigV2Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DeleteReportScheduleConfigV2NotFoundCode is the HTTP code returned for type DeleteReportScheduleConfigV2NotFound
const DeleteReportScheduleConfigV2NotFoundCode int = 404

/*DeleteReportScheduleConfigV2NotFound Requested Report Schedule Configuration is not provisioned

swagger:response deleteReportScheduleConfigV2NotFound
*/
type DeleteReportScheduleConfigV2NotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteReportScheduleConfigV2NotFound creates DeleteReportScheduleConfigV2NotFound with default headers values
func NewDeleteReportScheduleConfigV2NotFound() *DeleteReportScheduleConfigV2NotFound {

	return &DeleteReportScheduleConfigV2NotFound{}
}

// WithPayload adds the payload to the delete report schedule config v2 not found response
func (o *DeleteReportScheduleConfigV2NotFound) WithPayload(payload string) *DeleteReportScheduleConfigV2NotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete report schedule config v2 not found response
func (o *DeleteReportScheduleConfigV2NotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteReportScheduleConfigV2NotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DeleteReportScheduleConfigV2InternalServerErrorCode is the HTTP code returned for type DeleteReportScheduleConfigV2InternalServerError
const DeleteReportScheduleConfigV2InternalServerErrorCode int = 500

/*DeleteReportScheduleConfigV2InternalServerError Unexpected error processing request

swagger:response deleteReportScheduleConfigV2InternalServerError
*/
type DeleteReportScheduleConfigV2InternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDeleteReportScheduleConfigV2InternalServerError creates DeleteReportScheduleConfigV2InternalServerError with default headers values
func NewDeleteReportScheduleConfigV2InternalServerError() *DeleteReportScheduleConfigV2InternalServerError {

	return &DeleteReportScheduleConfigV2InternalServerError{}
}

// WithPayload adds the payload to the delete report schedule config v2 internal server error response
func (o *DeleteReportScheduleConfigV2InternalServerError) WithPayload(payload string) *DeleteReportScheduleConfigV2InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete report schedule config v2 internal server error response
func (o *DeleteReportScheduleConfigV2InternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteReportScheduleConfigV2InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
