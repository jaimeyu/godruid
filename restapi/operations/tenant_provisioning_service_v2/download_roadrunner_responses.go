// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/runtime"
)

// DownloadRoadrunnerOKCode is the HTTP code returned for type DownloadRoadrunnerOK
const DownloadRoadrunnerOKCode int = 200

/*DownloadRoadrunnerOK download roadrunner archive

swagger:response downloadRoadrunnerOK
*/
type DownloadRoadrunnerOK struct {
	/*

	  Default: "attachment; filename=DataHubConnector.tar.gz;"
	*/
	ContentDisposition string `json:"Content-Disposition"`
	/*

	  Default: "application/octet-stream"
	*/
	ContentType string `json:"Content-Type"`

	/*
	  In: Body
	*/
	Payload io.ReadCloser `json:"body,omitempty"`
}

// NewDownloadRoadrunnerOK creates DownloadRoadrunnerOK with default headers values
func NewDownloadRoadrunnerOK() *DownloadRoadrunnerOK {

	var (
		// initialize headers with default values

		contentDispositionDefault = string("attachment; filename=DataHubConnector.tar.gz;")
		contentTypeDefault        = string("application/octet-stream")
	)

	return &DownloadRoadrunnerOK{

		ContentDisposition: contentDispositionDefault,

		ContentType: contentTypeDefault,
	}
}

// WithContentDisposition adds the contentDisposition to the download roadrunner o k response
func (o *DownloadRoadrunnerOK) WithContentDisposition(contentDisposition string) *DownloadRoadrunnerOK {
	o.ContentDisposition = contentDisposition
	return o
}

// SetContentDisposition sets the contentDisposition to the download roadrunner o k response
func (o *DownloadRoadrunnerOK) SetContentDisposition(contentDisposition string) {
	o.ContentDisposition = contentDisposition
}

// WithContentType adds the contentType to the download roadrunner o k response
func (o *DownloadRoadrunnerOK) WithContentType(contentType string) *DownloadRoadrunnerOK {
	o.ContentType = contentType
	return o
}

// SetContentType sets the contentType to the download roadrunner o k response
func (o *DownloadRoadrunnerOK) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithPayload adds the payload to the download roadrunner o k response
func (o *DownloadRoadrunnerOK) WithPayload(payload io.ReadCloser) *DownloadRoadrunnerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download roadrunner o k response
func (o *DownloadRoadrunnerOK) SetPayload(payload io.ReadCloser) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadRoadrunnerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Content-Disposition

	contentDisposition := o.ContentDisposition
	if contentDisposition != "" {
		rw.Header().Set("Content-Disposition", contentDisposition)
	}

	// response header Content-Type

	contentType := o.ContentType
	if contentType != "" {
		rw.Header().Set("Content-Type", contentType)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DownloadRoadrunnerBadRequestCode is the HTTP code returned for type DownloadRoadrunnerBadRequest
const DownloadRoadrunnerBadRequestCode int = 400

/*DownloadRoadrunnerBadRequest Request data does not pass validation

swagger:response downloadRoadrunnerBadRequest
*/
type DownloadRoadrunnerBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDownloadRoadrunnerBadRequest creates DownloadRoadrunnerBadRequest with default headers values
func NewDownloadRoadrunnerBadRequest() *DownloadRoadrunnerBadRequest {

	return &DownloadRoadrunnerBadRequest{}
}

// WithPayload adds the payload to the download roadrunner bad request response
func (o *DownloadRoadrunnerBadRequest) WithPayload(payload string) *DownloadRoadrunnerBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download roadrunner bad request response
func (o *DownloadRoadrunnerBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadRoadrunnerBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DownloadRoadrunnerForbiddenCode is the HTTP code returned for type DownloadRoadrunnerForbidden
const DownloadRoadrunnerForbiddenCode int = 403

/*DownloadRoadrunnerForbidden Requestor does not have authorization to perform this action

swagger:response downloadRoadrunnerForbidden
*/
type DownloadRoadrunnerForbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDownloadRoadrunnerForbidden creates DownloadRoadrunnerForbidden with default headers values
func NewDownloadRoadrunnerForbidden() *DownloadRoadrunnerForbidden {

	return &DownloadRoadrunnerForbidden{}
}

// WithPayload adds the payload to the download roadrunner forbidden response
func (o *DownloadRoadrunnerForbidden) WithPayload(payload string) *DownloadRoadrunnerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download roadrunner forbidden response
func (o *DownloadRoadrunnerForbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadRoadrunnerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// DownloadRoadrunnerInternalServerErrorCode is the HTTP code returned for type DownloadRoadrunnerInternalServerError
const DownloadRoadrunnerInternalServerErrorCode int = 500

/*DownloadRoadrunnerInternalServerError Unexpected error processing request

swagger:response downloadRoadrunnerInternalServerError
*/
type DownloadRoadrunnerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDownloadRoadrunnerInternalServerError creates DownloadRoadrunnerInternalServerError with default headers values
func NewDownloadRoadrunnerInternalServerError() *DownloadRoadrunnerInternalServerError {

	return &DownloadRoadrunnerInternalServerError{}
}

// WithPayload adds the payload to the download roadrunner internal server error response
func (o *DownloadRoadrunnerInternalServerError) WithPayload(payload string) *DownloadRoadrunnerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the download roadrunner internal server error response
func (o *DownloadRoadrunnerInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DownloadRoadrunnerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
