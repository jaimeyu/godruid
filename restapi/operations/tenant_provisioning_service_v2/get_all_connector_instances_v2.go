// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAllConnectorInstancesV2HandlerFunc turns a function with the right signature into a get all connector instances v2 handler
type GetAllConnectorInstancesV2HandlerFunc func(GetAllConnectorInstancesV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllConnectorInstancesV2HandlerFunc) Handle(params GetAllConnectorInstancesV2Params) middleware.Responder {
	return fn(params)
}

// GetAllConnectorInstancesV2Handler interface for that can handle valid get all connector instances v2 params
type GetAllConnectorInstancesV2Handler interface {
	Handle(GetAllConnectorInstancesV2Params) middleware.Responder
}

// NewGetAllConnectorInstancesV2 creates a new http.Handler for the get all connector instances v2 operation
func NewGetAllConnectorInstancesV2(ctx *middleware.Context, handler GetAllConnectorInstancesV2Handler) *GetAllConnectorInstancesV2 {
	return &GetAllConnectorInstancesV2{Context: ctx, Handler: handler}
}

/*GetAllConnectorInstancesV2 swagger:route GET /v2/connector-instances TenantProvisioningServiceV2 getAllConnectorInstancesV2

Retrieve all ConnectorInstances for the specified Tenant.

*/
type GetAllConnectorInstancesV2 struct {
	Context *middleware.Context
	Handler GetAllConnectorInstancesV2Handler
}

func (o *GetAllConnectorInstancesV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAllConnectorInstancesV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
