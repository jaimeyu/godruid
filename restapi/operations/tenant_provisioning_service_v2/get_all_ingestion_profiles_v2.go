// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetAllIngestionProfilesV2HandlerFunc turns a function with the right signature into a get all ingestion profiles v2 handler
type GetAllIngestionProfilesV2HandlerFunc func(GetAllIngestionProfilesV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAllIngestionProfilesV2HandlerFunc) Handle(params GetAllIngestionProfilesV2Params) middleware.Responder {
	return fn(params)
}

// GetAllIngestionProfilesV2Handler interface for that can handle valid get all ingestion profiles v2 params
type GetAllIngestionProfilesV2Handler interface {
	Handle(GetAllIngestionProfilesV2Params) middleware.Responder
}

// NewGetAllIngestionProfilesV2 creates a new http.Handler for the get all ingestion profiles v2 operation
func NewGetAllIngestionProfilesV2(ctx *middleware.Context, handler GetAllIngestionProfilesV2Handler) *GetAllIngestionProfilesV2 {
	return &GetAllIngestionProfilesV2{Context: ctx, Handler: handler}
}

/*GetAllIngestionProfilesV2 swagger:route GET /v2/ingestion-profiles TenantProvisioningServiceV2 getAllIngestionProfilesV2

Get all Tenant Ingestion Profiles

*/
type GetAllIngestionProfilesV2 struct {
	Context *middleware.Context
	Handler GetAllIngestionProfilesV2Handler
}

func (o *GetAllIngestionProfilesV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetAllIngestionProfilesV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
