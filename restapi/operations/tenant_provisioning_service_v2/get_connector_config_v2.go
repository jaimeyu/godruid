// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetConnectorConfigV2HandlerFunc turns a function with the right signature into a get connector config v2 handler
type GetConnectorConfigV2HandlerFunc func(GetConnectorConfigV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn GetConnectorConfigV2HandlerFunc) Handle(params GetConnectorConfigV2Params) middleware.Responder {
	return fn(params)
}

// GetConnectorConfigV2Handler interface for that can handle valid get connector config v2 params
type GetConnectorConfigV2Handler interface {
	Handle(GetConnectorConfigV2Params) middleware.Responder
}

// NewGetConnectorConfigV2 creates a new http.Handler for the get connector config v2 operation
func NewGetConnectorConfigV2(ctx *middleware.Context, handler GetConnectorConfigV2Handler) *GetConnectorConfigV2 {
	return &GetConnectorConfigV2{Context: ctx, Handler: handler}
}

/*GetConnectorConfigV2 swagger:route GET /v2/connector-configs/{connectorId} TenantProvisioningServiceV2 getConnectorConfigV2

Retrieve a Tenant ConnectorConfig by Id.

*/
type GetConnectorConfigV2 struct {
	Context *middleware.Context
	Handler GetConnectorConfigV2Handler
}

func (o *GetConnectorConfigV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetConnectorConfigV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
