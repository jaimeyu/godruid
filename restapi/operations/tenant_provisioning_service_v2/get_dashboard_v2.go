// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDashboardV2HandlerFunc turns a function with the right signature into a get dashboard v2 handler
type GetDashboardV2HandlerFunc func(GetDashboardV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDashboardV2HandlerFunc) Handle(params GetDashboardV2Params) middleware.Responder {
	return fn(params)
}

// GetDashboardV2Handler interface for that can handle valid get dashboard v2 params
type GetDashboardV2Handler interface {
	Handle(GetDashboardV2Params) middleware.Responder
}

// NewGetDashboardV2 creates a new http.Handler for the get dashboard v2 operation
func NewGetDashboardV2(ctx *middleware.Context, handler GetDashboardV2Handler) *GetDashboardV2 {
	return &GetDashboardV2{Context: ctx, Handler: handler}
}

/*GetDashboardV2 swagger:route GET /v2/dashboards/{dashboardId} TenantProvisioningServiceV2 getDashboardV2

Retrieve a Tenant Dashboard by Id.

*/
type GetDashboardV2 struct {
	Context *middleware.Context
	Handler GetDashboardV2Handler
}

func (o *GetDashboardV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDashboardV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
