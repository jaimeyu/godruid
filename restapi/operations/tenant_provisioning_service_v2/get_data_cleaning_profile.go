// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDataCleaningProfileHandlerFunc turns a function with the right signature into a get data cleaning profile handler
type GetDataCleaningProfileHandlerFunc func(GetDataCleaningProfileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDataCleaningProfileHandlerFunc) Handle(params GetDataCleaningProfileParams) middleware.Responder {
	return fn(params)
}

// GetDataCleaningProfileHandler interface for that can handle valid get data cleaning profile params
type GetDataCleaningProfileHandler interface {
	Handle(GetDataCleaningProfileParams) middleware.Responder
}

// NewGetDataCleaningProfile creates a new http.Handler for the get data cleaning profile operation
func NewGetDataCleaningProfile(ctx *middleware.Context, handler GetDataCleaningProfileHandler) *GetDataCleaningProfile {
	return &GetDataCleaningProfile{Context: ctx, Handler: handler}
}

/*GetDataCleaningProfile swagger:route GET /v2/data-cleaning-profiles/{profileId} TenantProvisioningServiceV2 getDataCleaningProfile

Retrieve a Data Cleaning Profiles for a Tenant.

*/
type GetDataCleaningProfile struct {
	Context *middleware.Context
	Handler GetDataCleaningProfileHandler
}

func (o *GetDataCleaningProfile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDataCleaningProfileParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
