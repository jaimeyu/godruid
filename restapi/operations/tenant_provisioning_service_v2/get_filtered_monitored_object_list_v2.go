// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetFilteredMonitoredObjectListV2HandlerFunc turns a function with the right signature into a get filtered monitored object list v2 handler
type GetFilteredMonitoredObjectListV2HandlerFunc func(GetFilteredMonitoredObjectListV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFilteredMonitoredObjectListV2HandlerFunc) Handle(params GetFilteredMonitoredObjectListV2Params) middleware.Responder {
	return fn(params)
}

// GetFilteredMonitoredObjectListV2Handler interface for that can handle valid get filtered monitored object list v2 params
type GetFilteredMonitoredObjectListV2Handler interface {
	Handle(GetFilteredMonitoredObjectListV2Params) middleware.Responder
}

// NewGetFilteredMonitoredObjectListV2 creates a new http.Handler for the get filtered monitored object list v2 operation
func NewGetFilteredMonitoredObjectListV2(ctx *middleware.Context, handler GetFilteredMonitoredObjectListV2Handler) *GetFilteredMonitoredObjectListV2 {
	return &GetFilteredMonitoredObjectListV2{Context: ctx, Handler: handler}
}

/*GetFilteredMonitoredObjectListV2 swagger:route POST /v2/monitored-objects/id-list TenantProvisioningServiceV2 getFilteredMonitoredObjectListV2

Retrieve a list of monitored objects based on the provided filter criteria

*/
type GetFilteredMonitoredObjectListV2 struct {
	Context *middleware.Context
	Handler GetFilteredMonitoredObjectListV2Handler
}

func (o *GetFilteredMonitoredObjectListV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetFilteredMonitoredObjectListV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
