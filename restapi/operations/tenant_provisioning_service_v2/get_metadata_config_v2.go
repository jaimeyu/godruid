// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetMetadataConfigV2HandlerFunc turns a function with the right signature into a get metadata config v2 handler
type GetMetadataConfigV2HandlerFunc func(GetMetadataConfigV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMetadataConfigV2HandlerFunc) Handle(params GetMetadataConfigV2Params) middleware.Responder {
	return fn(params)
}

// GetMetadataConfigV2Handler interface for that can handle valid get metadata config v2 params
type GetMetadataConfigV2Handler interface {
	Handle(GetMetadataConfigV2Params) middleware.Responder
}

// NewGetMetadataConfigV2 creates a new http.Handler for the get metadata config v2 operation
func NewGetMetadataConfigV2(ctx *middleware.Context, handler GetMetadataConfigV2Handler) *GetMetadataConfigV2 {
	return &GetMetadataConfigV2{Context: ctx, Handler: handler}
}

/*GetMetadataConfigV2 swagger:route GET /v2/metadata-configs/{MetadataConfigId} TenantProvisioningServiceV2 getMetadataConfigV2

Retrieve a Tenant Metadata Configuration by id.

*/
type GetMetadataConfigV2 struct {
	Context *middleware.Context
	Handler GetMetadataConfigV2Handler
}

func (o *GetMetadataConfigV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetMetadataConfigV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
