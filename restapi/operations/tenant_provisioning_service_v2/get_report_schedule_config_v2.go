// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetReportScheduleConfigV2HandlerFunc turns a function with the right signature into a get report schedule config v2 handler
type GetReportScheduleConfigV2HandlerFunc func(GetReportScheduleConfigV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReportScheduleConfigV2HandlerFunc) Handle(params GetReportScheduleConfigV2Params) middleware.Responder {
	return fn(params)
}

// GetReportScheduleConfigV2Handler interface for that can handle valid get report schedule config v2 params
type GetReportScheduleConfigV2Handler interface {
	Handle(GetReportScheduleConfigV2Params) middleware.Responder
}

// NewGetReportScheduleConfigV2 creates a new http.Handler for the get report schedule config v2 operation
func NewGetReportScheduleConfigV2(ctx *middleware.Context, handler GetReportScheduleConfigV2Handler) *GetReportScheduleConfigV2 {
	return &GetReportScheduleConfigV2{Context: ctx, Handler: handler}
}

/*GetReportScheduleConfigV2 swagger:route GET /v2/report-schedule-configs/{configId} TenantProvisioningServiceV2 getReportScheduleConfigV2

Retrieve a report schedule configuration for a Tenant by configuration Id.

*/
type GetReportScheduleConfigV2 struct {
	Context *middleware.Context
	Handler GetReportScheduleConfigV2Handler
}

func (o *GetReportScheduleConfigV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetReportScheduleConfigV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
