// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateBrandingV2HandlerFunc turns a function with the right signature into a update branding v2 handler
type UpdateBrandingV2HandlerFunc func(UpdateBrandingV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateBrandingV2HandlerFunc) Handle(params UpdateBrandingV2Params) middleware.Responder {
	return fn(params)
}

// UpdateBrandingV2Handler interface for that can handle valid update branding v2 params
type UpdateBrandingV2Handler interface {
	Handle(UpdateBrandingV2Params) middleware.Responder
}

// NewUpdateBrandingV2 creates a new http.Handler for the update branding v2 operation
func NewUpdateBrandingV2(ctx *middleware.Context, handler UpdateBrandingV2Handler) *UpdateBrandingV2 {
	return &UpdateBrandingV2{Context: ctx, Handler: handler}
}

/*UpdateBrandingV2 swagger:route PATCH /v2/brandings/{brandingId} TenantProvisioningServiceV2 updateBrandingV2

Update a Tenant Branding specified by the provided Branding Id.

*/
type UpdateBrandingV2 struct {
	Context *middleware.Context
	Handler UpdateBrandingV2Handler
}

func (o *UpdateBrandingV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateBrandingV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
