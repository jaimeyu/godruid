// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateCardV2HandlerFunc turns a function with the right signature into a update card v2 handler
type UpdateCardV2HandlerFunc func(UpdateCardV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateCardV2HandlerFunc) Handle(params UpdateCardV2Params) middleware.Responder {
	return fn(params)
}

// UpdateCardV2Handler interface for that can handle valid update card v2 params
type UpdateCardV2Handler interface {
	Handle(UpdateCardV2Params) middleware.Responder
}

// NewUpdateCardV2 creates a new http.Handler for the update card v2 operation
func NewUpdateCardV2(ctx *middleware.Context, handler UpdateCardV2Handler) *UpdateCardV2 {
	return &UpdateCardV2{Context: ctx, Handler: handler}
}

/*UpdateCardV2 swagger:route PATCH /v2/cards/{cardId} TenantProvisioningServiceV2 updateCardV2

Update a Tenant Card specified by the provided Card Id.

*/
type UpdateCardV2 struct {
	Context *middleware.Context
	Handler UpdateCardV2Handler
}

func (o *UpdateCardV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateCardV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
