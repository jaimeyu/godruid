// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateIngestionProfileV2HandlerFunc turns a function with the right signature into a update ingestion profile v2 handler
type UpdateIngestionProfileV2HandlerFunc func(UpdateIngestionProfileV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateIngestionProfileV2HandlerFunc) Handle(params UpdateIngestionProfileV2Params) middleware.Responder {
	return fn(params)
}

// UpdateIngestionProfileV2Handler interface for that can handle valid update ingestion profile v2 params
type UpdateIngestionProfileV2Handler interface {
	Handle(UpdateIngestionProfileV2Params) middleware.Responder
}

// NewUpdateIngestionProfileV2 creates a new http.Handler for the update ingestion profile v2 operation
func NewUpdateIngestionProfileV2(ctx *middleware.Context, handler UpdateIngestionProfileV2Handler) *UpdateIngestionProfileV2 {
	return &UpdateIngestionProfileV2{Context: ctx, Handler: handler}
}

/*UpdateIngestionProfileV2 swagger:route PATCH /v2/ingestion-profiles/{ingestionProfileId} TenantProvisioningServiceV2 updateIngestionProfileV2

Update a Tenant Ingestion Profile

*/
type UpdateIngestionProfileV2 struct {
	Context *middleware.Context
	Handler UpdateIngestionProfileV2Handler
}

func (o *UpdateIngestionProfileV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateIngestionProfileV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
