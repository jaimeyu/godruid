// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateMetadataConfigV2HandlerFunc turns a function with the right signature into a update metadata config v2 handler
type UpdateMetadataConfigV2HandlerFunc func(UpdateMetadataConfigV2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateMetadataConfigV2HandlerFunc) Handle(params UpdateMetadataConfigV2Params) middleware.Responder {
	return fn(params)
}

// UpdateMetadataConfigV2Handler interface for that can handle valid update metadata config v2 params
type UpdateMetadataConfigV2Handler interface {
	Handle(UpdateMetadataConfigV2Params) middleware.Responder
}

// NewUpdateMetadataConfigV2 creates a new http.Handler for the update metadata config v2 operation
func NewUpdateMetadataConfigV2(ctx *middleware.Context, handler UpdateMetadataConfigV2Handler) *UpdateMetadataConfigV2 {
	return &UpdateMetadataConfigV2{Context: ctx, Handler: handler}
}

/*UpdateMetadataConfigV2 swagger:route PATCH /v2/metadata-configs/{MetadataConfigId} TenantProvisioningServiceV2 updateMetadataConfigV2

Update a Tenant Metadata Configuration

*/
type UpdateMetadataConfigV2 struct {
	Context *middleware.Context
	Handler UpdateMetadataConfigV2Handler
}

func (o *UpdateMetadataConfigV2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateMetadataConfigV2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
