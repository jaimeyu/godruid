// Code generated by go-swagger; DO NOT EDIT.

package tenant_provisioning_service_v2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	swagmodels "github.com/accedian/adh-gather/swagmodels"
)

// UpdateMonitoredObjectV2OKCode is the HTTP code returned for type UpdateMonitoredObjectV2OK
const UpdateMonitoredObjectV2OKCode int = 200

/*UpdateMonitoredObjectV2OK update monitored object v2 o k

swagger:response updateMonitoredObjectV2OK
*/
type UpdateMonitoredObjectV2OK struct {

	/*
	  In: Body
	*/
	Payload *swagmodels.MonitoredObjectResponse `json:"body,omitempty"`
}

// NewUpdateMonitoredObjectV2OK creates UpdateMonitoredObjectV2OK with default headers values
func NewUpdateMonitoredObjectV2OK() *UpdateMonitoredObjectV2OK {

	return &UpdateMonitoredObjectV2OK{}
}

// WithPayload adds the payload to the update monitored object v2 o k response
func (o *UpdateMonitoredObjectV2OK) WithPayload(payload *swagmodels.MonitoredObjectResponse) *UpdateMonitoredObjectV2OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update monitored object v2 o k response
func (o *UpdateMonitoredObjectV2OK) SetPayload(payload *swagmodels.MonitoredObjectResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateMonitoredObjectV2OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UpdateMonitoredObjectV2BadRequestCode is the HTTP code returned for type UpdateMonitoredObjectV2BadRequest
const UpdateMonitoredObjectV2BadRequestCode int = 400

/*UpdateMonitoredObjectV2BadRequest Request data does not pass validation

swagger:response updateMonitoredObjectV2BadRequest
*/
type UpdateMonitoredObjectV2BadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUpdateMonitoredObjectV2BadRequest creates UpdateMonitoredObjectV2BadRequest with default headers values
func NewUpdateMonitoredObjectV2BadRequest() *UpdateMonitoredObjectV2BadRequest {

	return &UpdateMonitoredObjectV2BadRequest{}
}

// WithPayload adds the payload to the update monitored object v2 bad request response
func (o *UpdateMonitoredObjectV2BadRequest) WithPayload(payload string) *UpdateMonitoredObjectV2BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update monitored object v2 bad request response
func (o *UpdateMonitoredObjectV2BadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateMonitoredObjectV2BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// UpdateMonitoredObjectV2ForbiddenCode is the HTTP code returned for type UpdateMonitoredObjectV2Forbidden
const UpdateMonitoredObjectV2ForbiddenCode int = 403

/*UpdateMonitoredObjectV2Forbidden Requestor does not have authorization to perform this action

swagger:response updateMonitoredObjectV2Forbidden
*/
type UpdateMonitoredObjectV2Forbidden struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUpdateMonitoredObjectV2Forbidden creates UpdateMonitoredObjectV2Forbidden with default headers values
func NewUpdateMonitoredObjectV2Forbidden() *UpdateMonitoredObjectV2Forbidden {

	return &UpdateMonitoredObjectV2Forbidden{}
}

// WithPayload adds the payload to the update monitored object v2 forbidden response
func (o *UpdateMonitoredObjectV2Forbidden) WithPayload(payload string) *UpdateMonitoredObjectV2Forbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update monitored object v2 forbidden response
func (o *UpdateMonitoredObjectV2Forbidden) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateMonitoredObjectV2Forbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// UpdateMonitoredObjectV2NotFoundCode is the HTTP code returned for type UpdateMonitoredObjectV2NotFound
const UpdateMonitoredObjectV2NotFoundCode int = 404

/*UpdateMonitoredObjectV2NotFound The requested Monitored Object is not provisioned

swagger:response updateMonitoredObjectV2NotFound
*/
type UpdateMonitoredObjectV2NotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUpdateMonitoredObjectV2NotFound creates UpdateMonitoredObjectV2NotFound with default headers values
func NewUpdateMonitoredObjectV2NotFound() *UpdateMonitoredObjectV2NotFound {

	return &UpdateMonitoredObjectV2NotFound{}
}

// WithPayload adds the payload to the update monitored object v2 not found response
func (o *UpdateMonitoredObjectV2NotFound) WithPayload(payload string) *UpdateMonitoredObjectV2NotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update monitored object v2 not found response
func (o *UpdateMonitoredObjectV2NotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateMonitoredObjectV2NotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// UpdateMonitoredObjectV2ConflictCode is the HTTP code returned for type UpdateMonitoredObjectV2Conflict
const UpdateMonitoredObjectV2ConflictCode int = 409

/*UpdateMonitoredObjectV2Conflict Incorrect revision provided for the update request to the Monitored Object

swagger:response updateMonitoredObjectV2Conflict
*/
type UpdateMonitoredObjectV2Conflict struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUpdateMonitoredObjectV2Conflict creates UpdateMonitoredObjectV2Conflict with default headers values
func NewUpdateMonitoredObjectV2Conflict() *UpdateMonitoredObjectV2Conflict {

	return &UpdateMonitoredObjectV2Conflict{}
}

// WithPayload adds the payload to the update monitored object v2 conflict response
func (o *UpdateMonitoredObjectV2Conflict) WithPayload(payload string) *UpdateMonitoredObjectV2Conflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update monitored object v2 conflict response
func (o *UpdateMonitoredObjectV2Conflict) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateMonitoredObjectV2Conflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

// UpdateMonitoredObjectV2InternalServerErrorCode is the HTTP code returned for type UpdateMonitoredObjectV2InternalServerError
const UpdateMonitoredObjectV2InternalServerErrorCode int = 500

/*UpdateMonitoredObjectV2InternalServerError Unexpected error processing request

swagger:response updateMonitoredObjectV2InternalServerError
*/
type UpdateMonitoredObjectV2InternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewUpdateMonitoredObjectV2InternalServerError creates UpdateMonitoredObjectV2InternalServerError with default headers values
func NewUpdateMonitoredObjectV2InternalServerError() *UpdateMonitoredObjectV2InternalServerError {

	return &UpdateMonitoredObjectV2InternalServerError{}
}

// WithPayload adds the payload to the update monitored object v2 internal server error response
func (o *UpdateMonitoredObjectV2InternalServerError) WithPayload(payload string) *UpdateMonitoredObjectV2InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update monitored object v2 internal server error response
func (o *UpdateMonitoredObjectV2InternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateMonitoredObjectV2InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
