// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Branding branding
// swagger:model Branding
type Branding struct {

	// attributes
	// Required: true
	Attributes *BrandingAttributes `json:"attributes"`

	// id
	// Required: true
	ID *string `json:"id"`

	// type
	// Required: true
	// Enum: [brandings]
	Type *string `json:"type"`
}

// Validate validates this branding
func (m *Branding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Branding) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *Branding) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var brandingTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["brandings"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		brandingTypeTypePropEnum = append(brandingTypeTypePropEnum, v)
	}
}

const (

	// BrandingTypeBrandings captures enum value "brandings"
	BrandingTypeBrandings string = "brandings"
)

// prop value enum
func (m *Branding) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, brandingTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Branding) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Branding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Branding) UnmarshalBinary(b []byte) error {
	var res Branding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BrandingAttributes branding attributes
// swagger:model BrandingAttributes
type BrandingAttributes struct {

	// Value used to ensure updates to this object are handled in order.
	// Required: true
	Rev *string `json:"_rev"`

	// The primary colour used for the Datahub UI
	// Required: true
	Color *string `json:"color"`

	// Time since epoch at which this object was instantiated.
	// Required: true
	CreatedTimestamp *int64 `json:"createdTimestamp"`

	// datatype
	// Required: true
	Datatype *string `json:"datatype"`

	// Time since epoch at which this object was last altered.
	// Required: true
	LastModifiedTimestamp *int64 `json:"lastModifiedTimestamp"`

	// The image used for the Branding logo
	// Required: true
	Logo *BrandingLogo `json:"logo"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`
}

// Validate validates this branding attributes
func (m *BrandingAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatatype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrandingAttributes) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"_rev", "body", m.Rev); err != nil {
		return err
	}

	return nil
}

func (m *BrandingAttributes) validateColor(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"color", "body", m.Color); err != nil {
		return err
	}

	return nil
}

func (m *BrandingAttributes) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"createdTimestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *BrandingAttributes) validateDatatype(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"datatype", "body", m.Datatype); err != nil {
		return err
	}

	return nil
}

func (m *BrandingAttributes) validateLastModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"lastModifiedTimestamp", "body", m.LastModifiedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *BrandingAttributes) validateLogo(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"logo", "body", m.Logo); err != nil {
		return err
	}

	if m.Logo != nil {
		if err := m.Logo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "logo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BrandingAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrandingAttributes) UnmarshalBinary(b []byte) error {
	var res BrandingAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
