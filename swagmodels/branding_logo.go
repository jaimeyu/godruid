// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// BrandingLogo Describes the information used to display the branding logo image on the Datahub UI
// swagger:model BrandingLogo
type BrandingLogo struct {

	// file
	File *BrandingLogoFile `json:"file,omitempty"`
}

// Validate validates this branding logo
func (m *BrandingLogo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BrandingLogo) validateFile(formats strfmt.Registry) error {

	if swag.IsZero(m.File) { // not required
		return nil
	}

	if m.File != nil {
		if err := m.File.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BrandingLogo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrandingLogo) UnmarshalBinary(b []byte) error {
	var res BrandingLogo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BrandingLogoFile branding logo file
// swagger:model BrandingLogoFile
type BrandingLogoFile struct {

	// Describes the media type of the document stored
	ContentType string `json:"content_type,omitempty"`

	// Contains the image data for the uploaded branding logo
	Data string `json:"data,omitempty"`
}

// Validate validates this branding logo file
func (m *BrandingLogoFile) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BrandingLogoFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BrandingLogoFile) UnmarshalBinary(b []byte) error {
	var res BrandingLogoFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
