// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BulkOperationResponseV2 bulk operation response v2
// swagger:model BulkOperationResponseV2
type BulkOperationResponseV2 struct {

	// data
	// Required: true
	Data []*BulkOperationResponseV2DataItems0 `json:"data"`
}

// Validate validates this bulk operation response v2
func (m *BulkOperationResponseV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkOperationResponseV2) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkOperationResponseV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkOperationResponseV2) UnmarshalBinary(b []byte) error {
	var res BulkOperationResponseV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BulkOperationResponseV2DataItems0 bulk operation response v2 data items0
// swagger:model BulkOperationResponseV2DataItems0
type BulkOperationResponseV2DataItems0 struct {

	// attributes
	// Required: true
	Attributes *BulkOperationResponseV2DataItems0Attributes `json:"attributes"`

	// id
	// Required: true
	ID *string `json:"id"`

	// type
	// Required: true
	// Enum: [bulkOperationResponses]
	Type *string `json:"type"`
}

// Validate validates this bulk operation response v2 data items0
func (m *BulkOperationResponseV2DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkOperationResponseV2DataItems0) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *BulkOperationResponseV2DataItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var bulkOperationResponseV2DataItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bulkOperationResponses"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bulkOperationResponseV2DataItems0TypeTypePropEnum = append(bulkOperationResponseV2DataItems0TypeTypePropEnum, v)
	}
}

const (

	// BulkOperationResponseV2DataItems0TypeBulkOperationResponses captures enum value "bulkOperationResponses"
	BulkOperationResponseV2DataItems0TypeBulkOperationResponses string = "bulkOperationResponses"
)

// prop value enum
func (m *BulkOperationResponseV2DataItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, bulkOperationResponseV2DataItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BulkOperationResponseV2DataItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkOperationResponseV2DataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkOperationResponseV2DataItems0) UnmarshalBinary(b []byte) error {
	var res BulkOperationResponseV2DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BulkOperationResponseV2DataItems0Attributes Provides the result of multiple operations that were issued in a single request to Datahub
// swagger:model BulkOperationResponseV2DataItems0Attributes
type BulkOperationResponseV2DataItems0Attributes struct {

	// error
	Error string `json:"error,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// ok
	Ok bool `json:"ok,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// rev
	Rev string `json:"rev,omitempty"`
}

// Validate validates this bulk operation response v2 data items0 attributes
func (m *BulkOperationResponseV2DataItems0Attributes) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BulkOperationResponseV2DataItems0Attributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkOperationResponseV2DataItems0Attributes) UnmarshalBinary(b []byte) error {
	var res BulkOperationResponseV2DataItems0Attributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
