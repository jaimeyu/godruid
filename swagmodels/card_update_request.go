// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CardUpdateRequest Object used to update a Card in Datahub
// swagger:model CardUpdateRequest
type CardUpdateRequest struct {

	// data
	// Required: true
	Data *CardUpdateRequestData `json:"data"`
}

// Validate validates this card update request
func (m *CardUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardUpdateRequest) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardUpdateRequest) UnmarshalBinary(b []byte) error {
	var res CardUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CardUpdateRequestData card update request data
// swagger:model CardUpdateRequestData
type CardUpdateRequestData struct {

	// attributes
	// Required: true
	Attributes *CardUpdateRequestDataAttributes `json:"attributes"`

	// id
	// Required: true
	ID *string `json:"id"`

	// type
	// Required: true
	// Enum: [cards]
	Type *string `json:"type"`
}

// Validate validates this card update request data
func (m *CardUpdateRequestData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardUpdateRequestData) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

func (m *CardUpdateRequestData) validateID(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var cardUpdateRequestDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cards"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cardUpdateRequestDataTypeTypePropEnum = append(cardUpdateRequestDataTypeTypePropEnum, v)
	}
}

const (

	// CardUpdateRequestDataTypeCards captures enum value "cards"
	CardUpdateRequestDataTypeCards string = "cards"
)

// prop value enum
func (m *CardUpdateRequestData) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cardUpdateRequestDataTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CardUpdateRequestData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardUpdateRequestData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardUpdateRequestData) UnmarshalBinary(b []byte) error {
	var res CardUpdateRequestData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CardUpdateRequestDataAttributes card update request data attributes
// swagger:model CardUpdateRequestDataAttributes
type CardUpdateRequestDataAttributes struct {

	// Value used to ensure updates to this object are handled in order.
	// Required: true
	Rev *string `json:"_rev"`

	// description
	Description string `json:"description,omitempty"`

	// metrics
	Metrics []*CardMetric `json:"metrics"`

	// name
	Name string `json:"name,omitempty"`

	// state
	// Enum: [active pending]
	State string `json:"state,omitempty"`

	// visualization
	Visualization *CardVisualization `json:"visualization,omitempty"`
}

// Validate validates this card update request data attributes
func (m *CardUpdateRequestDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisualization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardUpdateRequestDataAttributes) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes"+"."+"_rev", "body", m.Rev); err != nil {
		return err
	}

	return nil
}

func (m *CardUpdateRequestDataAttributes) validateMetrics(formats strfmt.Registry) error {

	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	for i := 0; i < len(m.Metrics); i++ {
		if swag.IsZero(m.Metrics[i]) { // not required
			continue
		}

		if m.Metrics[i] != nil {
			if err := m.Metrics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "attributes" + "." + "metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var cardUpdateRequestDataAttributesTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cardUpdateRequestDataAttributesTypeStatePropEnum = append(cardUpdateRequestDataAttributesTypeStatePropEnum, v)
	}
}

const (

	// CardUpdateRequestDataAttributesStateActive captures enum value "active"
	CardUpdateRequestDataAttributesStateActive string = "active"

	// CardUpdateRequestDataAttributesStatePending captures enum value "pending"
	CardUpdateRequestDataAttributesStatePending string = "pending"
)

// prop value enum
func (m *CardUpdateRequestDataAttributes) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cardUpdateRequestDataAttributesTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CardUpdateRequestDataAttributes) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("data"+"."+"attributes"+"."+"state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *CardUpdateRequestDataAttributes) validateVisualization(formats strfmt.Registry) error {

	if swag.IsZero(m.Visualization) { // not required
		return nil
	}

	if m.Visualization != nil {
		if err := m.Visualization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes" + "." + "visualization")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardUpdateRequestDataAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardUpdateRequestDataAttributes) UnmarshalBinary(b []byte) error {
	var res CardUpdateRequestDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
