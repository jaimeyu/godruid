// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CardVisualization card visualization
// swagger:model CardVisualization
type CardVisualization struct {

	// availability
	Availability *CardVisualizationAvailability `json:"availability,omitempty"`

	// category
	Category string `json:"category,omitempty"`

	// component
	Component string `json:"component,omitempty"`

	// default dimensions
	DefaultDimensions *CardVisualizationDefaultDimensions `json:"defaultDimensions,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// label
	Label string `json:"label,omitempty"`
}

// Validate validates this card visualization
func (m *CardVisualization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultDimensions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CardVisualization) validateAvailability(formats strfmt.Registry) error {

	if swag.IsZero(m.Availability) { // not required
		return nil
	}

	if m.Availability != nil {
		if err := m.Availability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availability")
			}
			return err
		}
	}

	return nil
}

func (m *CardVisualization) validateDefaultDimensions(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultDimensions) { // not required
		return nil
	}

	if m.DefaultDimensions != nil {
		if err := m.DefaultDimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultDimensions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CardVisualization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardVisualization) UnmarshalBinary(b []byte) error {
	var res CardVisualization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CardVisualizationAvailability card visualization availability
// swagger:model CardVisualizationAvailability
type CardVisualizationAvailability struct {

	// count
	Count int64 `json:"count,omitempty"`

	// type
	Type []string `json:"type"`
}

// Validate validates this card visualization availability
func (m *CardVisualizationAvailability) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CardVisualizationAvailability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardVisualizationAvailability) UnmarshalBinary(b []byte) error {
	var res CardVisualizationAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CardVisualizationDefaultDimensions card visualization default dimensions
// swagger:model CardVisualizationDefaultDimensions
type CardVisualizationDefaultDimensions struct {

	// columns
	Columns int64 `json:"columns,omitempty"`

	// rows
	Rows int64 `json:"rows,omitempty"`
}

// Validate validates this card visualization default dimensions
func (m *CardVisualizationDefaultDimensions) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CardVisualizationDefaultDimensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CardVisualizationDefaultDimensions) UnmarshalBinary(b []byte) error {
	var res CardVisualizationDefaultDimensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
