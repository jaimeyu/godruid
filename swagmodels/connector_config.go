// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectorConfig connector config
// swagger:model ConnectorConfig
type ConnectorConfig struct {

	// attributes
	// Required: true
	Attributes *ConnectorConfigAttributes `json:"attributes"`

	// id
	// Required: true
	ID *string `json:"id"`

	// type
	// Required: true
	// Enum: [connectorConfigs]
	Type *string `json:"type"`
}

// Validate validates this connector config
func (m *ConnectorConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectorConfig) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectorConfig) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var connectorConfigTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["connectorConfigs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		connectorConfigTypeTypePropEnum = append(connectorConfigTypeTypePropEnum, v)
	}
}

const (

	// ConnectorConfigTypeConnectorConfigs captures enum value "connectorConfigs"
	ConnectorConfigTypeConnectorConfigs string = "connectorConfigs"
)

// prop value enum
func (m *ConnectorConfig) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, connectorConfigTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConnectorConfig) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorConfig) UnmarshalBinary(b []byte) error {
	var res ConnectorConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConnectorConfigAttributes connector config attributes
// swagger:model ConnectorConfigAttributes
type ConnectorConfigAttributes struct {

	// Value used to ensure updates to this object are handled in order.
	// Required: true
	Rev *string `json:"_rev"`

	// Time since epoch at which this object was instantiated.
	// Required: true
	CreatedTimestamp *int64 `json:"createdTimestamp"`

	// datahub connection retry frequency
	DatahubConnectionRetryFrequency int64 `json:"datahubConnectionRetryFrequency,omitempty"`

	// datahub heartbeat frequency
	DatahubHeartbeatFrequency int64 `json:"datahubHeartbeatFrequency,omitempty"`

	// datatype
	Datatype string `json:"datatype,omitempty"`

	// export group
	ExportGroup string `json:"exportGroup,omitempty"`

	// Time since epoch at which this object was last altered.
	// Required: true
	LastModifiedTimestamp *int64 `json:"lastModifiedTimestamp"`

	// name
	Name string `json:"name,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// polling frequency
	// Required: true
	PollingFrequency *int64 `json:"pollingFrequency"`

	// port
	Port int64 `json:"port,omitempty"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// url
	// Required: true
	URL *string `json:"url"`

	// username
	Username string `json:"username,omitempty"`

	// zone
	Zone string `json:"zone,omitempty"`
}

// Validate validates this connector config attributes
func (m *ConnectorConfigAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePollingFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectorConfigAttributes) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"_rev", "body", m.Rev); err != nil {
		return err
	}

	return nil
}

func (m *ConnectorConfigAttributes) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"createdTimestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *ConnectorConfigAttributes) validateLastModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"lastModifiedTimestamp", "body", m.LastModifiedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *ConnectorConfigAttributes) validatePollingFrequency(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"pollingFrequency", "body", m.PollingFrequency); err != nil {
		return err
	}

	return nil
}

func (m *ConnectorConfigAttributes) validateType(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ConnectorConfigAttributes) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorConfigAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorConfigAttributes) UnmarshalBinary(b []byte) error {
	var res ConnectorConfigAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
