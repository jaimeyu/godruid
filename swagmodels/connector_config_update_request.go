// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectorConfigUpdateRequest connector config update request
// swagger:model ConnectorConfigUpdateRequest
type ConnectorConfigUpdateRequest struct {

	// data
	// Required: true
	Data *ConnectorConfigUpdateRequestData `json:"data"`
}

// Validate validates this connector config update request
func (m *ConnectorConfigUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectorConfigUpdateRequest) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorConfigUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorConfigUpdateRequest) UnmarshalBinary(b []byte) error {
	var res ConnectorConfigUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConnectorConfigUpdateRequestData connector config update request data
// swagger:model ConnectorConfigUpdateRequestData
type ConnectorConfigUpdateRequestData struct {

	// attributes
	// Required: true
	Attributes *ConnectorConfigUpdateRequestDataAttributes `json:"attributes"`

	// id
	// Required: true
	ID *string `json:"id"`

	// type
	// Required: true
	// Enum: [connectorConfigs]
	Type *string `json:"type"`
}

// Validate validates this connector config update request data
func (m *ConnectorConfigUpdateRequestData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectorConfigUpdateRequestData) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectorConfigUpdateRequestData) validateID(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var connectorConfigUpdateRequestDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["connectorConfigs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		connectorConfigUpdateRequestDataTypeTypePropEnum = append(connectorConfigUpdateRequestDataTypeTypePropEnum, v)
	}
}

const (

	// ConnectorConfigUpdateRequestDataTypeConnectorConfigs captures enum value "connectorConfigs"
	ConnectorConfigUpdateRequestDataTypeConnectorConfigs string = "connectorConfigs"
)

// prop value enum
func (m *ConnectorConfigUpdateRequestData) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, connectorConfigUpdateRequestDataTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ConnectorConfigUpdateRequestData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorConfigUpdateRequestData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorConfigUpdateRequestData) UnmarshalBinary(b []byte) error {
	var res ConnectorConfigUpdateRequestData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ConnectorConfigUpdateRequestDataAttributes connector config update request data attributes
// swagger:model ConnectorConfigUpdateRequestDataAttributes
type ConnectorConfigUpdateRequestDataAttributes struct {

	// Value used to ensure updates to this object are handled in order.
	// Required: true
	Rev *string `json:"_rev"`

	// datahub connection retry frequency
	DatahubConnectionRetryFrequency int64 `json:"datahubConnectionRetryFrequency,omitempty"`

	// datahub heartbeat frequency
	DatahubHeartbeatFrequency int64 `json:"datahubHeartbeatFrequency,omitempty"`

	// export group
	ExportGroup string `json:"exportGroup,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// polling frequency
	PollingFrequency int64 `json:"pollingFrequency,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// zone
	Zone string `json:"zone,omitempty"`
}

// Validate validates this connector config update request data attributes
func (m *ConnectorConfigUpdateRequestDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectorConfigUpdateRequestDataAttributes) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes"+"."+"_rev", "body", m.Rev); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectorConfigUpdateRequestDataAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectorConfigUpdateRequestDataAttributes) UnmarshalBinary(b []byte) error {
	var res ConnectorConfigUpdateRequestDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
