// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DashboardCreateRequest Object used to create a Dashboard in Datahub
// swagger:model DashboardCreateRequest
type DashboardCreateRequest struct {

	// data
	// Required: true
	Data *DashboardCreateRequestData `json:"data"`
}

// Validate validates this dashboard create request
func (m *DashboardCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardCreateRequest) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardCreateRequest) UnmarshalBinary(b []byte) error {
	var res DashboardCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DashboardCreateRequestData dashboard create request data
// swagger:model DashboardCreateRequestData
type DashboardCreateRequestData struct {

	// attributes
	// Required: true
	Attributes *DashboardCreateRequestDataAttributes `json:"attributes"`

	// id
	ID string `json:"id,omitempty"`

	// relationships
	Relationships *DashboardRelationships `json:"relationships,omitempty"`

	// type
	// Required: true
	// Enum: [dashboards]
	Type *string `json:"type"`
}

// Validate validates this dashboard create request data
func (m *DashboardCreateRequestData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardCreateRequestData) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

func (m *DashboardCreateRequestData) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "relationships")
			}
			return err
		}
	}

	return nil
}

var dashboardCreateRequestDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dashboards"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dashboardCreateRequestDataTypeTypePropEnum = append(dashboardCreateRequestDataTypeTypePropEnum, v)
	}
}

const (

	// DashboardCreateRequestDataTypeDashboards captures enum value "dashboards"
	DashboardCreateRequestDataTypeDashboards string = "dashboards"
)

// prop value enum
func (m *DashboardCreateRequestData) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dashboardCreateRequestDataTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DashboardCreateRequestData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardCreateRequestData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardCreateRequestData) UnmarshalBinary(b []byte) error {
	var res DashboardCreateRequestData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DashboardCreateRequestDataAttributes dashboard create request data attributes
// swagger:model DashboardCreateRequestDataAttributes
type DashboardCreateRequestDataAttributes struct {

	// Describes the locations of the Cards on the Dashboard in the Datahub UI
	CardPositions CardPositions `json:"cardPositions,omitempty"`

	// Name of the visual 'group' where this Dashboard will be displayed when looking at the list of all Dashboards in Datahub
	Category string `json:"category,omitempty"`

	// List of filters used to obtain a list of Monitoreed Objects which will be useds to provide metric data to the Dashboard
	MetadataFilters []*MetadataFilter `json:"metadataFilters"`

	// User provided identifier for a Dashboard
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this dashboard create request data attributes
func (m *DashboardCreateRequestDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardPositions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadataFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DashboardCreateRequestDataAttributes) validateCardPositions(formats strfmt.Registry) error {

	if swag.IsZero(m.CardPositions) { // not required
		return nil
	}

	if err := m.CardPositions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("data" + "." + "attributes" + "." + "cardPositions")
		}
		return err
	}

	return nil
}

func (m *DashboardCreateRequestDataAttributes) validateMetadataFilters(formats strfmt.Registry) error {

	if swag.IsZero(m.MetadataFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.MetadataFilters); i++ {
		if swag.IsZero(m.MetadataFilters[i]) { // not required
			continue
		}

		if m.MetadataFilters[i] != nil {
			if err := m.MetadataFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "attributes" + "." + "metadataFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DashboardCreateRequestDataAttributes) validateName(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DashboardCreateRequestDataAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardCreateRequestDataAttributes) UnmarshalBinary(b []byte) error {
	var res DashboardCreateRequestDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
