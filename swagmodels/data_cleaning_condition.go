// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataCleaningCondition A condition used to evalutate when a data cleaning rule should be triggered or cleared.
// swagger:model DataCleaningCondition
type DataCleaningCondition struct {

	// Operand to use when evaluating the condition. [gt=greaterThan, lt=lessThan, gte=greaterThanOrEqual, lte=lessThanOrEqual, eq=equal]
	// Required: true
	// Enum: [gt lt gte lte eq]
	Comparator *string `json:"comparator"`

	// ISO-8601 interval over which this codition will be evaluated.
	// Required: true
	Duration *string `json:"duration"`

	// The value against which the selected metric will be compared.
	// Required: true
	Value *string `json:"value"`

	// The method of aggregation by which the selected metric will be aggregateds. [min=minimum, max=maximum, avg=average]
	// Required: true
	// Enum: [min max avg]
	ValueAggregate *string `json:"valueAggregate"`
}

// Validate validates this data cleaning condition
func (m *DataCleaningCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComparator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueAggregate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataCleaningConditionTypeComparatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["gt","lt","gte","lte","eq"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataCleaningConditionTypeComparatorPropEnum = append(dataCleaningConditionTypeComparatorPropEnum, v)
	}
}

const (

	// DataCleaningConditionComparatorGt captures enum value "gt"
	DataCleaningConditionComparatorGt string = "gt"

	// DataCleaningConditionComparatorLt captures enum value "lt"
	DataCleaningConditionComparatorLt string = "lt"

	// DataCleaningConditionComparatorGte captures enum value "gte"
	DataCleaningConditionComparatorGte string = "gte"

	// DataCleaningConditionComparatorLte captures enum value "lte"
	DataCleaningConditionComparatorLte string = "lte"

	// DataCleaningConditionComparatorEq captures enum value "eq"
	DataCleaningConditionComparatorEq string = "eq"
)

// prop value enum
func (m *DataCleaningCondition) validateComparatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataCleaningConditionTypeComparatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataCleaningCondition) validateComparator(formats strfmt.Registry) error {

	if err := validate.Required("comparator", "body", m.Comparator); err != nil {
		return err
	}

	// value enum
	if err := m.validateComparatorEnum("comparator", "body", *m.Comparator); err != nil {
		return err
	}

	return nil
}

func (m *DataCleaningCondition) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *DataCleaningCondition) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

var dataCleaningConditionTypeValueAggregatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["min","max","avg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataCleaningConditionTypeValueAggregatePropEnum = append(dataCleaningConditionTypeValueAggregatePropEnum, v)
	}
}

const (

	// DataCleaningConditionValueAggregateMin captures enum value "min"
	DataCleaningConditionValueAggregateMin string = "min"

	// DataCleaningConditionValueAggregateMax captures enum value "max"
	DataCleaningConditionValueAggregateMax string = "max"

	// DataCleaningConditionValueAggregateAvg captures enum value "avg"
	DataCleaningConditionValueAggregateAvg string = "avg"
)

// prop value enum
func (m *DataCleaningCondition) validateValueAggregateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataCleaningConditionTypeValueAggregatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataCleaningCondition) validateValueAggregate(formats strfmt.Registry) error {

	if err := validate.Required("valueAggregate", "body", m.ValueAggregate); err != nil {
		return err
	}

	// value enum
	if err := m.validateValueAggregateEnum("valueAggregate", "body", *m.ValueAggregate); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataCleaningCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataCleaningCondition) UnmarshalBinary(b []byte) error {
	var res DataCleaningCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
