// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataCleaningHistory data cleaning history
// swagger:model DataCleaningHistory
type DataCleaningHistory struct {

	// attributes
	// Required: true
	Attributes *DataCleaningHistoryAttributes `json:"attributes"`

	// id
	// Required: true
	ID *string `json:"id"`

	// type
	// Required: true
	// Enum: [dataCleaningHistory]
	Type *string `json:"type"`
}

// Validate validates this data cleaning history
func (m *DataCleaningHistory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataCleaningHistory) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *DataCleaningHistory) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var dataCleaningHistoryTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dataCleaningHistory"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataCleaningHistoryTypeTypePropEnum = append(dataCleaningHistoryTypeTypePropEnum, v)
	}
}

const (

	// DataCleaningHistoryTypeDataCleaningHistory captures enum value "dataCleaningHistory"
	DataCleaningHistoryTypeDataCleaningHistory string = "dataCleaningHistory"
)

// prop value enum
func (m *DataCleaningHistory) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataCleaningHistoryTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataCleaningHistory) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataCleaningHistory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataCleaningHistory) UnmarshalBinary(b []byte) error {
	var res DataCleaningHistory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DataCleaningHistoryAttributes data cleaning history attributes
// swagger:model DataCleaningHistoryAttributes
type DataCleaningHistoryAttributes struct {

	// List of data cleaning events
	Transitions []*DataCleaningTransition `json:"transitions"`
}

// Validate validates this data cleaning history attributes
func (m *DataCleaningHistoryAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransitions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataCleaningHistoryAttributes) validateTransitions(formats strfmt.Registry) error {

	if swag.IsZero(m.Transitions) { // not required
		return nil
	}

	for i := 0; i < len(m.Transitions); i++ {
		if swag.IsZero(m.Transitions[i]) { // not required
			continue
		}

		if m.Transitions[i] != nil {
			if err := m.Transitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + "transitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataCleaningHistoryAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataCleaningHistoryAttributes) UnmarshalBinary(b []byte) error {
	var res DataCleaningHistoryAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
