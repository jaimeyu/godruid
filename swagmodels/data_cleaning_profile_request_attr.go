// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataCleaningProfileRequestAttr data cleaning profile request attr
// swagger:model DataCleaningProfileRequestAttr
type DataCleaningProfileRequestAttr struct {

	// Value used to ensure updates to this object are handled in order.
	// Required: true
	Rev *string `json:"_rev"`

	// rules
	// Required: true
	Rules DataCleaningProfileRequestAttrRules `json:"rules"`
}

// Validate validates this data cleaning profile request attr
func (m *DataCleaningProfileRequestAttr) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRev(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataCleaningProfileRequestAttr) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("_rev", "body", m.Rev); err != nil {
		return err
	}

	return nil
}

func (m *DataCleaningProfileRequestAttr) validateRules(formats strfmt.Registry) error {

	if err := validate.Required("rules", "body", m.Rules); err != nil {
		return err
	}

	if err := m.Rules.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rules")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataCleaningProfileRequestAttr) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataCleaningProfileRequestAttr) UnmarshalBinary(b []byte) error {
	var res DataCleaningProfileRequestAttr
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
