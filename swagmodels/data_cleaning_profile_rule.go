// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataCleaningProfileRule data cleaning profile rule
// swagger:model DataCleaningProfileRule
type DataCleaningProfileRule struct {

	// Object which determines when a rule will be cleared
	// Required: true
	ClearCondition *DataCleaningCondition `json:"clearCondition"`

	// Toggle to indicate whether or not the rule will be applied.
	// Required: true
	IsEnabled *bool `json:"isEnabled"`

	// The name of the metric used in the rule.
	// Required: true
	MetricLabel *string `json:"metricLabel"`

	// The name of the vendor which provides the metric used in the rule.
	// Required: true
	MetricVendor *string `json:"metricVendor"`

	// Object which determines when a rule will be triggered/applied
	// Required: true
	TriggerCondition *DataCleaningCondition `json:"triggerCondition"`
}

// Validate validates this data cleaning profile rule
func (m *DataCleaningProfileRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClearCondition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIsEnabled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMetricLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMetricVendor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTriggerCondition(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataCleaningProfileRule) validateClearCondition(formats strfmt.Registry) error {

	if err := validate.Required("clearCondition", "body", m.ClearCondition); err != nil {
		return err
	}

	if m.ClearCondition != nil {

		if err := m.ClearCondition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clearCondition")
			}
			return err
		}

	}

	return nil
}

func (m *DataCleaningProfileRule) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isEnabled", "body", m.IsEnabled); err != nil {
		return err
	}

	return nil
}

func (m *DataCleaningProfileRule) validateMetricLabel(formats strfmt.Registry) error {

	if err := validate.Required("metricLabel", "body", m.MetricLabel); err != nil {
		return err
	}

	return nil
}

var dataCleaningProfileRuleTypeMetricVendorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["accedian-twamp","acedian-flowmeter"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataCleaningProfileRuleTypeMetricVendorPropEnum = append(dataCleaningProfileRuleTypeMetricVendorPropEnum, v)
	}
}

const (

	// DataCleaningProfileRuleMetricVendorAccedianTwamp captures enum value "accedian-twamp"
	DataCleaningProfileRuleMetricVendorAccedianTwamp string = "accedian-twamp"

	// DataCleaningProfileRuleMetricVendorAcedianFlowmeter captures enum value "acedian-flowmeter"
	DataCleaningProfileRuleMetricVendorAcedianFlowmeter string = "acedian-flowmeter"
)

// prop value enum
func (m *DataCleaningProfileRule) validateMetricVendorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataCleaningProfileRuleTypeMetricVendorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DataCleaningProfileRule) validateMetricVendor(formats strfmt.Registry) error {

	if err := validate.Required("metricVendor", "body", m.MetricVendor); err != nil {
		return err
	}

	// value enum
	if err := m.validateMetricVendorEnum("metricVendor", "body", *m.MetricVendor); err != nil {
		return err
	}

	return nil
}

func (m *DataCleaningProfileRule) validateTriggerCondition(formats strfmt.Registry) error {

	if err := validate.Required("triggerCondition", "body", m.TriggerCondition); err != nil {
		return err
	}

	if m.TriggerCondition != nil {

		if err := m.TriggerCondition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triggerCondition")
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataCleaningProfileRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataCleaningProfileRule) UnmarshalBinary(b []byte) error {
	var res DataCleaningProfileRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
