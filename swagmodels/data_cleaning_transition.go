// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DataCleaningTransition data cleaning transition
// swagger:model DataCleaningTransition
type DataCleaningTransition struct {

	// errors cleared
	ErrorsCleared []*DataCleaningTransitionError `json:"errorsCleared"`

	// errors raised
	ErrorsRaised []*DataCleaningTransitionError `json:"errorsRaised"`

	// rules cleared
	RulesCleared []*DataCleaningTransitionRule `json:"rulesCleared"`

	// rules raised
	RulesRaised []*DataCleaningTransitionRule `json:"rulesRaised"`

	// Time since epoch at which these transitions occurred.
	Timestamp int64 `json:"timestamp,omitempty"`
}

// Validate validates this data cleaning transition
func (m *DataCleaningTransition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorsCleared(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorsRaised(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRulesCleared(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRulesRaised(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataCleaningTransition) validateErrorsCleared(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorsCleared) { // not required
		return nil
	}

	for i := 0; i < len(m.ErrorsCleared); i++ {
		if swag.IsZero(m.ErrorsCleared[i]) { // not required
			continue
		}

		if m.ErrorsCleared[i] != nil {
			if err := m.ErrorsCleared[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorsCleared" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataCleaningTransition) validateErrorsRaised(formats strfmt.Registry) error {

	if swag.IsZero(m.ErrorsRaised) { // not required
		return nil
	}

	for i := 0; i < len(m.ErrorsRaised); i++ {
		if swag.IsZero(m.ErrorsRaised[i]) { // not required
			continue
		}

		if m.ErrorsRaised[i] != nil {
			if err := m.ErrorsRaised[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errorsRaised" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataCleaningTransition) validateRulesCleared(formats strfmt.Registry) error {

	if swag.IsZero(m.RulesCleared) { // not required
		return nil
	}

	for i := 0; i < len(m.RulesCleared); i++ {
		if swag.IsZero(m.RulesCleared[i]) { // not required
			continue
		}

		if m.RulesCleared[i] != nil {
			if err := m.RulesCleared[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rulesCleared" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataCleaningTransition) validateRulesRaised(formats strfmt.Registry) error {

	if swag.IsZero(m.RulesRaised) { // not required
		return nil
	}

	for i := 0; i < len(m.RulesRaised); i++ {
		if swag.IsZero(m.RulesRaised[i]) { // not required
			continue
		}

		if m.RulesRaised[i] != nil {
			if err := m.RulesRaised[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rulesRaised" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataCleaningTransition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataCleaningTransition) UnmarshalBinary(b []byte) error {
	var res DataCleaningTransition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
