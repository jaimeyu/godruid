// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistogramReport The rendered response structure from the metric query
// swagger:model HistogramReport
type HistogramReport []*HistogramReportItems0

// Validate validates this histogram report
func (m HistogramReport) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// HistogramReportItems0 histogram report items0
// swagger:model HistogramReportItems0
type HistogramReportItems0 struct {
	ResultEntryParameters

	// An ordered list of metric values corresponding to the buckets provided in the histogram request
	Series []*HistogramReportItems0SeriesItems0 `json:"series"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HistogramReportItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ResultEntryParameters
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ResultEntryParameters = aO0

	// AO1
	var dataAO1 struct {
		Series []*HistogramReportItems0SeriesItems0 `json:"series,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Series = dataAO1.Series

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HistogramReportItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ResultEntryParameters)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Series []*HistogramReportItems0SeriesItems0 `json:"series,omitempty"`
	}

	dataAO1.Series = m.Series

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this histogram report items0
func (m *HistogramReportItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ResultEntryParameters
	if err := m.ResultEntryParameters.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistogramReportItems0) validateSeries(formats strfmt.Registry) error {

	if swag.IsZero(m.Series) { // not required
		return nil
	}

	for i := 0; i < len(m.Series); i++ {
		if swag.IsZero(m.Series[i]) { // not required
			continue
		}

		if m.Series[i] != nil {
			if err := m.Series[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistogramReportItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistogramReportItems0) UnmarshalBinary(b []byte) error {
	var res HistogramReportItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HistogramReportItems0SeriesItems0 histogram report items0 series items0
// swagger:model HistogramReportItems0SeriesItems0
type HistogramReportItems0SeriesItems0 struct {

	// timestamp
	Timestamp string `json:"timestamp,omitempty"`

	// values
	// Required: true
	Values []int64 `json:"values"`
}

// Validate validates this histogram report items0 series items0
func (m *HistogramReportItems0SeriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HistogramReportItems0SeriesItems0) validateValues(formats strfmt.Registry) error {

	if err := validate.Required("values", "body", m.Values); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistogramReportItems0SeriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistogramReportItems0SeriesItems0) UnmarshalBinary(b []byte) error {
	var res HistogramReportItems0SeriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
