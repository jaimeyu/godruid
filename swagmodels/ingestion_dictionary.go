// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngestionDictionary Provides a listing of all metric values supported by Datahub
// swagger:model IngestionDictionary
type IngestionDictionary struct {

	// data
	Data *IngestionDictionaryData `json:"data,omitempty"`
}

// Validate validates this ingestion dictionary
func (m *IngestionDictionary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionDictionary) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionary) UnmarshalBinary(b []byte) error {
	var res IngestionDictionary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryData ingestion dictionary data
// swagger:model IngestionDictionaryData
type IngestionDictionaryData struct {

	// attributes
	Attributes *IngestionDictionaryDataAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [ingestionDictionaries]
	Type string `json:"type,omitempty"`
}

// Validate validates this ingestion dictionary data
func (m *IngestionDictionaryData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionDictionaryData) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var ingestionDictionaryDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingestionDictionaries"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ingestionDictionaryDataTypeTypePropEnum = append(ingestionDictionaryDataTypeTypePropEnum, v)
	}
}

const (

	// IngestionDictionaryDataTypeIngestionDictionaries captures enum value "ingestionDictionaries"
	IngestionDictionaryDataTypeIngestionDictionaries string = "ingestionDictionaries"
)

// prop value enum
func (m *IngestionDictionaryData) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ingestionDictionaryDataTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IngestionDictionaryData) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryData) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryDataAttributes ingestion dictionary data attributes
// swagger:model IngestionDictionaryDataAttributes
type IngestionDictionaryDataAttributes struct {

	// metrics
	// Required: true
	Metrics map[string]IngestionDictionaryDataAttributesMetricsAnon `json:"metrics"`
}

// Validate validates this ingestion dictionary data attributes
func (m *IngestionDictionaryDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionDictionaryDataAttributes) validateMetrics(formats strfmt.Registry) error {

	for k := range m.Metrics {

		if err := validate.Required("data"+"."+"attributes"+"."+"metrics"+"."+k, "body", m.Metrics[k]); err != nil {
			return err
		}
		if val, ok := m.Metrics[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryDataAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryDataAttributes) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryDataAttributesMetricsAnon ingestion dictionary data attributes metrics anon
// swagger:model IngestionDictionaryDataAttributesMetricsAnon
type IngestionDictionaryDataAttributesMetricsAnon struct {

	// metric map
	MetricMap map[string]IngestionDictionaryDataAttributesMetricsAnonMetricMapAnon `json:"metricMap,omitempty"`

	// ui
	UI *IngestionDictionaryDataAttributesMetricsAnonUI `json:"ui,omitempty"`
}

// Validate validates this ingestion dictionary data attributes metrics anon
func (m *IngestionDictionaryDataAttributesMetricsAnon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetricMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionDictionaryDataAttributesMetricsAnon) validateMetricMap(formats strfmt.Registry) error {

	if swag.IsZero(m.MetricMap) { // not required
		return nil
	}

	for k := range m.MetricMap {

		if swag.IsZero(m.MetricMap[k]) { // not required
			continue
		}
		if val, ok := m.MetricMap[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IngestionDictionaryDataAttributesMetricsAnon) validateUI(formats strfmt.Registry) error {

	if swag.IsZero(m.UI) { // not required
		return nil
	}

	if m.UI != nil {
		if err := m.UI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ui")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryDataAttributesMetricsAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryDataAttributesMetricsAnon) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryDataAttributesMetricsAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryDataAttributesMetricsAnonMetricMapAnon ingestion dictionary data attributes metrics anon metric map anon
// swagger:model IngestionDictionaryDataAttributesMetricsAnonMetricMapAnon
type IngestionDictionaryDataAttributesMetricsAnonMetricMapAnon struct {

	// monitored object types
	MonitoredObjectTypes []*IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0 `json:"monitoredObjectTypes"`

	// ui
	UI *IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonUI `json:"ui,omitempty"`
}

// Validate validates this ingestion dictionary data attributes metrics anon metric map anon
func (m *IngestionDictionaryDataAttributesMetricsAnonMetricMapAnon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMonitoredObjectTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionDictionaryDataAttributesMetricsAnonMetricMapAnon) validateMonitoredObjectTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.MonitoredObjectTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.MonitoredObjectTypes); i++ {
		if swag.IsZero(m.MonitoredObjectTypes[i]) { // not required
			continue
		}

		if m.MonitoredObjectTypes[i] != nil {
			if err := m.MonitoredObjectTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("monitoredObjectTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IngestionDictionaryDataAttributesMetricsAnonMetricMapAnon) validateUI(formats strfmt.Registry) error {

	if swag.IsZero(m.UI) { // not required
		return nil
	}

	if m.UI != nil {
		if err := m.UI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ui")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryDataAttributesMetricsAnonMetricMapAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryDataAttributesMetricsAnonMetricMapAnon) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryDataAttributesMetricsAnonMetricMapAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0 ingestion dictionary data attributes metrics anon metric map anon monitored object types items0
// swagger:model IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0
type IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0 struct {

	// directions
	Directions []string `json:"directions"`

	// key
	Key string `json:"key,omitempty"`

	// raw metric Id
	RawMetricID string `json:"rawMetricId,omitempty"`

	// units
	Units []string `json:"units"`
}

// Validate validates this ingestion dictionary data attributes metrics anon metric map anon monitored object types items0
func (m *IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonUI ingestion dictionary data attributes metrics anon metric map anon UI
// swagger:model IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonUI
type IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonUI struct {

	// group
	Group string `json:"group,omitempty"`

	// position
	Position string `json:"position,omitempty"`
}

// Validate validates this ingestion dictionary data attributes metrics anon metric map anon UI
func (m *IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonUI) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonUI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonUI) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryDataAttributesMetricsAnonMetricMapAnonUI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryDataAttributesMetricsAnonUI ingestion dictionary data attributes metrics anon UI
// swagger:model IngestionDictionaryDataAttributesMetricsAnonUI
type IngestionDictionaryDataAttributesMetricsAnonUI struct {

	// metric groups
	MetricGroups []string `json:"metricGroups"`
}

// Validate validates this ingestion dictionary data attributes metrics anon UI
func (m *IngestionDictionaryDataAttributesMetricsAnonUI) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryDataAttributesMetricsAnonUI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryDataAttributesMetricsAnonUI) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryDataAttributesMetricsAnonUI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
