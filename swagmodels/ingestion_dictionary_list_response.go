// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngestionDictionaryListResponse Provides a listing of all metric values supported by Datahub
// swagger:model IngestionDictionaryListResponse
type IngestionDictionaryListResponse struct {

	// data
	Data []*IngestionDictionaryListResponseDataItems0 `json:"data"`
}

// Validate validates this ingestion dictionary list response
func (m *IngestionDictionaryListResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionDictionaryListResponse) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryListResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryListResponse) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryListResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryListResponseDataItems0 ingestion dictionary list response data items0
// swagger:model IngestionDictionaryListResponseDataItems0
type IngestionDictionaryListResponseDataItems0 struct {

	// attributes
	Attributes *IngestionDictionaryListResponseDataItems0Attributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [ingestionDictionaries]
	Type string `json:"type,omitempty"`
}

// Validate validates this ingestion dictionary list response data items0
func (m *IngestionDictionaryListResponseDataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionDictionaryListResponseDataItems0) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

var ingestionDictionaryListResponseDataItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingestionDictionaries"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ingestionDictionaryListResponseDataItems0TypeTypePropEnum = append(ingestionDictionaryListResponseDataItems0TypeTypePropEnum, v)
	}
}

const (

	// IngestionDictionaryListResponseDataItems0TypeIngestionDictionaries captures enum value "ingestionDictionaries"
	IngestionDictionaryListResponseDataItems0TypeIngestionDictionaries string = "ingestionDictionaries"
)

// prop value enum
func (m *IngestionDictionaryListResponseDataItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ingestionDictionaryListResponseDataItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IngestionDictionaryListResponseDataItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryListResponseDataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryListResponseDataItems0Attributes ingestion dictionary list response data items0 attributes
// swagger:model IngestionDictionaryListResponseDataItems0Attributes
type IngestionDictionaryListResponseDataItems0Attributes struct {

	// This property will be deprecated in the next API version.
	MetricGroups []*IngestionDictionaryListResponseDataItems0AttributesMetricGroupsItems0 `json:"metricGroups"`

	// Provides an array of objects that describe the possible metric combinations that may be retained by Datahub
	MetricList []*IngestionDictionaryListResponseDataItems0AttributesMetricListItems0 `json:"metricList"`

	// Metrics will be deprecated in the next API version. Please use the 'metricList' property instead
	// Required: true
	Metrics map[string]IngestionDictionaryListResponseDataItems0AttributesMetricsAnon `json:"metrics"`
}

// Validate validates this ingestion dictionary list response data items0 attributes
func (m *IngestionDictionaryListResponseDataItems0Attributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetricGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionDictionaryListResponseDataItems0Attributes) validateMetricGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.MetricGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.MetricGroups); i++ {
		if swag.IsZero(m.MetricGroups[i]) { // not required
			continue
		}

		if m.MetricGroups[i] != nil {
			if err := m.MetricGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + "metricGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IngestionDictionaryListResponseDataItems0Attributes) validateMetricList(formats strfmt.Registry) error {

	if swag.IsZero(m.MetricList) { // not required
		return nil
	}

	for i := 0; i < len(m.MetricList); i++ {
		if swag.IsZero(m.MetricList[i]) { // not required
			continue
		}

		if m.MetricList[i] != nil {
			if err := m.MetricList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attributes" + "." + "metricList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IngestionDictionaryListResponseDataItems0Attributes) validateMetrics(formats strfmt.Registry) error {

	for k := range m.Metrics {

		if err := validate.Required("attributes"+"."+"metrics"+"."+k, "body", m.Metrics[k]); err != nil {
			return err
		}
		if val, ok := m.Metrics[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0Attributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0Attributes) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryListResponseDataItems0Attributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryListResponseDataItems0AttributesMetricGroupsItems0 ingestion dictionary list response data items0 attributes metric groups items0
// swagger:model IngestionDictionaryListResponseDataItems0AttributesMetricGroupsItems0
type IngestionDictionaryListResponseDataItems0AttributesMetricGroupsItems0 struct {

	// groups
	Groups []string `json:"groups"`

	// vendor
	Vendor string `json:"vendor,omitempty"`
}

// Validate validates this ingestion dictionary list response data items0 attributes metric groups items0
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricGroupsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricGroupsItems0) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryListResponseDataItems0AttributesMetricGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryListResponseDataItems0AttributesMetricListItems0 Describes a single Metric available in Datahub
// swagger:model IngestionDictionaryListResponseDataItems0AttributesMetricListItems0
type IngestionDictionaryListResponseDataItems0AttributesMetricListItems0 struct {

	// Provides data properties by which the Metric may be filtered and/or aggregated
	Dimensions []map[string][]string `json:"dimensions"`

	// The name of the Metric
	Metric string `json:"metric,omitempty"`

	// The name of the type of Monitored Object for which this Metric is applicable
	MonitoredObjectType string `json:"monitoredObjectType,omitempty"`

	// The name of the Metric as it is reported during measurments
	RawMetricID string `json:"rawMetricId,omitempty"`

	// ui
	UI *IngestionDictionaryListResponseDataItems0AttributesMetricListItems0UI `json:"ui,omitempty"`

	// The unit of measurement used when capturing the value for this Metric
	Unit string `json:"unit,omitempty"`

	// The name of the Vendor from which this Metric originates
	Vendor string `json:"vendor,omitempty"`
}

// Validate validates this ingestion dictionary list response data items0 attributes metric list items0
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricListItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionDictionaryListResponseDataItems0AttributesMetricListItems0) validateUI(formats strfmt.Registry) error {

	if swag.IsZero(m.UI) { // not required
		return nil
	}

	if m.UI != nil {
		if err := m.UI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ui")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricListItems0) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryListResponseDataItems0AttributesMetricListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryListResponseDataItems0AttributesMetricListItems0UI This property will be deprecated in the next API version.
// swagger:model IngestionDictionaryListResponseDataItems0AttributesMetricListItems0UI
type IngestionDictionaryListResponseDataItems0AttributesMetricListItems0UI struct {

	// group
	Group string `json:"group,omitempty"`

	// position
	Position string `json:"position,omitempty"`
}

// Validate validates this ingestion dictionary list response data items0 attributes metric list items0 UI
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricListItems0UI) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricListItems0UI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricListItems0UI) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryListResponseDataItems0AttributesMetricListItems0UI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryListResponseDataItems0AttributesMetricsAnon ingestion dictionary list response data items0 attributes metrics anon
// swagger:model IngestionDictionaryListResponseDataItems0AttributesMetricsAnon
type IngestionDictionaryListResponseDataItems0AttributesMetricsAnon struct {

	// metric map
	MetricMap map[string]IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnon `json:"metricMap,omitempty"`

	// ui
	UI *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonUI `json:"ui,omitempty"`
}

// Validate validates this ingestion dictionary list response data items0 attributes metrics anon
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetricMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnon) validateMetricMap(formats strfmt.Registry) error {

	if swag.IsZero(m.MetricMap) { // not required
		return nil
	}

	for k := range m.MetricMap {

		if swag.IsZero(m.MetricMap[k]) { // not required
			continue
		}
		if val, ok := m.MetricMap[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnon) validateUI(formats strfmt.Registry) error {

	if swag.IsZero(m.UI) { // not required
		return nil
	}

	if m.UI != nil {
		if err := m.UI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ui")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnon) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryListResponseDataItems0AttributesMetricsAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnon ingestion dictionary list response data items0 attributes metrics anon metric map anon
// swagger:model IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnon
type IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnon struct {

	// monitored object types
	MonitoredObjectTypes []*IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0 `json:"monitoredObjectTypes"`

	// ui
	UI *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonUI `json:"ui,omitempty"`
}

// Validate validates this ingestion dictionary list response data items0 attributes metrics anon metric map anon
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMonitoredObjectTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnon) validateMonitoredObjectTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.MonitoredObjectTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.MonitoredObjectTypes); i++ {
		if swag.IsZero(m.MonitoredObjectTypes[i]) { // not required
			continue
		}

		if m.MonitoredObjectTypes[i] != nil {
			if err := m.MonitoredObjectTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("monitoredObjectTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnon) validateUI(formats strfmt.Registry) error {

	if swag.IsZero(m.UI) { // not required
		return nil
	}

	if m.UI != nil {
		if err := m.UI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ui")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnon) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0 ingestion dictionary list response data items0 attributes metrics anon metric map anon monitored object types items0
// swagger:model IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0
type IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0 struct {

	// directions
	Directions []string `json:"directions"`

	// key
	Key string `json:"key,omitempty"`

	// raw metric Id
	RawMetricID string `json:"rawMetricId,omitempty"`

	// units
	Units []string `json:"units"`
}

// Validate validates this ingestion dictionary list response data items0 attributes metrics anon metric map anon monitored object types items0
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonMonitoredObjectTypesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonUI ingestion dictionary list response data items0 attributes metrics anon metric map anon UI
// swagger:model IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonUI
type IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonUI struct {

	// group
	Group string `json:"group,omitempty"`

	// position
	Position string `json:"position,omitempty"`
}

// Validate validates this ingestion dictionary list response data items0 attributes metrics anon metric map anon UI
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonUI) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonUI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonUI) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryListResponseDataItems0AttributesMetricsAnonMetricMapAnonUI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionDictionaryListResponseDataItems0AttributesMetricsAnonUI ingestion dictionary list response data items0 attributes metrics anon UI
// swagger:model IngestionDictionaryListResponseDataItems0AttributesMetricsAnonUI
type IngestionDictionaryListResponseDataItems0AttributesMetricsAnonUI struct {

	// metric groups
	MetricGroups []string `json:"metricGroups"`
}

// Validate validates this ingestion dictionary list response data items0 attributes metrics anon UI
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonUI) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonUI) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryListResponseDataItems0AttributesMetricsAnonUI) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryListResponseDataItems0AttributesMetricsAnonUI
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
