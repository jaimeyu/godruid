// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// IngestionDictionaryMetricMap ingestion dictionary metric map
// swagger:model IngestionDictionaryMetricMap
type IngestionDictionaryMetricMap struct {

	// metric map
	MetricMap IngestionDictionaryMetricMapMetricMap `json:"metricMap,omitempty"`

	// ui
	UI IngestionDictionaryMetricMapUI `json:"ui"`
}

// Validate validates this ingestion dictionary metric map
func (m *IngestionDictionaryMetricMap) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetricMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionDictionaryMetricMap) validateMetricMap(formats strfmt.Registry) error {

	if swag.IsZero(m.MetricMap) { // not required
		return nil
	}

	if err := m.MetricMap.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("metricMap")
		}
		return err
	}

	return nil
}

func (m *IngestionDictionaryMetricMap) validateUI(formats strfmt.Registry) error {

	if swag.IsZero(m.UI) { // not required
		return nil
	}

	if err := m.UI.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ui")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionDictionaryMetricMap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionDictionaryMetricMap) UnmarshalBinary(b []byte) error {
	var res IngestionDictionaryMetricMap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
