// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngestionProfile ingestion profile
// swagger:model IngestionProfile
type IngestionProfile struct {

	// attributes
	// Required: true
	Attributes *IngestionProfileAttributes `json:"attributes"`

	// id
	// Required: true
	ID *string `json:"id"`

	// type
	// Required: true
	// Enum: [ingestionProfiles]
	Type *string `json:"type"`
}

// Validate validates this ingestion profile
func (m *IngestionProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionProfile) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *IngestionProfile) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var ingestionProfileTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingestionProfiles"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ingestionProfileTypeTypePropEnum = append(ingestionProfileTypeTypePropEnum, v)
	}
}

const (

	// IngestionProfileTypeIngestionProfiles captures enum value "ingestionProfiles"
	IngestionProfileTypeIngestionProfiles string = "ingestionProfiles"
)

// prop value enum
func (m *IngestionProfile) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ingestionProfileTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IngestionProfile) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionProfile) UnmarshalBinary(b []byte) error {
	var res IngestionProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionProfileAttributes ingestion profile attributes
// swagger:model IngestionProfileAttributes
type IngestionProfileAttributes struct {

	// id
	// Required: true
	ID *string `json:"_id"`

	// rev
	// Required: true
	Rev *string `json:"_rev"`

	// created timestamp
	// Required: true
	CreatedTimestamp *int64 `json:"createdTimestamp"`

	// datatype
	Datatype string `json:"datatype,omitempty"`

	// last modified timestamp
	// Required: true
	LastModifiedTimestamp *int64 `json:"lastModifiedTimestamp"`

	// metrics
	// Required: true
	Metrics *IngestionProfileAttributesMetrics `json:"metrics"`

	// tenant Id
	// Required: true
	TenantID *string `json:"tenantId"`
}

// Validate validates this ingestion profile attributes
func (m *IngestionProfileAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionProfileAttributes) validateID(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"_id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *IngestionProfileAttributes) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"_rev", "body", m.Rev); err != nil {
		return err
	}

	return nil
}

func (m *IngestionProfileAttributes) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"createdTimestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *IngestionProfileAttributes) validateLastModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"lastModifiedTimestamp", "body", m.LastModifiedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *IngestionProfileAttributes) validateMetrics(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"metrics", "body", m.Metrics); err != nil {
		return err
	}

	if m.Metrics != nil {
		if err := m.Metrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "metrics")
			}
			return err
		}
	}

	return nil
}

func (m *IngestionProfileAttributes) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionProfileAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionProfileAttributes) UnmarshalBinary(b []byte) error {
	var res IngestionProfileAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionProfileAttributesMetrics ingestion profile attributes metrics
// swagger:model IngestionProfileAttributesMetrics
type IngestionProfileAttributesMetrics struct {

	// vendor map
	VendorMap map[string]IngestionProfileAttributesMetricsVendorMapAnon `json:"vendorMap,omitempty"`
}

// Validate validates this ingestion profile attributes metrics
func (m *IngestionProfileAttributesMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVendorMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionProfileAttributesMetrics) validateVendorMap(formats strfmt.Registry) error {

	if swag.IsZero(m.VendorMap) { // not required
		return nil
	}

	for k := range m.VendorMap {

		if swag.IsZero(m.VendorMap[k]) { // not required
			continue
		}
		if val, ok := m.VendorMap[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionProfileAttributesMetrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionProfileAttributesMetrics) UnmarshalBinary(b []byte) error {
	var res IngestionProfileAttributesMetrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionProfileAttributesMetricsVendorMapAnon ingestion profile attributes metrics vendor map anon
// swagger:model IngestionProfileAttributesMetricsVendorMapAnon
type IngestionProfileAttributesMetricsVendorMapAnon struct {

	// monitored object type map
	MonitoredObjectTypeMap map[string]IngestionProfileAttributesMetricsVendorMapAnonMonitoredObjectTypeMapAnon `json:"monitoredObjectTypeMap,omitempty"`
}

// Validate validates this ingestion profile attributes metrics vendor map anon
func (m *IngestionProfileAttributesMetricsVendorMapAnon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMonitoredObjectTypeMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionProfileAttributesMetricsVendorMapAnon) validateMonitoredObjectTypeMap(formats strfmt.Registry) error {

	if swag.IsZero(m.MonitoredObjectTypeMap) { // not required
		return nil
	}

	for k := range m.MonitoredObjectTypeMap {

		if swag.IsZero(m.MonitoredObjectTypeMap[k]) { // not required
			continue
		}
		if val, ok := m.MonitoredObjectTypeMap[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionProfileAttributesMetricsVendorMapAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionProfileAttributesMetricsVendorMapAnon) UnmarshalBinary(b []byte) error {
	var res IngestionProfileAttributesMetricsVendorMapAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionProfileAttributesMetricsVendorMapAnonMonitoredObjectTypeMapAnon ingestion profile attributes metrics vendor map anon monitored object type map anon
// swagger:model IngestionProfileAttributesMetricsVendorMapAnonMonitoredObjectTypeMapAnon
type IngestionProfileAttributesMetricsVendorMapAnonMonitoredObjectTypeMapAnon struct {

	// metric map
	MetricMap map[string]bool `json:"metricMap,omitempty"`
}

// Validate validates this ingestion profile attributes metrics vendor map anon monitored object type map anon
func (m *IngestionProfileAttributesMetricsVendorMapAnonMonitoredObjectTypeMapAnon) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngestionProfileAttributesMetricsVendorMapAnonMonitoredObjectTypeMapAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionProfileAttributesMetricsVendorMapAnonMonitoredObjectTypeMapAnon) UnmarshalBinary(b []byte) error {
	var res IngestionProfileAttributesMetricsVendorMapAnonMonitoredObjectTypeMapAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
