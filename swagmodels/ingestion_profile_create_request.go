// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngestionProfileCreateRequest ingestion profile create request
// swagger:model IngestionProfileCreateRequest
type IngestionProfileCreateRequest struct {

	// data
	// Required: true
	Data *IngestionProfileCreateRequestData `json:"data"`
}

// Validate validates this ingestion profile create request
func (m *IngestionProfileCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionProfileCreateRequest) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionProfileCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionProfileCreateRequest) UnmarshalBinary(b []byte) error {
	var res IngestionProfileCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionProfileCreateRequestData ingestion profile create request data
// swagger:model IngestionProfileCreateRequestData
type IngestionProfileCreateRequestData struct {

	// attributes
	// Required: true
	Attributes *IngestionProfileCreateRequestDataAttributes `json:"attributes"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Required: true
	// Enum: [ingestionProfiles]
	Type *string `json:"type"`
}

// Validate validates this ingestion profile create request data
func (m *IngestionProfileCreateRequestData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionProfileCreateRequestData) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var ingestionProfileCreateRequestDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ingestionProfiles"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ingestionProfileCreateRequestDataTypeTypePropEnum = append(ingestionProfileCreateRequestDataTypeTypePropEnum, v)
	}
}

const (

	// IngestionProfileCreateRequestDataTypeIngestionProfiles captures enum value "ingestionProfiles"
	IngestionProfileCreateRequestDataTypeIngestionProfiles string = "ingestionProfiles"
)

// prop value enum
func (m *IngestionProfileCreateRequestData) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ingestionProfileCreateRequestDataTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IngestionProfileCreateRequestData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionProfileCreateRequestData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionProfileCreateRequestData) UnmarshalBinary(b []byte) error {
	var res IngestionProfileCreateRequestData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IngestionProfileCreateRequestDataAttributes ingestion profile create request data attributes
// swagger:model IngestionProfileCreateRequestDataAttributes
type IngestionProfileCreateRequestDataAttributes struct {

	// metric list
	MetricList IngestionProfileMetricList `json:"metricList"`

	// Metrics will be deprecated in the next API version. Please use the 'metricList' property instead
	// Required: true
	Metrics *IngestionProfileMetrics `json:"metrics"`
}

// Validate validates this ingestion profile create request data attributes
func (m *IngestionProfileCreateRequestDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetricList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionProfileCreateRequestDataAttributes) validateMetricList(formats strfmt.Registry) error {

	if swag.IsZero(m.MetricList) { // not required
		return nil
	}

	if err := m.MetricList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("data" + "." + "attributes" + "." + "metricList")
		}
		return err
	}

	return nil
}

func (m *IngestionProfileCreateRequestDataAttributes) validateMetrics(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes"+"."+"metrics", "body", m.Metrics); err != nil {
		return err
	}

	if m.Metrics != nil {
		if err := m.Metrics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes" + "." + "metrics")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IngestionProfileCreateRequestDataAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionProfileCreateRequestDataAttributes) UnmarshalBinary(b []byte) error {
	var res IngestionProfileCreateRequestDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
