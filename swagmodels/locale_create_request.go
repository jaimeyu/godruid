// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocaleCreateRequest locale create request
// swagger:model LocaleCreateRequest
type LocaleCreateRequest struct {

	// data
	// Required: true
	Data *LocaleCreateRequestData `json:"data"`
}

// Validate validates this locale create request
func (m *LocaleCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocaleCreateRequest) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocaleCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocaleCreateRequest) UnmarshalBinary(b []byte) error {
	var res LocaleCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LocaleCreateRequestData locale create request data
// swagger:model LocaleCreateRequestData
type LocaleCreateRequestData struct {

	// attributes
	// Required: true
	Attributes *LocaleCreateRequestDataAttributes `json:"attributes"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Required: true
	// Enum: [locales]
	Type *string `json:"type"`
}

// Validate validates this locale create request data
func (m *LocaleCreateRequestData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocaleCreateRequestData) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var localeCreateRequestDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["locales"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		localeCreateRequestDataTypeTypePropEnum = append(localeCreateRequestDataTypeTypePropEnum, v)
	}
}

const (

	// LocaleCreateRequestDataTypeLocales captures enum value "locales"
	LocaleCreateRequestDataTypeLocales string = "locales"
)

// prop value enum
func (m *LocaleCreateRequestData) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, localeCreateRequestDataTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LocaleCreateRequestData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocaleCreateRequestData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocaleCreateRequestData) UnmarshalBinary(b []byte) error {
	var res LocaleCreateRequestData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LocaleCreateRequestDataAttributes locale create request data attributes
// swagger:model LocaleCreateRequestDataAttributes
type LocaleCreateRequestDataAttributes struct {

	// The short-form code for the internationalization region
	// Required: true
	Intl *string `json:"intl"`

	// moment
	// Required: true
	Moment *string `json:"moment"`

	// Timezone used to coordinate timestamps for the specified region
	// Required: true
	Timezone *string `json:"timezone"`
}

// Validate validates this locale create request data attributes
func (m *LocaleCreateRequestDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIntl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMoment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocaleCreateRequestDataAttributes) validateIntl(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes"+"."+"intl", "body", m.Intl); err != nil {
		return err
	}

	return nil
}

func (m *LocaleCreateRequestDataAttributes) validateMoment(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes"+"."+"moment", "body", m.Moment); err != nil {
		return err
	}

	return nil
}

func (m *LocaleCreateRequestDataAttributes) validateTimezone(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes"+"."+"timezone", "body", m.Timezone); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocaleCreateRequestDataAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocaleCreateRequestDataAttributes) UnmarshalBinary(b []byte) error {
	var res LocaleCreateRequestDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
