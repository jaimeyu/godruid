// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetadataConfig metadata config
// swagger:model MetadataConfig
type MetadataConfig struct {

	// attributes
	// Required: true
	Attributes *MetadataConfigAttributes `json:"attributes"`

	// id
	// Required: true
	ID *string `json:"id"`

	// type
	// Required: true
	// Enum: [metadataConfigs]
	Type *string `json:"type"`
}

// Validate validates this metadata config
func (m *MetadataConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataConfig) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataConfig) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var metadataConfigTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["metadataConfigs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metadataConfigTypeTypePropEnum = append(metadataConfigTypeTypePropEnum, v)
	}
}

const (

	// MetadataConfigTypeMetadataConfigs captures enum value "metadataConfigs"
	MetadataConfigTypeMetadataConfigs string = "metadataConfigs"
)

// prop value enum
func (m *MetadataConfig) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metadataConfigTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetadataConfig) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetadataConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetadataConfig) UnmarshalBinary(b []byte) error {
	var res MetadataConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MetadataConfigAttributes metadata config attributes
// swagger:model MetadataConfigAttributes
type MetadataConfigAttributes struct {

	// id
	// Required: true
	ID *string `json:"_id"`

	// Value used to ensure updates to this object are handled in order.
	// Required: true
	Rev *string `json:"_rev"`

	// Time since epoch at which this object was instantiated.
	// Required: true
	CreatedTimestamp *int64 `json:"createdTimestamp"`

	// Name used to identify this type of record in Datahub
	Datatype string `json:"datatype,omitempty"`

	// The last point of a Logical Map
	// Required: true
	EndPoint *string `json:"endPoint"`

	// geo
	Geo *MetadataConfigGeo `json:"geo,omitempty"`

	// Time since epoch at which this object was last altered.
	// Required: true
	LastModifiedTimestamp *int64 `json:"lastModifiedTimestamp"`

	// The points between the startPoint and endPoint of a logical map
	// Required: true
	MidPoints []string `json:"midPoints"`

	// The first point of a Logical Map
	// Required: true
	StartPoint *string `json:"startPoint"`

	// Unique identifier of the Tenant in Datahub
	// Required: true
	TenantID *string `json:"tenantId"`
}

// Validate validates this metadata config attributes
func (m *MetadataConfigAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMidPoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataConfigAttributes) validateID(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"_id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *MetadataConfigAttributes) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"_rev", "body", m.Rev); err != nil {
		return err
	}

	return nil
}

func (m *MetadataConfigAttributes) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"createdTimestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *MetadataConfigAttributes) validateEndPoint(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"endPoint", "body", m.EndPoint); err != nil {
		return err
	}

	return nil
}

func (m *MetadataConfigAttributes) validateGeo(formats strfmt.Registry) error {

	if swag.IsZero(m.Geo) { // not required
		return nil
	}

	if m.Geo != nil {
		if err := m.Geo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "geo")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataConfigAttributes) validateLastModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"lastModifiedTimestamp", "body", m.LastModifiedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *MetadataConfigAttributes) validateMidPoints(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"midPoints", "body", m.MidPoints); err != nil {
		return err
	}

	return nil
}

func (m *MetadataConfigAttributes) validateStartPoint(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"startPoint", "body", m.StartPoint); err != nil {
		return err
	}

	return nil
}

func (m *MetadataConfigAttributes) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetadataConfigAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetadataConfigAttributes) UnmarshalBinary(b []byte) error {
	var res MetadataConfigAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
