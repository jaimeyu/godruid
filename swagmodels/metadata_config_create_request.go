// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetadataConfigCreateRequest Object used to create a Metadata Configuration in Datahub
// swagger:model MetadataConfigCreateRequest
type MetadataConfigCreateRequest struct {

	// data
	// Required: true
	Data *MetadataConfigCreateRequestData `json:"data"`
}

// Validate validates this metadata config create request
func (m *MetadataConfigCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataConfigCreateRequest) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetadataConfigCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetadataConfigCreateRequest) UnmarshalBinary(b []byte) error {
	var res MetadataConfigCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MetadataConfigCreateRequestData metadata config create request data
// swagger:model MetadataConfigCreateRequestData
type MetadataConfigCreateRequestData struct {

	// attributes
	// Required: true
	Attributes *MetadataConfigCreateRequestDataAttributes `json:"attributes"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Required: true
	// Enum: [metadataConfigs]
	Type *string `json:"type"`
}

// Validate validates this metadata config create request data
func (m *MetadataConfigCreateRequestData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataConfigCreateRequestData) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var metadataConfigCreateRequestDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["metadataConfigs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metadataConfigCreateRequestDataTypeTypePropEnum = append(metadataConfigCreateRequestDataTypeTypePropEnum, v)
	}
}

const (

	// MetadataConfigCreateRequestDataTypeMetadataConfigs captures enum value "metadataConfigs"
	MetadataConfigCreateRequestDataTypeMetadataConfigs string = "metadataConfigs"
)

// prop value enum
func (m *MetadataConfigCreateRequestData) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metadataConfigCreateRequestDataTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetadataConfigCreateRequestData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetadataConfigCreateRequestData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetadataConfigCreateRequestData) UnmarshalBinary(b []byte) error {
	var res MetadataConfigCreateRequestData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MetadataConfigCreateRequestDataAttributes metadata config create request data attributes
// swagger:model MetadataConfigCreateRequestDataAttributes
type MetadataConfigCreateRequestDataAttributes struct {

	// The last point of a Logical Map
	// Required: true
	EndPoint *string `json:"endPoint"`

	// geo
	Geo *MetadataConfigGeo `json:"geo,omitempty"`

	// The points between the startPoint and endPoint of a logical map
	// Required: true
	MidPoints []string `json:"midPoints"`

	// The first point of a Logical Map
	// Required: true
	StartPoint *string `json:"startPoint"`
}

// Validate validates this metadata config create request data attributes
func (m *MetadataConfigCreateRequestDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndPoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMidPoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartPoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataConfigCreateRequestDataAttributes) validateEndPoint(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes"+"."+"endPoint", "body", m.EndPoint); err != nil {
		return err
	}

	return nil
}

func (m *MetadataConfigCreateRequestDataAttributes) validateGeo(formats strfmt.Registry) error {

	if swag.IsZero(m.Geo) { // not required
		return nil
	}

	if m.Geo != nil {
		if err := m.Geo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes" + "." + "geo")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataConfigCreateRequestDataAttributes) validateMidPoints(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes"+"."+"midPoints", "body", m.MidPoints); err != nil {
		return err
	}

	return nil
}

func (m *MetadataConfigCreateRequestDataAttributes) validateStartPoint(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes"+"."+"startPoint", "body", m.StartPoint); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetadataConfigCreateRequestDataAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetadataConfigCreateRequestDataAttributes) UnmarshalBinary(b []byte) error {
	var res MetadataConfigCreateRequestDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
