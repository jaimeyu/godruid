// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetricBaselineBulkUpdateResponse metric baseline bulk update response
// swagger:model MetricBaselineBulkUpdateResponse
type MetricBaselineBulkUpdateResponse struct {

	// data
	// Required: true
	Data *MetricBaselineBulkUpdateResponseData `json:"data"`
}

// Validate validates this metric baseline bulk update response
func (m *MetricBaselineBulkUpdateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricBaselineBulkUpdateResponse) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricBaselineBulkUpdateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricBaselineBulkUpdateResponse) UnmarshalBinary(b []byte) error {
	var res MetricBaselineBulkUpdateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MetricBaselineBulkUpdateResponseData metric baseline bulk update response data
// swagger:model MetricBaselineBulkUpdateResponseData
type MetricBaselineBulkUpdateResponseData struct {

	// A map of monitored object ID to the response data for each Monitored Object's update request
	// Required: true
	Attributes map[string]MetricBaselineBulkUpdateResponseDataAttributesAnon `json:"attributes"`

	// id
	// Required: true
	ID *string `json:"id"`

	// type
	// Required: true
	// Enum: [metricBaselineBulkUpdateResponse]
	Type *string `json:"type"`
}

// Validate validates this metric baseline bulk update response data
func (m *MetricBaselineBulkUpdateResponseData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricBaselineBulkUpdateResponseData) validateAttributes(formats strfmt.Registry) error {

	for k := range m.Attributes {

		if err := validate.Required("data"+"."+"attributes"+"."+k, "body", m.Attributes[k]); err != nil {
			return err
		}
		if val, ok := m.Attributes[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *MetricBaselineBulkUpdateResponseData) validateID(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var metricBaselineBulkUpdateResponseDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["metricBaselineBulkUpdateResponse"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricBaselineBulkUpdateResponseDataTypeTypePropEnum = append(metricBaselineBulkUpdateResponseDataTypeTypePropEnum, v)
	}
}

const (

	// MetricBaselineBulkUpdateResponseDataTypeMetricBaselineBulkUpdateResponse captures enum value "metricBaselineBulkUpdateResponse"
	MetricBaselineBulkUpdateResponseDataTypeMetricBaselineBulkUpdateResponse string = "metricBaselineBulkUpdateResponse"
)

// prop value enum
func (m *MetricBaselineBulkUpdateResponseData) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metricBaselineBulkUpdateResponseDataTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetricBaselineBulkUpdateResponseData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricBaselineBulkUpdateResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricBaselineBulkUpdateResponseData) UnmarshalBinary(b []byte) error {
	var res MetricBaselineBulkUpdateResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MetricBaselineBulkUpdateResponseDataAttributesAnon metric baseline bulk update response data attributes anon
// swagger:model MetricBaselineBulkUpdateResponseDataAttributesAnon
type MetricBaselineBulkUpdateResponseDataAttributesAnon struct {

	// error
	Error string `json:"error,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// ok
	Ok bool `json:"ok,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// rev
	Rev string `json:"rev,omitempty"`
}

// Validate validates this metric baseline bulk update response data attributes anon
func (m *MetricBaselineBulkUpdateResponseDataAttributesAnon) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MetricBaselineBulkUpdateResponseDataAttributesAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricBaselineBulkUpdateResponseDataAttributesAnon) UnmarshalBinary(b []byte) error {
	var res MetricBaselineBulkUpdateResponseDataAttributesAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
