// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetricBaselineCreateRequest Object used to create a new Metric Baseline object in Datahub
// swagger:model MetricBaselineCreateRequest
type MetricBaselineCreateRequest struct {

	// data
	// Required: true
	Data *MetricBaselineCreateRequestData `json:"data"`
}

// Validate validates this metric baseline create request
func (m *MetricBaselineCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricBaselineCreateRequest) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricBaselineCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricBaselineCreateRequest) UnmarshalBinary(b []byte) error {
	var res MetricBaselineCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MetricBaselineCreateRequestData metric baseline create request data
// swagger:model MetricBaselineCreateRequestData
type MetricBaselineCreateRequestData struct {

	// attributes
	// Required: true
	Attributes *MetricBaselineCreateRequestDataAttributes `json:"attributes"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Required: true
	// Enum: [metricBaselines]
	Type *string `json:"type"`
}

// Validate validates this metric baseline create request data
func (m *MetricBaselineCreateRequestData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricBaselineCreateRequestData) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

var metricBaselineCreateRequestDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["metricBaselines"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricBaselineCreateRequestDataTypeTypePropEnum = append(metricBaselineCreateRequestDataTypeTypePropEnum, v)
	}
}

const (

	// MetricBaselineCreateRequestDataTypeMetricBaselines captures enum value "metricBaselines"
	MetricBaselineCreateRequestDataTypeMetricBaselines string = "metricBaselines"
)

// prop value enum
func (m *MetricBaselineCreateRequestData) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metricBaselineCreateRequestDataTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetricBaselineCreateRequestData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricBaselineCreateRequestData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricBaselineCreateRequestData) UnmarshalBinary(b []byte) error {
	var res MetricBaselineCreateRequestData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MetricBaselineCreateRequestDataAttributes metric baseline create request data attributes
// swagger:model MetricBaselineCreateRequestDataAttributes
type MetricBaselineCreateRequestDataAttributes struct {

	// Contains the dynamically calculated baseline values for the metrics collected by Datahub
	Baselines []*MetricBaselineData `json:"baselines"`
}

// Validate validates this metric baseline create request data attributes
func (m *MetricBaselineCreateRequestDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaselines(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricBaselineCreateRequestDataAttributes) validateBaselines(formats strfmt.Registry) error {

	if swag.IsZero(m.Baselines) { // not required
		return nil
	}

	for i := 0; i < len(m.Baselines); i++ {
		if swag.IsZero(m.Baselines[i]) { // not required
			continue
		}

		if m.Baselines[i] != nil {
			if err := m.Baselines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "attributes" + "." + "baselines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricBaselineCreateRequestDataAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricBaselineCreateRequestDataAttributes) UnmarshalBinary(b []byte) error {
	var res MetricBaselineCreateRequestDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
