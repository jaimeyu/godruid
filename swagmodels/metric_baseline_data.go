// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetricBaselineData metric baseline data
// swagger:model MetricBaselineData
type MetricBaselineData struct {

	// The calculated average of the Metric obtained via (sum/count)
	Average float64 `json:"average,omitempty"`

	// The total number of values recorded for this metric in datahub
	Count int64 `json:"count,omitempty"`

	// The direction of the metric baseline
	Direction string `json:"direction,omitempty"`

	// Integer value of the day of the week and hour of day for which this baseline is calculated. Values are 0-167 which corresponds to each our of each day in one week
	// Maximum: 167
	// Minimum: 0
	HourOfWeek *int32 `json:"hourOfWeek,omitempty"`

	// The name of the metric represented by this baseline
	Metric string `json:"metric,omitempty"`

	// The total sumation of all values recorded for this metric in datahub
	Sum float64 `json:"sum,omitempty"`
}

// Validate validates this metric baseline data
func (m *MetricBaselineData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHourOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricBaselineData) validateHourOfWeek(formats strfmt.Registry) error {

	if swag.IsZero(m.HourOfWeek) { // not required
		return nil
	}

	if err := validate.MinimumInt("hourOfWeek", "body", int64(*m.HourOfWeek), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("hourOfWeek", "body", int64(*m.HourOfWeek), 167, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricBaselineData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricBaselineData) UnmarshalBinary(b []byte) error {
	var res MetricBaselineData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
