// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetricIdentifierFilter Filter object that identifies a specific metric within a monitored object by its key attributes
// swagger:model MetricIdentifierFilter
type MetricIdentifierFilter struct {

	// Set of one or more directions to be used by the filter to identify required metric records
	Direction []string `json:"direction"`

	// Name that identifies the specific metric within a monitored object
	// Required: true
	Metric *string `json:"metric"`

	// Object types to be considered as part of the filter
	// Required: true
	ObjectType []string `json:"objectType"`

	// Vendor name associated with the monitored object
	// Required: true
	Vendor *string `json:"vendor"`
}

// Validate validates this metric identifier filter
func (m *MetricIdentifierFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetricIdentifierFilter) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", m.Metric); err != nil {
		return err
	}

	return nil
}

func (m *MetricIdentifierFilter) validateObjectType(formats strfmt.Registry) error {

	if err := validate.Required("objectType", "body", m.ObjectType); err != nil {
		return err
	}

	return nil
}

func (m *MetricIdentifierFilter) validateVendor(formats strfmt.Registry) error {

	if err := validate.Required("vendor", "body", m.Vendor); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricIdentifierFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricIdentifierFilter) UnmarshalBinary(b []byte) error {
	var res MetricIdentifierFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
