// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MonitoredObject monitored object
// swagger:model MonitoredObject
type MonitoredObject struct {

	// attributes
	Attributes *MonitoredObjectAttributes `json:"attributes,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// type
	// Enum: [monitoredObjects]
	Type string `json:"type,omitempty"`
}

// Validate validates this monitored object
func (m *MonitoredObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoredObject) validateAttributes(formats strfmt.Registry) error {

	if swag.IsZero(m.Attributes) { // not required
		return nil
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

var monitoredObjectTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["monitoredObjects"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitoredObjectTypeTypePropEnum = append(monitoredObjectTypeTypePropEnum, v)
	}
}

const (

	// MonitoredObjectTypeMonitoredObjects captures enum value "monitoredObjects"
	MonitoredObjectTypeMonitoredObjects string = "monitoredObjects"
)

// prop value enum
func (m *MonitoredObject) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, monitoredObjectTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MonitoredObject) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitoredObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitoredObject) UnmarshalBinary(b []byte) error {
	var res MonitoredObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MonitoredObjectAttributes monitored object attributes
// swagger:model MonitoredObjectAttributes
type MonitoredObjectAttributes struct {

	// id
	ID string `json:"_id,omitempty"`

	// rev
	Rev string `json:"_rev,omitempty"`

	// actuator name
	ActuatorName string `json:"actuatorName,omitempty"`

	// actuator type
	// Enum: [unknown accedian-nid accedian-vnid]
	ActuatorType string `json:"actuatorType,omitempty"`

	// created timestamp
	CreatedTimestamp int64 `json:"createdTimestamp,omitempty"`

	// datatype
	Datatype string `json:"datatype,omitempty"`

	// last modified timestamp
	LastModifiedTimestamp int64 `json:"lastModifiedTimestamp,omitempty"`

	// object Id
	ObjectID string `json:"objectId,omitempty"`

	// object name
	ObjectName string `json:"objectName,omitempty"`

	// object type
	// Enum: [unknown flowmeter twamp-pe twamp-sf twamp-sl]
	ObjectType string `json:"objectType,omitempty"`

	// reflector name
	ReflectorName string `json:"reflectorName,omitempty"`

	// reflector type
	// Enum: [unknown accedian-nid accedian-vnid]
	ReflectorType string `json:"reflectorType,omitempty"`

	// relationships
	Relationships *MonitoredObjectAttributesRelationships `json:"relationships,omitempty"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`
}

// Validate validates this monitored object attributes
func (m *MonitoredObjectAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActuatorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReflectorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var monitoredObjectAttributesTypeActuatorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","accedian-nid","accedian-vnid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitoredObjectAttributesTypeActuatorTypePropEnum = append(monitoredObjectAttributesTypeActuatorTypePropEnum, v)
	}
}

const (

	// MonitoredObjectAttributesActuatorTypeUnknown captures enum value "unknown"
	MonitoredObjectAttributesActuatorTypeUnknown string = "unknown"

	// MonitoredObjectAttributesActuatorTypeAccedianNid captures enum value "accedian-nid"
	MonitoredObjectAttributesActuatorTypeAccedianNid string = "accedian-nid"

	// MonitoredObjectAttributesActuatorTypeAccedianVnid captures enum value "accedian-vnid"
	MonitoredObjectAttributesActuatorTypeAccedianVnid string = "accedian-vnid"
)

// prop value enum
func (m *MonitoredObjectAttributes) validateActuatorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, monitoredObjectAttributesTypeActuatorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MonitoredObjectAttributes) validateActuatorType(formats strfmt.Registry) error {

	if swag.IsZero(m.ActuatorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateActuatorTypeEnum("attributes"+"."+"actuatorType", "body", m.ActuatorType); err != nil {
		return err
	}

	return nil
}

var monitoredObjectAttributesTypeObjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","flowmeter","twamp-pe","twamp-sf","twamp-sl"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitoredObjectAttributesTypeObjectTypePropEnum = append(monitoredObjectAttributesTypeObjectTypePropEnum, v)
	}
}

const (

	// MonitoredObjectAttributesObjectTypeUnknown captures enum value "unknown"
	MonitoredObjectAttributesObjectTypeUnknown string = "unknown"

	// MonitoredObjectAttributesObjectTypeFlowmeter captures enum value "flowmeter"
	MonitoredObjectAttributesObjectTypeFlowmeter string = "flowmeter"

	// MonitoredObjectAttributesObjectTypeTwampPe captures enum value "twamp-pe"
	MonitoredObjectAttributesObjectTypeTwampPe string = "twamp-pe"

	// MonitoredObjectAttributesObjectTypeTwampSf captures enum value "twamp-sf"
	MonitoredObjectAttributesObjectTypeTwampSf string = "twamp-sf"

	// MonitoredObjectAttributesObjectTypeTwampSl captures enum value "twamp-sl"
	MonitoredObjectAttributesObjectTypeTwampSl string = "twamp-sl"
)

// prop value enum
func (m *MonitoredObjectAttributes) validateObjectTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, monitoredObjectAttributesTypeObjectTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MonitoredObjectAttributes) validateObjectType(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateObjectTypeEnum("attributes"+"."+"objectType", "body", m.ObjectType); err != nil {
		return err
	}

	return nil
}

var monitoredObjectAttributesTypeReflectorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","accedian-nid","accedian-vnid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitoredObjectAttributesTypeReflectorTypePropEnum = append(monitoredObjectAttributesTypeReflectorTypePropEnum, v)
	}
}

const (

	// MonitoredObjectAttributesReflectorTypeUnknown captures enum value "unknown"
	MonitoredObjectAttributesReflectorTypeUnknown string = "unknown"

	// MonitoredObjectAttributesReflectorTypeAccedianNid captures enum value "accedian-nid"
	MonitoredObjectAttributesReflectorTypeAccedianNid string = "accedian-nid"

	// MonitoredObjectAttributesReflectorTypeAccedianVnid captures enum value "accedian-vnid"
	MonitoredObjectAttributesReflectorTypeAccedianVnid string = "accedian-vnid"
)

// prop value enum
func (m *MonitoredObjectAttributes) validateReflectorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, monitoredObjectAttributesTypeReflectorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MonitoredObjectAttributes) validateReflectorType(formats strfmt.Registry) error {

	if swag.IsZero(m.ReflectorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateReflectorTypeEnum("attributes"+"."+"reflectorType", "body", m.ReflectorType); err != nil {
		return err
	}

	return nil
}

func (m *MonitoredObjectAttributes) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "relationships")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitoredObjectAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitoredObjectAttributes) UnmarshalBinary(b []byte) error {
	var res MonitoredObjectAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MonitoredObjectAttributesRelationships monitored object attributes relationships
// swagger:model MonitoredObjectAttributesRelationships
type MonitoredObjectAttributesRelationships struct {

	// domains
	Domains *JSONAPIRelationship `json:"domains,omitempty"`
}

// Validate validates this monitored object attributes relationships
func (m *MonitoredObjectAttributesRelationships) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomains(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoredObjectAttributesRelationships) validateDomains(formats strfmt.Registry) error {

	if swag.IsZero(m.Domains) { // not required
		return nil
	}

	if m.Domains != nil {
		if err := m.Domains.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes" + "." + "relationships" + "." + "domains")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitoredObjectAttributesRelationships) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitoredObjectAttributesRelationships) UnmarshalBinary(b []byte) error {
	var res MonitoredObjectAttributesRelationships
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
