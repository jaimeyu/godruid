// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MonitoredObjectUpdate monitored object update
// swagger:model MonitoredObjectUpdate
type MonitoredObjectUpdate struct {

	// attributes
	// Required: true
	Attributes *MonitoredObjectUpdateAttributes `json:"attributes"`

	// id
	// Required: true
	ID *string `json:"id"`

	// type
	// Required: true
	// Enum: [monitoredObjects]
	Type *string `json:"type"`
}

// Validate validates this monitored object update
func (m *MonitoredObjectUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoredObjectUpdate) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *MonitoredObjectUpdate) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var monitoredObjectUpdateTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["monitoredObjects"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitoredObjectUpdateTypeTypePropEnum = append(monitoredObjectUpdateTypeTypePropEnum, v)
	}
}

const (

	// MonitoredObjectUpdateTypeMonitoredObjects captures enum value "monitoredObjects"
	MonitoredObjectUpdateTypeMonitoredObjects string = "monitoredObjects"
)

// prop value enum
func (m *MonitoredObjectUpdate) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, monitoredObjectUpdateTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MonitoredObjectUpdate) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitoredObjectUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitoredObjectUpdate) UnmarshalBinary(b []byte) error {
	var res MonitoredObjectUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MonitoredObjectUpdateAttributes monitored object update attributes
// swagger:model MonitoredObjectUpdateAttributes
type MonitoredObjectUpdateAttributes struct {

	// Value used to ensure updates to this object are handled in order.
	// Required: true
	Rev *string `json:"_rev"`

	// Name of the origin of the Monitored Object
	// Required: true
	ActuatorName *string `json:"actuatorName"`

	// Type of the origin of the Monitored Object
	// Required: true
	// Enum: [unknown accedian-nid accedian-vnid]
	ActuatorType *string `json:"actuatorType"`

	// Time since epoch at which this object was instantiated.
	// Required: true
	CreatedTimestamp *int64 `json:"createdTimestamp"`

	// Attributes added to a Monitored Object that help identify the Mlnitored Object as well as provide flitering/grouping properties
	Meta map[string]string `json:"meta,omitempty"`

	// Unique identifier of the Monitored Object in Datahub
	// Required: true
	ObjectID *string `json:"objectId"`

	// Name of the Monitored Object
	// Required: true
	ObjectName *string `json:"objectName"`

	// Type of the Monitored Object
	// Required: true
	// Enum: [unknown flowmeter twamp-pe twamp-sf twamp-sl]
	ObjectType *string `json:"objectType"`

	// Name of the target of the Monitored Object
	// Required: true
	ReflectorName *string `json:"reflectorName"`

	// Type of the target of the Monitored Object
	// Required: true
	// Enum: [unknown accedian-nid accedian-vnid]
	ReflectorType *string `json:"reflectorType"`
}

// Validate validates this monitored object update attributes
func (m *MonitoredObjectUpdateAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActuatorName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActuatorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReflectorName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReflectorType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoredObjectUpdateAttributes) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"_rev", "body", m.Rev); err != nil {
		return err
	}

	return nil
}

func (m *MonitoredObjectUpdateAttributes) validateActuatorName(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"actuatorName", "body", m.ActuatorName); err != nil {
		return err
	}

	return nil
}

var monitoredObjectUpdateAttributesTypeActuatorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","accedian-nid","accedian-vnid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitoredObjectUpdateAttributesTypeActuatorTypePropEnum = append(monitoredObjectUpdateAttributesTypeActuatorTypePropEnum, v)
	}
}

const (

	// MonitoredObjectUpdateAttributesActuatorTypeUnknown captures enum value "unknown"
	MonitoredObjectUpdateAttributesActuatorTypeUnknown string = "unknown"

	// MonitoredObjectUpdateAttributesActuatorTypeAccedianNid captures enum value "accedian-nid"
	MonitoredObjectUpdateAttributesActuatorTypeAccedianNid string = "accedian-nid"

	// MonitoredObjectUpdateAttributesActuatorTypeAccedianVnid captures enum value "accedian-vnid"
	MonitoredObjectUpdateAttributesActuatorTypeAccedianVnid string = "accedian-vnid"
)

// prop value enum
func (m *MonitoredObjectUpdateAttributes) validateActuatorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, monitoredObjectUpdateAttributesTypeActuatorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MonitoredObjectUpdateAttributes) validateActuatorType(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"actuatorType", "body", m.ActuatorType); err != nil {
		return err
	}

	// value enum
	if err := m.validateActuatorTypeEnum("attributes"+"."+"actuatorType", "body", *m.ActuatorType); err != nil {
		return err
	}

	return nil
}

func (m *MonitoredObjectUpdateAttributes) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"createdTimestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *MonitoredObjectUpdateAttributes) validateObjectID(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"objectId", "body", m.ObjectID); err != nil {
		return err
	}

	return nil
}

func (m *MonitoredObjectUpdateAttributes) validateObjectName(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"objectName", "body", m.ObjectName); err != nil {
		return err
	}

	return nil
}

var monitoredObjectUpdateAttributesTypeObjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","flowmeter","twamp-pe","twamp-sf","twamp-sl", "cisco-interface", "cisco-node-summary", "pvx", "paa", "regulator"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitoredObjectUpdateAttributesTypeObjectTypePropEnum = append(monitoredObjectUpdateAttributesTypeObjectTypePropEnum, v)
	}
}

const (

	// MonitoredObjectUpdateAttributesObjectTypeUnknown captures enum value "unknown"
	MonitoredObjectUpdateAttributesObjectTypeUnknown string = "unknown"

	// MonitoredObjectUpdateAttributesObjectTypeFlowmeter captures enum value "flowmeter"
	MonitoredObjectUpdateAttributesObjectTypeFlowmeter string = "flowmeter"

	// MonitoredObjectUpdateAttributesObjectTypeTwampPe captures enum value "twamp-pe"
	MonitoredObjectUpdateAttributesObjectTypeTwampPe string = "twamp-pe"

	// MonitoredObjectUpdateAttributesObjectTypeTwampSf captures enum value "twamp-sf"
	MonitoredObjectUpdateAttributesObjectTypeTwampSf string = "twamp-sf"

	// MonitoredObjectUpdateAttributesObjectTypeTwampSl captures enum value "twamp-sl"
	MonitoredObjectUpdateAttributesObjectTypeTwampSl string = "twamp-sl"
)

// prop value enum
func (m *MonitoredObjectUpdateAttributes) validateObjectTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, monitoredObjectUpdateAttributesTypeObjectTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MonitoredObjectUpdateAttributes) validateObjectType(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"objectType", "body", m.ObjectType); err != nil {
		return err
	}

	// value enum
	if err := m.validateObjectTypeEnum("attributes"+"."+"objectType", "body", *m.ObjectType); err != nil {
		return err
	}

	return nil
}

func (m *MonitoredObjectUpdateAttributes) validateReflectorName(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"reflectorName", "body", m.ReflectorName); err != nil {
		return err
	}

	return nil
}

var monitoredObjectUpdateAttributesTypeReflectorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","accedian-nid","accedian-vnid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitoredObjectUpdateAttributesTypeReflectorTypePropEnum = append(monitoredObjectUpdateAttributesTypeReflectorTypePropEnum, v)
	}
}

const (

	// MonitoredObjectUpdateAttributesReflectorTypeUnknown captures enum value "unknown"
	MonitoredObjectUpdateAttributesReflectorTypeUnknown string = "unknown"

	// MonitoredObjectUpdateAttributesReflectorTypeAccedianNid captures enum value "accedian-nid"
	MonitoredObjectUpdateAttributesReflectorTypeAccedianNid string = "accedian-nid"

	// MonitoredObjectUpdateAttributesReflectorTypeAccedianVnid captures enum value "accedian-vnid"
	MonitoredObjectUpdateAttributesReflectorTypeAccedianVnid string = "accedian-vnid"
)

// prop value enum
func (m *MonitoredObjectUpdateAttributes) validateReflectorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, monitoredObjectUpdateAttributesTypeReflectorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MonitoredObjectUpdateAttributes) validateReflectorType(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"reflectorType", "body", m.ReflectorType); err != nil {
		return err
	}

	// value enum
	if err := m.validateReflectorTypeEnum("attributes"+"."+"reflectorType", "body", *m.ReflectorType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitoredObjectUpdateAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitoredObjectUpdateAttributes) UnmarshalBinary(b []byte) error {
	var res MonitoredObjectUpdateAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
