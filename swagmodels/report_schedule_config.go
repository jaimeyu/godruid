// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportScheduleConfig report schedule config
// swagger:model ReportScheduleConfig
type ReportScheduleConfig struct {

	// attributes
	// Required: true
	Attributes *ReportScheduleConfigAttributes `json:"attributes"`

	// id
	// Required: true
	ID *string `json:"id"`

	// type
	// Required: true
	// Enum: [reportScheduleConfigs]
	Type *string `json:"type"`
}

// Validate validates this report schedule config
func (m *ReportScheduleConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportScheduleConfig) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("attributes")
			}
			return err
		}
	}

	return nil
}

func (m *ReportScheduleConfig) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var reportScheduleConfigTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["reportScheduleConfigs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reportScheduleConfigTypeTypePropEnum = append(reportScheduleConfigTypeTypePropEnum, v)
	}
}

const (

	// ReportScheduleConfigTypeReportScheduleConfigs captures enum value "reportScheduleConfigs"
	ReportScheduleConfigTypeReportScheduleConfigs string = "reportScheduleConfigs"
)

// prop value enum
func (m *ReportScheduleConfig) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, reportScheduleConfigTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReportScheduleConfig) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportScheduleConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportScheduleConfig) UnmarshalBinary(b []byte) error {
	var res ReportScheduleConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ReportScheduleConfigAttributes report schedule config attributes
// swagger:model ReportScheduleConfigAttributes
type ReportScheduleConfigAttributes struct {

	// rev
	// Required: true
	Rev *string `json:"_rev"`

	// active
	// Required: true
	Active *bool `json:"active"`

	// created timestamp
	// Required: true
	CreatedTimestamp *int64 `json:"createdTimestamp"`

	// datatype
	// Required: true
	Datatype *string `json:"datatype"`

	// day month
	// Required: true
	DayMonth *string `json:"dayMonth"`

	// day week
	// Required: true
	DayWeek *string `json:"dayWeek"`

	// granularity
	// Required: true
	Granularity *string `json:"granularity"`

	// hour
	// Required: true
	Hour *string `json:"hour"`

	// last modified timestamp
	// Required: true
	LastModifiedTimestamp *int64 `json:"lastModifiedTimestamp"`

	// minute
	// Required: true
	Minute *string `json:"minute"`

	// month
	// Required: true
	Month *string `json:"month"`

	// name
	// Required: true
	Name *string `json:"name"`

	// report type
	// Required: true
	ReportType *string `json:"reportType"`

	// tenant Id
	// Required: true
	TenantID *string `json:"tenantId"`

	// threshold profile
	// Required: true
	ThresholdProfile *string `json:"thresholdProfile"`

	// time range duration
	// Required: true
	TimeRangeDuration *string `json:"timeRangeDuration"`

	// timeout
	// Required: true
	Timeout *int64 `json:"timeout"`

	// timezone
	// Required: true
	Timezone *string `json:"timezone"`
}

// Validate validates this report schedule config attributes
func (m *ReportScheduleConfigAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatatype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDayWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGranularity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHour(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinute(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThresholdProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeRangeDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimezone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportScheduleConfigAttributes) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"_rev", "body", m.Rev); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"createdTimestamp", "body", m.CreatedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateDatatype(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"datatype", "body", m.Datatype); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateDayMonth(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"dayMonth", "body", m.DayMonth); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateDayWeek(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"dayWeek", "body", m.DayWeek); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateGranularity(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"granularity", "body", m.Granularity); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateHour(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"hour", "body", m.Hour); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateLastModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"lastModifiedTimestamp", "body", m.LastModifiedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateMinute(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"minute", "body", m.Minute); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateMonth(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"month", "body", m.Month); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateName(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateReportType(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"reportType", "body", m.ReportType); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateThresholdProfile(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"thresholdProfile", "body", m.ThresholdProfile); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateTimeRangeDuration(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"timeRangeDuration", "body", m.TimeRangeDuration); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateTimeout(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"timeout", "body", m.Timeout); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigAttributes) validateTimezone(formats strfmt.Registry) error {

	if err := validate.Required("attributes"+"."+"timezone", "body", m.Timezone); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportScheduleConfigAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportScheduleConfigAttributes) UnmarshalBinary(b []byte) error {
	var res ReportScheduleConfigAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
