// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportScheduleConfigUpdateRequest Object used to update an existing Report Genaration Schedule in Datahub
// swagger:model ReportScheduleConfigUpdateRequest
type ReportScheduleConfigUpdateRequest struct {

	// data
	// Required: true
	Data *ReportScheduleConfigUpdateRequestData `json:"data"`
}

// Validate validates this report schedule config update request
func (m *ReportScheduleConfigUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportScheduleConfigUpdateRequest) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportScheduleConfigUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportScheduleConfigUpdateRequest) UnmarshalBinary(b []byte) error {
	var res ReportScheduleConfigUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ReportScheduleConfigUpdateRequestData report schedule config update request data
// swagger:model ReportScheduleConfigUpdateRequestData
type ReportScheduleConfigUpdateRequestData struct {

	// attributes
	// Required: true
	Attributes *ReportScheduleConfigUpdateRequestDataAttributes `json:"attributes"`

	// id
	// Required: true
	ID *string `json:"id"`

	// relationships
	Relationships *ReportScheduleConfigRelationships `json:"relationships,omitempty"`

	// type
	// Required: true
	// Enum: [reportScheduleConfigs]
	Type *string `json:"type"`
}

// Validate validates this report schedule config update request data
func (m *ReportScheduleConfigUpdateRequestData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportScheduleConfigUpdateRequestData) validateAttributes(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes", "body", m.Attributes); err != nil {
		return err
	}

	if m.Attributes != nil {
		if err := m.Attributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "attributes")
			}
			return err
		}
	}

	return nil
}

func (m *ReportScheduleConfigUpdateRequestData) validateID(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ReportScheduleConfigUpdateRequestData) validateRelationships(formats strfmt.Registry) error {

	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	if m.Relationships != nil {
		if err := m.Relationships.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "relationships")
			}
			return err
		}
	}

	return nil
}

var reportScheduleConfigUpdateRequestDataTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["reportScheduleConfigs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reportScheduleConfigUpdateRequestDataTypeTypePropEnum = append(reportScheduleConfigUpdateRequestDataTypeTypePropEnum, v)
	}
}

const (

	// ReportScheduleConfigUpdateRequestDataTypeReportScheduleConfigs captures enum value "reportScheduleConfigs"
	ReportScheduleConfigUpdateRequestDataTypeReportScheduleConfigs string = "reportScheduleConfigs"
)

// prop value enum
func (m *ReportScheduleConfigUpdateRequestData) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, reportScheduleConfigUpdateRequestDataTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReportScheduleConfigUpdateRequestData) validateType(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("data"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportScheduleConfigUpdateRequestData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportScheduleConfigUpdateRequestData) UnmarshalBinary(b []byte) error {
	var res ReportScheduleConfigUpdateRequestData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ReportScheduleConfigUpdateRequestDataAttributes report schedule config update request data attributes
// swagger:model ReportScheduleConfigUpdateRequestDataAttributes
type ReportScheduleConfigUpdateRequestDataAttributes struct {

	// Value used to ensure updates to this object are handled in order.
	// Required: true
	Rev *string `json:"_rev"`

	// When true, the report will be generated. When false, the report will not be generated
	Active bool `json:"active,omitempty"`

	// Recurring day of the month when this report should be generated
	DayMonth string `json:"dayMonth,omitempty"`

	// Recurring day of the week when this report should be generated
	DayWeek string `json:"dayWeek,omitempty"`

	// Time period for which individual results should be aggregated
	Granularity string `json:"granularity,omitempty"`

	// Recurring hour when this report should be generated
	Hour string `json:"hour,omitempty"`

	// meta
	Meta map[string][]string `json:"meta,omitempty"`

	// Recurring minute when this report should be generated
	Minute string `json:"minute,omitempty"`

	// Recurring month when this report should be generated
	Month string `json:"month,omitempty"`

	// Identifying name for the report to be generated
	Name string `json:"name,omitempty"`

	// The type of report this config will generate
	ReportType string `json:"reportType,omitempty"`

	// Period of time for which the report will be generated
	TimeRangeDuration string `json:"timeRangeDuration,omitempty"`

	// Amount if time, in ms, before which the request to generate the report should be cancelled
	Timeout int64 `json:"timeout,omitempty"`

	// Timezone used to display the results in the generated report
	Timezone string `json:"timezone,omitempty"`
}

// Validate validates this report schedule config update request data attributes
func (m *ReportScheduleConfigUpdateRequestDataAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRev(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportScheduleConfigUpdateRequestDataAttributes) validateRev(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"attributes"+"."+"_rev", "body", m.Rev); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportScheduleConfigUpdateRequestDataAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportScheduleConfigUpdateRequestDataAttributes) UnmarshalBinary(b []byte) error {
	var res ReportScheduleConfigUpdateRequestDataAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
