// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SLAMetricEntry SLA metric entry
// swagger:model SLAMetricEntry
type SLAMetricEntry struct {

	// total duration
	// Required: true
	TotalDuration *int64 `json:"totalDuration"`

	// violation count
	// Required: true
	ViolationCount *int64 `json:"violationCount"`

	// violation duration
	// Required: true
	ViolationDuration *int64 `json:"violationDuration"`
}

// Validate validates this SLA metric entry
func (m *SLAMetricEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTotalDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViolationCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViolationDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SLAMetricEntry) validateTotalDuration(formats strfmt.Registry) error {

	if err := validate.Required("totalDuration", "body", m.TotalDuration); err != nil {
		return err
	}

	return nil
}

func (m *SLAMetricEntry) validateViolationCount(formats strfmt.Registry) error {

	if err := validate.Required("violationCount", "body", m.ViolationCount); err != nil {
		return err
	}

	return nil
}

func (m *SLAMetricEntry) validateViolationDuration(formats strfmt.Registry) error {

	if err := validate.Required("violationDuration", "body", m.ViolationDuration); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SLAMetricEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SLAMetricEntry) UnmarshalBinary(b []byte) error {
	var res SLAMetricEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
