// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// SLAReportMetric SLA report metric
// swagger:model SLAReportMetric
type SLAReportMetric struct {
	MetricIdentifier

	// by day of week
	ByDayOfWeek []*SLAMetricByDayOfWeek `json:"byDayOfWeek,omitempty"`

	// by granularity
	ByGranularity []*SLAMetricEntryTimeStamp `json:"byGranularity,omitempty"`

	// by hour of day
	ByHourOfDay []*SLAMetricByHourOfDay `json:"byHourOfDay,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SLAReportMetric) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 MetricIdentifier
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.MetricIdentifier = aO0

	// AO1
	var dataAO1 struct {
		ByDayOfWeek []*SLAMetricByDayOfWeek `json:"byDayOfWeek,omitempty"`

		ByGranularity []*SLAMetricEntryTimeStamp `json:"byGranularity,omitempty"`

		ByHourOfDay []*SLAMetricByHourOfDay `json:"byHourOfDay,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ByDayOfWeek = dataAO1.ByDayOfWeek

	m.ByGranularity = dataAO1.ByGranularity

	m.ByHourOfDay = dataAO1.ByHourOfDay

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SLAReportMetric) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.MetricIdentifier)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		ByDayOfWeek []*SLAMetricByDayOfWeek `json:"byDayOfWeek,omitempty"`

		ByGranularity []*SLAMetricEntryTimeStamp `json:"byGranularity,omitempty"`

		ByHourOfDay []*SLAMetricByHourOfDay `json:"byHourOfDay,omitempty"`
	}

	dataAO1.ByDayOfWeek = m.ByDayOfWeek

	dataAO1.ByGranularity = m.ByGranularity

	dataAO1.ByHourOfDay = m.ByHourOfDay

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this SLA report metric
func (m *SLAReportMetric) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with MetricIdentifier
	if err := m.MetricIdentifier.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateByDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateByGranularity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateByHourOfDay(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SLAReportMetric) validateByDayOfWeek(formats strfmt.Registry) error {

	if swag.IsZero(m.ByDayOfWeek) { // not required
		return nil
	}

	for i := 0; i < len(m.ByDayOfWeek); i++ {
		if swag.IsZero(m.ByDayOfWeek[i]) { // not required
			continue
		}

		if m.ByDayOfWeek[i] != nil {
			if err := m.ByDayOfWeek[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("byDayOfWeek" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SLAReportMetric) validateByGranularity(formats strfmt.Registry) error {

	if swag.IsZero(m.ByGranularity) { // not required
		return nil
	}

	for i := 0; i < len(m.ByGranularity); i++ {
		if swag.IsZero(m.ByGranularity[i]) { // not required
			continue
		}

		if m.ByGranularity[i] != nil {
			if err := m.ByGranularity[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("byGranularity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SLAReportMetric) validateByHourOfDay(formats strfmt.Registry) error {

	if swag.IsZero(m.ByHourOfDay) { // not required
		return nil
	}

	for i := 0; i < len(m.ByHourOfDay); i++ {
		if swag.IsZero(m.ByHourOfDay[i]) { // not required
			continue
		}

		if m.ByHourOfDay[i] != nil {
			if err := m.ByHourOfDay[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("byHourOfDay" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SLAReportMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SLAReportMetric) UnmarshalBinary(b []byte) error {
	var res SLAReportMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
