// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SLAReportSummary The rendered response structure from the metric query
// swagger:model SLAReportSummary
type SLAReportSummary struct {

	// by granularity
	ByGranularity []*SLATotalsTimestamp `json:"byGranularity,omitempty"`

	// object count
	// Required: true
	ObjectCount *int64 `json:"objectCount"`

	// sla compliance percent
	// Required: true
	SLACompliancePercent *float32 `json:"slaCompliancePercent"`

	// total duration
	// Required: true
	TotalDuration *int64 `json:"totalDuration"`

	// total violation count
	// Required: true
	TotalViolationCount *int64 `json:"totalViolationCount"`

	// total violation duration
	// Required: true
	TotalViolationDuration *int64 `json:"totalViolationDuration"`
}

// Validate validates this SLA report summary
func (m *SLAReportSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateByGranularity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSLACompliancePercent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalViolationCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalViolationDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SLAReportSummary) validateByGranularity(formats strfmt.Registry) error {

	if swag.IsZero(m.ByGranularity) { // not required
		return nil
	}

	for i := 0; i < len(m.ByGranularity); i++ {
		if swag.IsZero(m.ByGranularity[i]) { // not required
			continue
		}

		if m.ByGranularity[i] != nil {
			if err := m.ByGranularity[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("byGranularity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SLAReportSummary) validateObjectCount(formats strfmt.Registry) error {

	if err := validate.Required("objectCount", "body", m.ObjectCount); err != nil {
		return err
	}

	return nil
}

func (m *SLAReportSummary) validateSLACompliancePercent(formats strfmt.Registry) error {

	if err := validate.Required("slaCompliancePercent", "body", m.SLACompliancePercent); err != nil {
		return err
	}

	return nil
}

func (m *SLAReportSummary) validateTotalDuration(formats strfmt.Registry) error {

	if err := validate.Required("totalDuration", "body", m.TotalDuration); err != nil {
		return err
	}

	return nil
}

func (m *SLAReportSummary) validateTotalViolationCount(formats strfmt.Registry) error {

	if err := validate.Required("totalViolationCount", "body", m.TotalViolationCount); err != nil {
		return err
	}

	return nil
}

func (m *SLAReportSummary) validateTotalViolationDuration(formats strfmt.Registry) error {

	if err := validate.Required("totalViolationDuration", "body", m.TotalViolationDuration); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SLAReportSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SLAReportSummary) UnmarshalBinary(b []byte) error {
	var res SLAReportSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
