// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantMonitoredObjectAttr tenant monitored object attr
// swagger:model TenantMonitoredObjectAttr
type TenantMonitoredObjectAttr struct {

	// id
	ID string `json:"_id,omitempty"`

	// rev
	Rev string `json:"_rev,omitempty"`

	// actuator name
	ActuatorName string `json:"actuatorName,omitempty"`

	// actuator type
	// Enum: [unknown accedian-nid accedian-vnid]
	ActuatorType string `json:"actuatorType,omitempty"`

	// created timestamp
	CreatedTimestamp int64 `json:"createdTimestamp,omitempty"`

	// datatype
	Datatype string `json:"datatype,omitempty"`

	// last modified timestamp
	LastModifiedTimestamp int64 `json:"lastModifiedTimestamp,omitempty"`

	// meta
	Meta map[string]string `json:"meta,omitempty"`

	// object Id
	ObjectID string `json:"objectId,omitempty"`

	// object name
	ObjectName string `json:"objectName,omitempty"`

	// object type
	// Enum: [unknown flowmeter twamp-pe twamp-sf twamp-sl cisco-interface cisco-node-summary pvx paa regulator rfc8321 dmm]
	ObjectType string `json:"objectType,omitempty"`

	// reflector name
	ReflectorName string `json:"reflectorName,omitempty"`

	// reflector type
	// Enum: [unknown accedian-nid accedian-vnid]
	ReflectorType string `json:"reflectorType,omitempty"`

	// tenant Id
	TenantID string `json:"tenantId,omitempty"`
}

// Validate validates this tenant monitored object attr
func (m *TenantMonitoredObjectAttr) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActuatorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReflectorType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tenantMonitoredObjectAttrTypeActuatorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","accedian-nid","accedian-vnid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantMonitoredObjectAttrTypeActuatorTypePropEnum = append(tenantMonitoredObjectAttrTypeActuatorTypePropEnum, v)
	}
}

const (

	// TenantMonitoredObjectAttrActuatorTypeUnknown captures enum value "unknown"
	TenantMonitoredObjectAttrActuatorTypeUnknown string = "unknown"

	// TenantMonitoredObjectAttrActuatorTypeAccedianNid captures enum value "accedian-nid"
	TenantMonitoredObjectAttrActuatorTypeAccedianNid string = "accedian-nid"

	// TenantMonitoredObjectAttrActuatorTypeAccedianVnid captures enum value "accedian-vnid"
	TenantMonitoredObjectAttrActuatorTypeAccedianVnid string = "accedian-vnid"
)

// prop value enum
func (m *TenantMonitoredObjectAttr) validateActuatorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tenantMonitoredObjectAttrTypeActuatorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TenantMonitoredObjectAttr) validateActuatorType(formats strfmt.Registry) error {

	if swag.IsZero(m.ActuatorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateActuatorTypeEnum("actuatorType", "body", m.ActuatorType); err != nil {
		return err
	}

	return nil
}

var tenantMonitoredObjectAttrTypeObjectTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","flowmeter","twamp-pe","twamp-sf","twamp-sl","cisco-interface","cisco-node-summary","pvx","paa","regulator","rfc8321","dmm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantMonitoredObjectAttrTypeObjectTypePropEnum = append(tenantMonitoredObjectAttrTypeObjectTypePropEnum, v)
	}
}

const (

	// TenantMonitoredObjectAttrObjectTypeUnknown captures enum value "unknown"
	TenantMonitoredObjectAttrObjectTypeUnknown string = "unknown"

	// TenantMonitoredObjectAttrObjectTypeFlowmeter captures enum value "flowmeter"
	TenantMonitoredObjectAttrObjectTypeFlowmeter string = "flowmeter"

	// TenantMonitoredObjectAttrObjectTypeTwampPe captures enum value "twamp-pe"
	TenantMonitoredObjectAttrObjectTypeTwampPe string = "twamp-pe"

	// TenantMonitoredObjectAttrObjectTypeTwampSf captures enum value "twamp-sf"
	TenantMonitoredObjectAttrObjectTypeTwampSf string = "twamp-sf"

	// TenantMonitoredObjectAttrObjectTypeTwampSl captures enum value "twamp-sl"
	TenantMonitoredObjectAttrObjectTypeTwampSl string = "twamp-sl"

	// TenantMonitoredObjectAttrObjectTypeCiscoInterface captures enum value "cisco-interface"
	TenantMonitoredObjectAttrObjectTypeCiscoInterface string = "cisco-interface"

	// TenantMonitoredObjectAttrObjectTypeCiscoNodeSummary captures enum value "cisco-node-summary"
	TenantMonitoredObjectAttrObjectTypeCiscoNodeSummary string = "cisco-node-summary"

	// TenantMonitoredObjectAttrObjectTypePvx captures enum value "pvx"
	TenantMonitoredObjectAttrObjectTypePvx string = "pvx"

	// TenantMonitoredObjectAttrObjectTypePaa captures enum value "paa"
	TenantMonitoredObjectAttrObjectTypePaa string = "paa"

	// TenantMonitoredObjectAttrObjectTypeRegulator captures enum value "regulator"
	TenantMonitoredObjectAttrObjectTypeRegulator string = "regulator"

	// TenantMonitoredObjectAttrObjectTypeRfc8321 captures enum value "rfc8321"
	TenantMonitoredObjectAttrObjectTypeRfc8321 string = "rfc8321"

	// TenantMonitoredObjectAttrObjectTypeDmm captures enum value "dmm"
	TenantMonitoredObjectAttrObjectTypeDmm string = "dmm"
)

// prop value enum
func (m *TenantMonitoredObjectAttr) validateObjectTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tenantMonitoredObjectAttrTypeObjectTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TenantMonitoredObjectAttr) validateObjectType(formats strfmt.Registry) error {

	if swag.IsZero(m.ObjectType) { // not required
		return nil
	}

	// value enum
	if err := m.validateObjectTypeEnum("objectType", "body", m.ObjectType); err != nil {
		return err
	}

	return nil
}

var tenantMonitoredObjectAttrTypeReflectorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","accedian-nid","accedian-vnid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantMonitoredObjectAttrTypeReflectorTypePropEnum = append(tenantMonitoredObjectAttrTypeReflectorTypePropEnum, v)
	}
}

const (

	// TenantMonitoredObjectAttrReflectorTypeUnknown captures enum value "unknown"
	TenantMonitoredObjectAttrReflectorTypeUnknown string = "unknown"

	// TenantMonitoredObjectAttrReflectorTypeAccedianNid captures enum value "accedian-nid"
	TenantMonitoredObjectAttrReflectorTypeAccedianNid string = "accedian-nid"

	// TenantMonitoredObjectAttrReflectorTypeAccedianVnid captures enum value "accedian-vnid"
	TenantMonitoredObjectAttrReflectorTypeAccedianVnid string = "accedian-vnid"
)

// prop value enum
func (m *TenantMonitoredObjectAttr) validateReflectorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tenantMonitoredObjectAttrTypeReflectorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TenantMonitoredObjectAttr) validateReflectorType(formats strfmt.Registry) error {

	if swag.IsZero(m.ReflectorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateReflectorTypeEnum("reflectorType", "body", m.ReflectorType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TenantMonitoredObjectAttr) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantMonitoredObjectAttr) UnmarshalBinary(b []byte) error {
	var res TenantMonitoredObjectAttr
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
