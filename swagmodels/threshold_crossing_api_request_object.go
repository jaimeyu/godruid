// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThresholdCrossingAPIRequestObject threshold crossing API request object
// swagger:model ThresholdCrossingAPIRequestObject
type ThresholdCrossingAPIRequestObject struct {

	// set of domains identifiers to use for filtering
	DomainIds []string `json:"domainIds"`

	// the granularity for timeseries in ISO-8601 duration format, or ALL
	Granularity string `json:"granularity,omitempty"`

	// ISO-8601 interval
	// Required: true
	Interval *string `json:"interval"`

	// set of domains identifiers to use for filtering
	Meta map[string]string `json:"meta,omitempty"`

	// limits the results to include only metrics in the whitelist
	MetricWhitelist []*MetricIdentifierObject `json:"metricWhitelist"`

	// the tenant identifier
	// Required: true
	TenantID *string `json:"tenantId"`

	// ID of the threshold profile that is used to select metrics and events
	ThresholdProfileID string `json:"thresholdProfileId,omitempty"`

	// query timeout in milliseconds
	Timeout int64 `json:"timeout,omitempty"`
}

// Validate validates this threshold crossing API request object
func (m *ThresholdCrossingAPIRequestObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThresholdCrossingAPIRequestObject) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

func (m *ThresholdCrossingAPIRequestObject) validateMetricWhitelist(formats strfmt.Registry) error {

	if swag.IsZero(m.MetricWhitelist) { // not required
		return nil
	}

	for i := 0; i < len(m.MetricWhitelist); i++ {
		if swag.IsZero(m.MetricWhitelist[i]) { // not required
			continue
		}

		if m.MetricWhitelist[i] != nil {
			if err := m.MetricWhitelist[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metricWhitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ThresholdCrossingAPIRequestObject) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThresholdCrossingAPIRequestObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThresholdCrossingAPIRequestObject) UnmarshalBinary(b []byte) error {
	var res ThresholdCrossingAPIRequestObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
