// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThresholdCrossingByMOTopNConfig The necessary request parameters for the metric api call
// swagger:model ThresholdCrossingByMOTopNConfig
type ThresholdCrossingByMOTopNConfig struct {

	// the type of aggregation to determine the top N result set
	// Enum: [min max avg]
	Aggregator string `json:"aggregator,omitempty"`

	// A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not
	IgnoreCleaning bool `json:"ignoreCleaning,omitempty"`

	// Time boundary for the metrics under consideration using the ISO-8601 standard
	// Required: true
	Interval *string `json:"interval"`

	// meta
	Meta MetaFilter `json:"meta,omitempty"`

	// The metric to be used for the top N query
	// Required: true
	Metric *MetricIdentifierFilter `json:"metric"`

	// Query timeout in milliseconds
	// Required: true
	NumResults *int32 `json:"numResults"`

	// Indicates whether the response should return the topn in ascending or descending order. The default value is descending
	// Enum: [asc desc]
	Sorted string `json:"sorted,omitempty"`

	// ID of the threshold profile that is used to select metrics and events
	// Required: true
	ThresholdProfileID *string `json:"thresholdProfileId"`

	// Query timeout in milliseconds
	Timeout int64 `json:"timeout,omitempty"`
}

// Validate validates this threshold crossing by m o top n config
func (m *ThresholdCrossingByMOTopNConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSorted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThresholdProfileID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var thresholdCrossingByMOTopNConfigTypeAggregatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["min","max","avg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thresholdCrossingByMOTopNConfigTypeAggregatorPropEnum = append(thresholdCrossingByMOTopNConfigTypeAggregatorPropEnum, v)
	}
}

const (

	// ThresholdCrossingByMOTopNConfigAggregatorMin captures enum value "min"
	ThresholdCrossingByMOTopNConfigAggregatorMin string = "min"

	// ThresholdCrossingByMOTopNConfigAggregatorMax captures enum value "max"
	ThresholdCrossingByMOTopNConfigAggregatorMax string = "max"

	// ThresholdCrossingByMOTopNConfigAggregatorAvg captures enum value "avg"
	ThresholdCrossingByMOTopNConfigAggregatorAvg string = "avg"
)

// prop value enum
func (m *ThresholdCrossingByMOTopNConfig) validateAggregatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, thresholdCrossingByMOTopNConfigTypeAggregatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ThresholdCrossingByMOTopNConfig) validateAggregator(formats strfmt.Registry) error {

	if swag.IsZero(m.Aggregator) { // not required
		return nil
	}

	// value enum
	if err := m.validateAggregatorEnum("aggregator", "body", m.Aggregator); err != nil {
		return err
	}

	return nil
}

func (m *ThresholdCrossingByMOTopNConfig) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

func (m *ThresholdCrossingByMOTopNConfig) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if err := m.Meta.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("meta")
		}
		return err
	}

	return nil
}

func (m *ThresholdCrossingByMOTopNConfig) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", m.Metric); err != nil {
		return err
	}

	if m.Metric != nil {
		if err := m.Metric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric")
			}
			return err
		}
	}

	return nil
}

func (m *ThresholdCrossingByMOTopNConfig) validateNumResults(formats strfmt.Registry) error {

	if err := validate.Required("numResults", "body", m.NumResults); err != nil {
		return err
	}

	return nil
}

var thresholdCrossingByMOTopNConfigTypeSortedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["asc","desc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		thresholdCrossingByMOTopNConfigTypeSortedPropEnum = append(thresholdCrossingByMOTopNConfigTypeSortedPropEnum, v)
	}
}

const (

	// ThresholdCrossingByMOTopNConfigSortedAsc captures enum value "asc"
	ThresholdCrossingByMOTopNConfigSortedAsc string = "asc"

	// ThresholdCrossingByMOTopNConfigSortedDesc captures enum value "desc"
	ThresholdCrossingByMOTopNConfigSortedDesc string = "desc"
)

// prop value enum
func (m *ThresholdCrossingByMOTopNConfig) validateSortedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, thresholdCrossingByMOTopNConfigTypeSortedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ThresholdCrossingByMOTopNConfig) validateSorted(formats strfmt.Registry) error {

	if swag.IsZero(m.Sorted) { // not required
		return nil
	}

	// value enum
	if err := m.validateSortedEnum("sorted", "body", m.Sorted); err != nil {
		return err
	}

	return nil
}

func (m *ThresholdCrossingByMOTopNConfig) validateThresholdProfileID(formats strfmt.Registry) error {

	if err := validate.Required("thresholdProfileId", "body", m.ThresholdProfileID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThresholdCrossingByMOTopNConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThresholdCrossingByMOTopNConfig) UnmarshalBinary(b []byte) error {
	var res ThresholdCrossingByMOTopNConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
