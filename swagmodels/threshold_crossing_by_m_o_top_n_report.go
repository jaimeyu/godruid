// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ThresholdCrossingByMOTopNReport The rendered response structure from the metric query
// swagger:model ThresholdCrossingByMOTopNReport
type ThresholdCrossingByMOTopNReport []*ThresholdCrossingByMOTopNReportItems0

// Validate validates this threshold crossing by m o top n report
func (m ThresholdCrossingByMOTopNReport) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ThresholdCrossingByMOTopNReportItems0 A set of entries detailing the number of event crossings per type ordered from most to least. Ranking is based on weighted criticality of each event type.
// swagger:model ThresholdCrossingByMOTopNReportItems0
type ThresholdCrossingByMOTopNReportItems0 struct {
	ResultEntryParameters

	// result
	Result *ThresholdCrossingByMOTopNReportItems0AO1Result `json:"result,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ThresholdCrossingByMOTopNReportItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ResultEntryParameters
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ResultEntryParameters = aO0

	// AO1
	var dataAO1 struct {
		Result *ThresholdCrossingByMOTopNReportItems0AO1Result `json:"result,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Result = dataAO1.Result

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ThresholdCrossingByMOTopNReportItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ResultEntryParameters)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Result *ThresholdCrossingByMOTopNReportItems0AO1Result `json:"result,omitempty"`
	}

	dataAO1.Result = m.Result

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this threshold crossing by m o top n report items0
func (m *ThresholdCrossingByMOTopNReportItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ResultEntryParameters
	if err := m.ResultEntryParameters.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThresholdCrossingByMOTopNReportItems0) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThresholdCrossingByMOTopNReportItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThresholdCrossingByMOTopNReportItems0) UnmarshalBinary(b []byte) error {
	var res ThresholdCrossingByMOTopNReportItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ThresholdCrossingByMOTopNReportItems0AO1Result threshold crossing by m o top n report items0 a o1 result
// swagger:model ThresholdCrossingByMOTopNReportItems0AO1Result
type ThresholdCrossingByMOTopNReportItems0AO1Result struct {

	// Number of critical event crossings for this metric
	Critical int64 `json:"critical,omitempty"`

	// Number of info event crossings for this metric
	Info int64 `json:"info,omitempty"`

	// Number of major event crossings for this metric
	Major int64 `json:"major,omitempty"`

	// Number of minor event crossings for this metric
	Minor int64 `json:"minor,omitempty"`

	// The score that determined the ranking of this specific entry within the topn
	Scored float32 `json:"scored,omitempty"`

	// Total number of event crossings
	Total int64 `json:"total,omitempty"`

	// Number of warning event crossings for this metric
	Warn int64 `json:"warn,omitempty"`
}

// Validate validates this threshold crossing by m o top n report items0 a o1 result
func (m *ThresholdCrossingByMOTopNReportItems0AO1Result) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ThresholdCrossingByMOTopNReportItems0AO1Result) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThresholdCrossingByMOTopNReportItems0AO1Result) UnmarshalBinary(b []byte) error {
	var res ThresholdCrossingByMOTopNReportItems0AO1Result
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
