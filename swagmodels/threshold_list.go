// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ThresholdList Contains an array of objects that outline thresholds per vendor/monitoredObjectType/direction which, when crossed, will generate events
// swagger:model ThresholdList
type ThresholdList []*ThresholdListItems0

// Validate validates this threshold list
func (m ThresholdList) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ThresholdListItems0 threshold list items0
// swagger:model ThresholdListItems0
type ThresholdListItems0 struct {

	// Describes the direction of the test in case a Threshold needs to be different for one direction (i.e. actuator to reflector) versus another (i.e. round trip)
	Direction string `json:"direction,omitempty"`

	// When true, Threshold Crossing for this Metric will be reported. When false, Threshold Crossings for this Metric are not reported.
	Enabled string `json:"enabled,omitempty"`

	// A collection of objects that describe the properties of a Threshold for a Metric
	Events []map[string]string `json:"events"`

	// The name of the Metric
	Metric string `json:"metric,omitempty"`

	// The name of the type of Monitored Object for which this Metric is applicable
	MonitoredObjectType string `json:"monitoredObjectType,omitempty"`

	// The name of the Vendor from which this Metric originates
	Vendor string `json:"vendor,omitempty"`
}

// Validate validates this threshold list items0
func (m *ThresholdListItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ThresholdListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThresholdListItems0) UnmarshalBinary(b []byte) error {
	var res ThresholdListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
