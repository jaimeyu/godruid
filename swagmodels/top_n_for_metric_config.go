// Code generated by go-swagger; DO NOT EDIT.

package swagmodels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TopNForMetricConfig The necessary request parameters for the metric api call
// swagger:model TopNForMetricConfig
type TopNForMetricConfig struct {

	// The type of aggregation (avg/min/max)
	// Required: true
	// Enum: [min max avg]
	Aggregator *string `json:"aggregator"`

	// An ordered set of histogram buckets that should be filled with the appropriate metric data
	Buckets []*TopNForMetricConfigBucketsItems0 `json:"buckets"`

	// An array of metric dimensions that filter-in metrics that adhere to those dimensions. Refer to the DimensionFilter object for further information
	Dimensions DimensionFilter `json:"dimensions,omitempty"`

	// A value of true will have the aggregation request execute on all data regardless of whether it has been cleaned or not
	IgnoreCleaning bool `json:"ignoreCleaning,omitempty"`

	// Time boundary for the metrics under consideration using the ISO-8601 standard
	// Required: true
	Interval *string `json:"interval"`

	// meta
	Meta MetaFilter `json:"meta,omitempty"`

	// An identifier that considers one specific metric based on the provided information
	// Required: true
	Metric *MetricIdentifierFilter `json:"metric"`

	// metrics view
	MetricsView []*MetricView `json:"metricsView,omitempty"`

	// An optional array of monitored objects that we want to retrieve specific topn against. This attribute cannot be used if the meta attribute is also present in the request.
	MonitoredObjects []string `json:"monitoredObjects,omitempty"`

	// Number of results to return
	NumResults int64 `json:"numResults,omitempty"`

	// Indicates whether the response should return the topn in ascending or descending order. The default value is descending
	// Enum: [asc desc]
	Sorted string `json:"sorted,omitempty"`

	// Query timeout in milliseconds
	Timeout int64 `json:"timeout,omitempty"`
}

// Validate validates this top n for metric config
func (m *TopNForMetricConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuckets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricsView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSorted(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var topNForMetricConfigTypeAggregatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["min","max","avg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		topNForMetricConfigTypeAggregatorPropEnum = append(topNForMetricConfigTypeAggregatorPropEnum, v)
	}
}

const (

	// TopNForMetricConfigAggregatorMin captures enum value "min"
	TopNForMetricConfigAggregatorMin string = "min"

	// TopNForMetricConfigAggregatorMax captures enum value "max"
	TopNForMetricConfigAggregatorMax string = "max"

	// TopNForMetricConfigAggregatorAvg captures enum value "avg"
	TopNForMetricConfigAggregatorAvg string = "avg"
)

// prop value enum
func (m *TopNForMetricConfig) validateAggregatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, topNForMetricConfigTypeAggregatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TopNForMetricConfig) validateAggregator(formats strfmt.Registry) error {

	if err := validate.Required("aggregator", "body", m.Aggregator); err != nil {
		return err
	}

	// value enum
	if err := m.validateAggregatorEnum("aggregator", "body", *m.Aggregator); err != nil {
		return err
	}

	return nil
}

func (m *TopNForMetricConfig) validateBuckets(formats strfmt.Registry) error {

	if swag.IsZero(m.Buckets) { // not required
		return nil
	}

	for i := 0; i < len(m.Buckets); i++ {
		if swag.IsZero(m.Buckets[i]) { // not required
			continue
		}

		if m.Buckets[i] != nil {
			if err := m.Buckets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("buckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TopNForMetricConfig) validateDimensions(formats strfmt.Registry) error {

	if swag.IsZero(m.Dimensions) { // not required
		return nil
	}

	if err := m.Dimensions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dimensions")
		}
		return err
	}

	return nil
}

func (m *TopNForMetricConfig) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

func (m *TopNForMetricConfig) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if err := m.Meta.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("meta")
		}
		return err
	}

	return nil
}

func (m *TopNForMetricConfig) validateMetric(formats strfmt.Registry) error {

	if err := validate.Required("metric", "body", m.Metric); err != nil {
		return err
	}

	if m.Metric != nil {
		if err := m.Metric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric")
			}
			return err
		}
	}

	return nil
}

func (m *TopNForMetricConfig) validateMetricsView(formats strfmt.Registry) error {

	if swag.IsZero(m.MetricsView) { // not required
		return nil
	}

	for i := 0; i < len(m.MetricsView); i++ {
		if swag.IsZero(m.MetricsView[i]) { // not required
			continue
		}

		if m.MetricsView[i] != nil {
			if err := m.MetricsView[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metricsView" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var topNForMetricConfigTypeSortedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["asc","desc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		topNForMetricConfigTypeSortedPropEnum = append(topNForMetricConfigTypeSortedPropEnum, v)
	}
}

const (

	// TopNForMetricConfigSortedAsc captures enum value "asc"
	TopNForMetricConfigSortedAsc string = "asc"

	// TopNForMetricConfigSortedDesc captures enum value "desc"
	TopNForMetricConfigSortedDesc string = "desc"
)

// prop value enum
func (m *TopNForMetricConfig) validateSortedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, topNForMetricConfigTypeSortedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TopNForMetricConfig) validateSorted(formats strfmt.Registry) error {

	if swag.IsZero(m.Sorted) { // not required
		return nil
	}

	// value enum
	if err := m.validateSortedEnum("sorted", "body", m.Sorted); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopNForMetricConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopNForMetricConfig) UnmarshalBinary(b []byte) error {
	var res TopNForMetricConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TopNForMetricConfigBucketsItems0 top n for metric config buckets items0
// swagger:model TopNForMetricConfigBucketsItems0
type TopNForMetricConfigBucketsItems0 struct {

	// lower
	Lower *TopNForMetricConfigBucketsItems0Lower `json:"lower,omitempty"`

	// upper
	Upper *TopNForMetricConfigBucketsItems0Upper `json:"upper,omitempty"`
}

// Validate validates this top n for metric config buckets items0
func (m *TopNForMetricConfigBucketsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLower(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpper(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopNForMetricConfigBucketsItems0) validateLower(formats strfmt.Registry) error {

	if swag.IsZero(m.Lower) { // not required
		return nil
	}

	if m.Lower != nil {
		if err := m.Lower.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lower")
			}
			return err
		}
	}

	return nil
}

func (m *TopNForMetricConfigBucketsItems0) validateUpper(formats strfmt.Registry) error {

	if swag.IsZero(m.Upper) { // not required
		return nil
	}

	if m.Upper != nil {
		if err := m.Upper.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upper")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopNForMetricConfigBucketsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopNForMetricConfigBucketsItems0) UnmarshalBinary(b []byte) error {
	var res TopNForMetricConfigBucketsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TopNForMetricConfigBucketsItems0Lower The specification for the lower boundary of the bucket
// swagger:model TopNForMetricConfigBucketsItems0Lower
type TopNForMetricConfigBucketsItems0Lower struct {

	// If set to true, then the lower value is assumed to be exclusive. Otherwise a value of false or the absence of this value assumes that the lower value is to be taken inclusively
	Strict bool `json:"strict,omitempty"`

	// The lower, positive number to be used to describe the lowest value of the bucket. Omitting this value assumes that this bucket includes anything lower than the defined "upper" value
	// Required: true
	Value *float32 `json:"value"`
}

// Validate validates this top n for metric config buckets items0 lower
func (m *TopNForMetricConfigBucketsItems0Lower) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopNForMetricConfigBucketsItems0Lower) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("lower"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopNForMetricConfigBucketsItems0Lower) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopNForMetricConfigBucketsItems0Lower) UnmarshalBinary(b []byte) error {
	var res TopNForMetricConfigBucketsItems0Lower
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// TopNForMetricConfigBucketsItems0Upper The specification for the upper boundary of the bucket
// swagger:model TopNForMetricConfigBucketsItems0Upper
type TopNForMetricConfigBucketsItems0Upper struct {

	// If set to true, then the upper value is assumed to be exclusive. Otherwise a value of false or the absence of this value assumes that the upper value is to be taken inclusively
	Strict bool `json:"strict,omitempty"`

	// The upper, positive number to be used to describe the highest value of the bucket. Omitting this value assumes that this bucket includes anything higher than the defined "lower" value
	// Required: true
	Value *float32 `json:"value"`
}

// Validate validates this top n for metric config buckets items0 upper
func (m *TopNForMetricConfigBucketsItems0Upper) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TopNForMetricConfigBucketsItems0Upper) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("upper"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TopNForMetricConfigBucketsItems0Upper) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TopNForMetricConfigBucketsItems0Upper) UnmarshalBinary(b []byte) error {
	var res TopNForMetricConfigBucketsItems0Upper
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
